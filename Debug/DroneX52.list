
DroneX52.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000beac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  0800bfc0  0800bfc0  0000cfc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c788  0800c788  0000e220  2**0
                  CONTENTS
  4 .ARM          00000008  0800c788  0800c788  0000d788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c790  0800c790  0000e220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c790  0800c790  0000d790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c794  0800c794  0000d794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  0800c798  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  20000220  0800c9b8  0000e220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  0800c9b8  0000e7e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d7a  00000000  00000000  0000e249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a2b  00000000  00000000  0001ffc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  000229f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd6  00000000  00000000  00023b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a23b  00000000  00000000  00024956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000159f4  00000000  00000000  0003eb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092226  00000000  00000000  00054585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e67ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063b0  00000000  00000000  000e67f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ecba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bfa4 	.word	0x0800bfa4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	0800bfa4 	.word	0x0800bfa4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	@ 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__gedf2>:
 8000900:	f04f 3cff 	mov.w	ip, #4294967295
 8000904:	e006      	b.n	8000914 <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__ledf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	e002      	b.n	8000914 <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__cmpdf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800091c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800092a:	d01b      	beq.n	8000964 <__cmpdf2+0x54>
 800092c:	b001      	add	sp, #4
 800092e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000932:	bf0c      	ite	eq
 8000934:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000938:	ea91 0f03 	teqne	r1, r3
 800093c:	bf02      	ittt	eq
 800093e:	ea90 0f02 	teqeq	r0, r2
 8000942:	2000      	moveq	r0, #0
 8000944:	4770      	bxeq	lr
 8000946:	f110 0f00 	cmn.w	r0, #0
 800094a:	ea91 0f03 	teq	r1, r3
 800094e:	bf58      	it	pl
 8000950:	4299      	cmppl	r1, r3
 8000952:	bf08      	it	eq
 8000954:	4290      	cmpeq	r0, r2
 8000956:	bf2c      	ite	cs
 8000958:	17d8      	asrcs	r0, r3, #31
 800095a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095e:	f040 0001 	orr.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800096c:	d102      	bne.n	8000974 <__cmpdf2+0x64>
 800096e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000972:	d107      	bne.n	8000984 <__cmpdf2+0x74>
 8000974:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d1d6      	bne.n	800092c <__cmpdf2+0x1c>
 800097e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000982:	d0d3      	beq.n	800092c <__cmpdf2+0x1c>
 8000984:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_cdrcmple>:
 800098c:	4684      	mov	ip, r0
 800098e:	4610      	mov	r0, r2
 8000990:	4662      	mov	r2, ip
 8000992:	468c      	mov	ip, r1
 8000994:	4619      	mov	r1, r3
 8000996:	4663      	mov	r3, ip
 8000998:	e000      	b.n	800099c <__aeabi_cdcmpeq>
 800099a:	bf00      	nop

0800099c <__aeabi_cdcmpeq>:
 800099c:	b501      	push	{r0, lr}
 800099e:	f7ff ffb7 	bl	8000910 <__cmpdf2>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	bf48      	it	mi
 80009a6:	f110 0f00 	cmnmi.w	r0, #0
 80009aa:	bd01      	pop	{r0, pc}

080009ac <__aeabi_dcmpeq>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff fff4 	bl	800099c <__aeabi_cdcmpeq>
 80009b4:	bf0c      	ite	eq
 80009b6:	2001      	moveq	r0, #1
 80009b8:	2000      	movne	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmplt>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffea 	bl	800099c <__aeabi_cdcmpeq>
 80009c8:	bf34      	ite	cc
 80009ca:	2001      	movcc	r0, #1
 80009cc:	2000      	movcs	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmple>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffe0 	bl	800099c <__aeabi_cdcmpeq>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpge>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffce 	bl	800098c <__aeabi_cdrcmple>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpgt>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffc4 	bl	800098c <__aeabi_cdrcmple>
 8000a04:	bf34      	ite	cc
 8000a06:	2001      	movcc	r0, #1
 8000a08:	2000      	movcs	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpun>:
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__aeabi_dcmpun+0x10>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d10a      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x20>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0001 	mov.w	r0, #1
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_frsub>:
 8000b6c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b70:	e002      	b.n	8000b78 <__addsf3>
 8000b72:	bf00      	nop

08000b74 <__aeabi_fsub>:
 8000b74:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b78 <__addsf3>:
 8000b78:	0042      	lsls	r2, r0, #1
 8000b7a:	bf1f      	itttt	ne
 8000b7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b80:	ea92 0f03 	teqne	r2, r3
 8000b84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8c:	d06a      	beq.n	8000c64 <__addsf3+0xec>
 8000b8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b96:	bfc1      	itttt	gt
 8000b98:	18d2      	addgt	r2, r2, r3
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	4048      	eorgt	r0, r1
 8000b9e:	4041      	eorgt	r1, r0
 8000ba0:	bfb8      	it	lt
 8000ba2:	425b      	neglt	r3, r3
 8000ba4:	2b19      	cmp	r3, #25
 8000ba6:	bf88      	it	hi
 8000ba8:	4770      	bxhi	lr
 8000baa:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bc2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4249      	negne	r1, r1
 8000bca:	ea92 0f03 	teq	r2, r3
 8000bce:	d03f      	beq.n	8000c50 <__addsf3+0xd8>
 8000bd0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd8:	eb10 000c 	adds.w	r0, r0, ip
 8000bdc:	f1c3 0320 	rsb	r3, r3, #32
 8000be0:	fa01 f103 	lsl.w	r1, r1, r3
 8000be4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be8:	d502      	bpl.n	8000bf0 <__addsf3+0x78>
 8000bea:	4249      	negs	r1, r1
 8000bec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf4:	d313      	bcc.n	8000c1e <__addsf3+0xa6>
 8000bf6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bfa:	d306      	bcc.n	8000c0a <__addsf3+0x92>
 8000bfc:	0840      	lsrs	r0, r0, #1
 8000bfe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c02:	f102 0201 	add.w	r2, r2, #1
 8000c06:	2afe      	cmp	r2, #254	@ 0xfe
 8000c08:	d251      	bcs.n	8000cae <__addsf3+0x136>
 8000c0a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	ea40 0003 	orr.w	r0, r0, r3
 8000c1c:	4770      	bx	lr
 8000c1e:	0049      	lsls	r1, r1, #1
 8000c20:	eb40 0000 	adc.w	r0, r0, r0
 8000c24:	3a01      	subs	r2, #1
 8000c26:	bf28      	it	cs
 8000c28:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c2c:	d2ed      	bcs.n	8000c0a <__addsf3+0x92>
 8000c2e:	fab0 fc80 	clz	ip, r0
 8000c32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c36:	ebb2 020c 	subs.w	r2, r2, ip
 8000c3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3e:	bfaa      	itet	ge
 8000c40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c44:	4252      	neglt	r2, r2
 8000c46:	4318      	orrge	r0, r3
 8000c48:	bfbc      	itt	lt
 8000c4a:	40d0      	lsrlt	r0, r2
 8000c4c:	4318      	orrlt	r0, r3
 8000c4e:	4770      	bx	lr
 8000c50:	f092 0f00 	teq	r2, #0
 8000c54:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c58:	bf06      	itte	eq
 8000c5a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5e:	3201      	addeq	r2, #1
 8000c60:	3b01      	subne	r3, #1
 8000c62:	e7b5      	b.n	8000bd0 <__addsf3+0x58>
 8000c64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c6c:	bf18      	it	ne
 8000c6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c72:	d021      	beq.n	8000cb8 <__addsf3+0x140>
 8000c74:	ea92 0f03 	teq	r2, r3
 8000c78:	d004      	beq.n	8000c84 <__addsf3+0x10c>
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	bf08      	it	eq
 8000c80:	4608      	moveq	r0, r1
 8000c82:	4770      	bx	lr
 8000c84:	ea90 0f01 	teq	r0, r1
 8000c88:	bf1c      	itt	ne
 8000c8a:	2000      	movne	r0, #0
 8000c8c:	4770      	bxne	lr
 8000c8e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c92:	d104      	bne.n	8000c9e <__addsf3+0x126>
 8000c94:	0040      	lsls	r0, r0, #1
 8000c96:	bf28      	it	cs
 8000c98:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c9c:	4770      	bx	lr
 8000c9e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ca2:	bf3c      	itt	cc
 8000ca4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca8:	4770      	bxcc	lr
 8000caa:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cae:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cb2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb6:	4770      	bx	lr
 8000cb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cbc:	bf16      	itet	ne
 8000cbe:	4608      	movne	r0, r1
 8000cc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc4:	4601      	movne	r1, r0
 8000cc6:	0242      	lsls	r2, r0, #9
 8000cc8:	bf06      	itte	eq
 8000cca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cce:	ea90 0f01 	teqeq	r0, r1
 8000cd2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_ui2f>:
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e004      	b.n	8000ce8 <__aeabi_i2f+0x8>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_i2f>:
 8000ce0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce4:	bf48      	it	mi
 8000ce6:	4240      	negmi	r0, r0
 8000ce8:	ea5f 0c00 	movs.w	ip, r0
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf4:	4601      	mov	r1, r0
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	e01c      	b.n	8000d36 <__aeabi_l2f+0x2a>

08000cfc <__aeabi_ul2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e00a      	b.n	8000d20 <__aeabi_l2f+0x14>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_l2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d18:	d502      	bpl.n	8000d20 <__aeabi_l2f+0x14>
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	ea5f 0c01 	movs.w	ip, r1
 8000d24:	bf02      	ittt	eq
 8000d26:	4684      	moveq	ip, r0
 8000d28:	4601      	moveq	r1, r0
 8000d2a:	2000      	moveq	r0, #0
 8000d2c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d30:	bf08      	it	eq
 8000d32:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d3a:	fabc f28c 	clz	r2, ip
 8000d3e:	3a08      	subs	r2, #8
 8000d40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d44:	db10      	blt.n	8000d68 <__aeabi_l2f+0x5c>
 8000d46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d58:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f102 0220 	add.w	r2, r2, #32
 8000d6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d70:	f1c2 0220 	rsb	r2, r2, #32
 8000d74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d78:	fa21 f202 	lsr.w	r2, r1, r2
 8000d7c:	eb43 0002 	adc.w	r0, r3, r2
 8000d80:	bf08      	it	eq
 8000d82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_fmul>:
 8000d88:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d90:	bf1e      	ittt	ne
 8000d92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d96:	ea92 0f0c 	teqne	r2, ip
 8000d9a:	ea93 0f0c 	teqne	r3, ip
 8000d9e:	d06f      	beq.n	8000e80 <__aeabi_fmul+0xf8>
 8000da0:	441a      	add	r2, r3
 8000da2:	ea80 0c01 	eor.w	ip, r0, r1
 8000da6:	0240      	lsls	r0, r0, #9
 8000da8:	bf18      	it	ne
 8000daa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dae:	d01e      	beq.n	8000dee <__aeabi_fmul+0x66>
 8000db0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dc0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc8:	bf3e      	ittt	cc
 8000dca:	0049      	lslcc	r1, r1, #1
 8000dcc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dd0:	005b      	lslcc	r3, r3, #1
 8000dd2:	ea40 0001 	orr.w	r0, r0, r1
 8000dd6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dda:	2afd      	cmp	r2, #253	@ 0xfd
 8000ddc:	d81d      	bhi.n	8000e1a <__aeabi_fmul+0x92>
 8000dde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000de2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de6:	bf08      	it	eq
 8000de8:	f020 0001 	biceq.w	r0, r0, #1
 8000dec:	4770      	bx	lr
 8000dee:	f090 0f00 	teq	r0, #0
 8000df2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df6:	bf08      	it	eq
 8000df8:	0249      	lsleq	r1, r1, #9
 8000dfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e02:	3a7f      	subs	r2, #127	@ 0x7f
 8000e04:	bfc2      	ittt	gt
 8000e06:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0e:	4770      	bxgt	lr
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	3a01      	subs	r2, #1
 8000e1a:	dc5d      	bgt.n	8000ed8 <__aeabi_fmul+0x150>
 8000e1c:	f112 0f19 	cmn.w	r2, #25
 8000e20:	bfdc      	itt	le
 8000e22:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e26:	4770      	bxle	lr
 8000e28:	f1c2 0200 	rsb	r2, r2, #0
 8000e2c:	0041      	lsls	r1, r0, #1
 8000e2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e32:	f1c2 0220 	rsb	r2, r2, #32
 8000e36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3e:	f140 0000 	adc.w	r0, r0, #0
 8000e42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e46:	bf08      	it	eq
 8000e48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4c:	4770      	bx	lr
 8000e4e:	f092 0f00 	teq	r2, #0
 8000e52:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e56:	bf02      	ittt	eq
 8000e58:	0040      	lsleq	r0, r0, #1
 8000e5a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5e:	3a01      	subeq	r2, #1
 8000e60:	d0f9      	beq.n	8000e56 <__aeabi_fmul+0xce>
 8000e62:	ea40 000c 	orr.w	r0, r0, ip
 8000e66:	f093 0f00 	teq	r3, #0
 8000e6a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0049      	lsleq	r1, r1, #1
 8000e72:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e76:	3b01      	subeq	r3, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fmul+0xe6>
 8000e7a:	ea41 010c 	orr.w	r1, r1, ip
 8000e7e:	e78f      	b.n	8000da0 <__aeabi_fmul+0x18>
 8000e80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e84:	ea92 0f0c 	teq	r2, ip
 8000e88:	bf18      	it	ne
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d00a      	beq.n	8000ea6 <__aeabi_fmul+0x11e>
 8000e90:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e94:	bf18      	it	ne
 8000e96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	d1d8      	bne.n	8000e4e <__aeabi_fmul+0xc6>
 8000e9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ea0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea4:	4770      	bx	lr
 8000ea6:	f090 0f00 	teq	r0, #0
 8000eaa:	bf17      	itett	ne
 8000eac:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eb0:	4608      	moveq	r0, r1
 8000eb2:	f091 0f00 	teqne	r1, #0
 8000eb6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eba:	d014      	beq.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ebc:	ea92 0f0c 	teq	r2, ip
 8000ec0:	d101      	bne.n	8000ec6 <__aeabi_fmul+0x13e>
 8000ec2:	0242      	lsls	r2, r0, #9
 8000ec4:	d10f      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ec6:	ea93 0f0c 	teq	r3, ip
 8000eca:	d103      	bne.n	8000ed4 <__aeabi_fmul+0x14c>
 8000ecc:	024b      	lsls	r3, r1, #9
 8000ece:	bf18      	it	ne
 8000ed0:	4608      	movne	r0, r1
 8000ed2:	d108      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ed4:	ea80 0001 	eor.w	r0, r0, r1
 8000ed8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000edc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee4:	4770      	bx	lr
 8000ee6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eea:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eee:	4770      	bx	lr

08000ef0 <__aeabi_fdiv>:
 8000ef0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef8:	bf1e      	ittt	ne
 8000efa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efe:	ea92 0f0c 	teqne	r2, ip
 8000f02:	ea93 0f0c 	teqne	r3, ip
 8000f06:	d069      	beq.n	8000fdc <__aeabi_fdiv+0xec>
 8000f08:	eba2 0203 	sub.w	r2, r2, r3
 8000f0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f10:	0249      	lsls	r1, r1, #9
 8000f12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f16:	d037      	beq.n	8000f88 <__aeabi_fdiv+0x98>
 8000f18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f24:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	bf38      	it	cc
 8000f2c:	005b      	lslcc	r3, r3, #1
 8000f2e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f32:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f36:	428b      	cmp	r3, r1
 8000f38:	bf24      	itt	cs
 8000f3a:	1a5b      	subcs	r3, r3, r1
 8000f3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f52:	bf24      	itt	cs
 8000f54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	bf18      	it	ne
 8000f6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f72:	d1e0      	bne.n	8000f36 <__aeabi_fdiv+0x46>
 8000f74:	2afd      	cmp	r2, #253	@ 0xfd
 8000f76:	f63f af50 	bhi.w	8000e1a <__aeabi_fmul+0x92>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f80:	bf08      	it	eq
 8000f82:	f020 0001 	biceq.w	r0, r0, #1
 8000f86:	4770      	bx	lr
 8000f88:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f90:	327f      	adds	r2, #127	@ 0x7f
 8000f92:	bfc2      	ittt	gt
 8000f94:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f9c:	4770      	bxgt	lr
 8000f9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	3a01      	subs	r2, #1
 8000fa8:	e737      	b.n	8000e1a <__aeabi_fmul+0x92>
 8000faa:	f092 0f00 	teq	r2, #0
 8000fae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fb2:	bf02      	ittt	eq
 8000fb4:	0040      	lsleq	r0, r0, #1
 8000fb6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fba:	3a01      	subeq	r2, #1
 8000fbc:	d0f9      	beq.n	8000fb2 <__aeabi_fdiv+0xc2>
 8000fbe:	ea40 000c 	orr.w	r0, r0, ip
 8000fc2:	f093 0f00 	teq	r3, #0
 8000fc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fca:	bf02      	ittt	eq
 8000fcc:	0049      	lsleq	r1, r1, #1
 8000fce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fd2:	3b01      	subeq	r3, #1
 8000fd4:	d0f9      	beq.n	8000fca <__aeabi_fdiv+0xda>
 8000fd6:	ea41 010c 	orr.w	r1, r1, ip
 8000fda:	e795      	b.n	8000f08 <__aeabi_fdiv+0x18>
 8000fdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fe0:	ea92 0f0c 	teq	r2, ip
 8000fe4:	d108      	bne.n	8000ff8 <__aeabi_fdiv+0x108>
 8000fe6:	0242      	lsls	r2, r0, #9
 8000fe8:	f47f af7d 	bne.w	8000ee6 <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	f47f af70 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e776      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ff8:	ea93 0f0c 	teq	r3, ip
 8000ffc:	d104      	bne.n	8001008 <__aeabi_fdiv+0x118>
 8000ffe:	024b      	lsls	r3, r1, #9
 8001000:	f43f af4c 	beq.w	8000e9c <__aeabi_fmul+0x114>
 8001004:	4608      	mov	r0, r1
 8001006:	e76e      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001008:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800100c:	bf18      	it	ne
 800100e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001012:	d1ca      	bne.n	8000faa <__aeabi_fdiv+0xba>
 8001014:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001018:	f47f af5c 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 800101c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001020:	f47f af3c 	bne.w	8000e9c <__aeabi_fmul+0x114>
 8001024:	e75f      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001026:	bf00      	nop

08001028 <__gesf2>:
 8001028:	f04f 3cff 	mov.w	ip, #4294967295
 800102c:	e006      	b.n	800103c <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__lesf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	e002      	b.n	800103c <__cmpsf2+0x4>
 8001036:	bf00      	nop

08001038 <__cmpsf2>:
 8001038:	f04f 0c01 	mov.w	ip, #1
 800103c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001040:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001044:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	bf18      	it	ne
 800104e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001052:	d011      	beq.n	8001078 <__cmpsf2+0x40>
 8001054:	b001      	add	sp, #4
 8001056:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800105a:	bf18      	it	ne
 800105c:	ea90 0f01 	teqne	r0, r1
 8001060:	bf58      	it	pl
 8001062:	ebb2 0003 	subspl.w	r0, r2, r3
 8001066:	bf88      	it	hi
 8001068:	17c8      	asrhi	r0, r1, #31
 800106a:	bf38      	it	cc
 800106c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001070:	bf18      	it	ne
 8001072:	f040 0001 	orrne.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__cmpsf2+0x4c>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d105      	bne.n	8001090 <__cmpsf2+0x58>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d1e4      	bne.n	8001054 <__cmpsf2+0x1c>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d0e1      	beq.n	8001054 <__cmpsf2+0x1c>
 8001090:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <__aeabi_cfrcmple>:
 8001098:	4684      	mov	ip, r0
 800109a:	4608      	mov	r0, r1
 800109c:	4661      	mov	r1, ip
 800109e:	e7ff      	b.n	80010a0 <__aeabi_cfcmpeq>

080010a0 <__aeabi_cfcmpeq>:
 80010a0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010a2:	f7ff ffc9 	bl	8001038 <__cmpsf2>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	bf48      	it	mi
 80010aa:	f110 0f00 	cmnmi.w	r0, #0
 80010ae:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010b0 <__aeabi_fcmpeq>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff fff4 	bl	80010a0 <__aeabi_cfcmpeq>
 80010b8:	bf0c      	ite	eq
 80010ba:	2001      	moveq	r0, #1
 80010bc:	2000      	movne	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmplt>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffea 	bl	80010a0 <__aeabi_cfcmpeq>
 80010cc:	bf34      	ite	cc
 80010ce:	2001      	movcc	r0, #1
 80010d0:	2000      	movcs	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmple>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffe0 	bl	80010a0 <__aeabi_cfcmpeq>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpge>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffd2 	bl	8001098 <__aeabi_cfrcmple>
 80010f4:	bf94      	ite	ls
 80010f6:	2001      	movls	r0, #1
 80010f8:	2000      	movhi	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmpgt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffc8 	bl	8001098 <__aeabi_cfrcmple>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_fcmpun>:
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	d102      	bne.n	8001128 <__aeabi_fcmpun+0x14>
 8001122:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001126:	d108      	bne.n	800113a <__aeabi_fcmpun+0x26>
 8001128:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800112c:	d102      	bne.n	8001134 <__aeabi_fcmpun+0x20>
 800112e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001132:	d102      	bne.n	800113a <__aeabi_fcmpun+0x26>
 8001134:	f04f 0000 	mov.w	r0, #0
 8001138:	4770      	bx	lr
 800113a:	f04f 0001 	mov.w	r0, #1
 800113e:	4770      	bx	lr

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_ldivmod>:
 800118c:	b97b      	cbnz	r3, 80011ae <__aeabi_ldivmod+0x22>
 800118e:	b972      	cbnz	r2, 80011ae <__aeabi_ldivmod+0x22>
 8001190:	2900      	cmp	r1, #0
 8001192:	bfbe      	ittt	lt
 8001194:	2000      	movlt	r0, #0
 8001196:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800119a:	e006      	blt.n	80011aa <__aeabi_ldivmod+0x1e>
 800119c:	bf08      	it	eq
 800119e:	2800      	cmpeq	r0, #0
 80011a0:	bf1c      	itt	ne
 80011a2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80011a6:	f04f 30ff 	movne.w	r0, #4294967295
 80011aa:	f000 b9d1 	b.w	8001550 <__aeabi_idiv0>
 80011ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b6:	2900      	cmp	r1, #0
 80011b8:	db09      	blt.n	80011ce <__aeabi_ldivmod+0x42>
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db1a      	blt.n	80011f4 <__aeabi_ldivmod+0x68>
 80011be:	f000 f86b 	bl	8001298 <__udivmoddi4>
 80011c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011ca:	b004      	add	sp, #16
 80011cc:	4770      	bx	lr
 80011ce:	4240      	negs	r0, r0
 80011d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db1b      	blt.n	8001210 <__aeabi_ldivmod+0x84>
 80011d8:	f000 f85e 	bl	8001298 <__udivmoddi4>
 80011dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011e4:	b004      	add	sp, #16
 80011e6:	4240      	negs	r0, r0
 80011e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011ec:	4252      	negs	r2, r2
 80011ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011f2:	4770      	bx	lr
 80011f4:	4252      	negs	r2, r2
 80011f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011fa:	f000 f84d 	bl	8001298 <__udivmoddi4>
 80011fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001206:	b004      	add	sp, #16
 8001208:	4240      	negs	r0, r0
 800120a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800120e:	4770      	bx	lr
 8001210:	4252      	negs	r2, r2
 8001212:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001216:	f000 f83f 	bl	8001298 <__udivmoddi4>
 800121a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800121e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001222:	b004      	add	sp, #16
 8001224:	4252      	negs	r2, r2
 8001226:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800122a:	4770      	bx	lr

0800122c <__aeabi_d2lz>:
 800122c:	b538      	push	{r3, r4, r5, lr}
 800122e:	2200      	movs	r2, #0
 8001230:	2300      	movs	r3, #0
 8001232:	4604      	mov	r4, r0
 8001234:	460d      	mov	r5, r1
 8001236:	f7ff fbc3 	bl	80009c0 <__aeabi_dcmplt>
 800123a:	b928      	cbnz	r0, 8001248 <__aeabi_d2lz+0x1c>
 800123c:	4620      	mov	r0, r4
 800123e:	4629      	mov	r1, r5
 8001240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001244:	f000 b80a 	b.w	800125c <__aeabi_d2ulz>
 8001248:	4620      	mov	r0, r4
 800124a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800124e:	f000 f805 	bl	800125c <__aeabi_d2ulz>
 8001252:	4240      	negs	r0, r0
 8001254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001258:	bd38      	pop	{r3, r4, r5, pc}
 800125a:	bf00      	nop

0800125c <__aeabi_d2ulz>:
 800125c:	b5d0      	push	{r4, r6, r7, lr}
 800125e:	2200      	movs	r2, #0
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <__aeabi_d2ulz+0x34>)
 8001262:	4606      	mov	r6, r0
 8001264:	460f      	mov	r7, r1
 8001266:	f7ff f939 	bl	80004dc <__aeabi_dmul>
 800126a:	f7ff fc0f 	bl	8000a8c <__aeabi_d2uiz>
 800126e:	4604      	mov	r4, r0
 8001270:	f7ff f8ba 	bl	80003e8 <__aeabi_ui2d>
 8001274:	2200      	movs	r2, #0
 8001276:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <__aeabi_d2ulz+0x38>)
 8001278:	f7ff f930 	bl	80004dc <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4630      	mov	r0, r6
 8001282:	4639      	mov	r1, r7
 8001284:	f7fe ff72 	bl	800016c <__aeabi_dsub>
 8001288:	f7ff fc00 	bl	8000a8c <__aeabi_d2uiz>
 800128c:	4621      	mov	r1, r4
 800128e:	bdd0      	pop	{r4, r6, r7, pc}
 8001290:	3df00000 	.word	0x3df00000
 8001294:	41f00000 	.word	0x41f00000

08001298 <__udivmoddi4>:
 8001298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800129c:	9d08      	ldr	r5, [sp, #32]
 800129e:	460c      	mov	r4, r1
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d14e      	bne.n	8001342 <__udivmoddi4+0xaa>
 80012a4:	4694      	mov	ip, r2
 80012a6:	458c      	cmp	ip, r1
 80012a8:	4686      	mov	lr, r0
 80012aa:	fab2 f282 	clz	r2, r2
 80012ae:	d962      	bls.n	8001376 <__udivmoddi4+0xde>
 80012b0:	b14a      	cbz	r2, 80012c6 <__udivmoddi4+0x2e>
 80012b2:	f1c2 0320 	rsb	r3, r2, #32
 80012b6:	4091      	lsls	r1, r2
 80012b8:	fa20 f303 	lsr.w	r3, r0, r3
 80012bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80012c0:	4319      	orrs	r1, r3
 80012c2:	fa00 fe02 	lsl.w	lr, r0, r2
 80012c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012ca:	fbb1 f4f7 	udiv	r4, r1, r7
 80012ce:	fb07 1114 	mls	r1, r7, r4, r1
 80012d2:	fa1f f68c 	uxth.w	r6, ip
 80012d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012de:	fb04 f106 	mul.w	r1, r4, r6
 80012e2:	4299      	cmp	r1, r3
 80012e4:	d90a      	bls.n	80012fc <__udivmoddi4+0x64>
 80012e6:	eb1c 0303 	adds.w	r3, ip, r3
 80012ea:	f104 30ff 	add.w	r0, r4, #4294967295
 80012ee:	f080 8110 	bcs.w	8001512 <__udivmoddi4+0x27a>
 80012f2:	4299      	cmp	r1, r3
 80012f4:	f240 810d 	bls.w	8001512 <__udivmoddi4+0x27a>
 80012f8:	3c02      	subs	r4, #2
 80012fa:	4463      	add	r3, ip
 80012fc:	1a59      	subs	r1, r3, r1
 80012fe:	fbb1 f0f7 	udiv	r0, r1, r7
 8001302:	fb07 1110 	mls	r1, r7, r0, r1
 8001306:	fb00 f606 	mul.w	r6, r0, r6
 800130a:	fa1f f38e 	uxth.w	r3, lr
 800130e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001312:	429e      	cmp	r6, r3
 8001314:	d90a      	bls.n	800132c <__udivmoddi4+0x94>
 8001316:	eb1c 0303 	adds.w	r3, ip, r3
 800131a:	f100 31ff 	add.w	r1, r0, #4294967295
 800131e:	f080 80fa 	bcs.w	8001516 <__udivmoddi4+0x27e>
 8001322:	429e      	cmp	r6, r3
 8001324:	f240 80f7 	bls.w	8001516 <__udivmoddi4+0x27e>
 8001328:	4463      	add	r3, ip
 800132a:	3802      	subs	r0, #2
 800132c:	2100      	movs	r1, #0
 800132e:	1b9b      	subs	r3, r3, r6
 8001330:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001334:	b11d      	cbz	r5, 800133e <__udivmoddi4+0xa6>
 8001336:	40d3      	lsrs	r3, r2
 8001338:	2200      	movs	r2, #0
 800133a:	e9c5 3200 	strd	r3, r2, [r5]
 800133e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001342:	428b      	cmp	r3, r1
 8001344:	d905      	bls.n	8001352 <__udivmoddi4+0xba>
 8001346:	b10d      	cbz	r5, 800134c <__udivmoddi4+0xb4>
 8001348:	e9c5 0100 	strd	r0, r1, [r5]
 800134c:	2100      	movs	r1, #0
 800134e:	4608      	mov	r0, r1
 8001350:	e7f5      	b.n	800133e <__udivmoddi4+0xa6>
 8001352:	fab3 f183 	clz	r1, r3
 8001356:	2900      	cmp	r1, #0
 8001358:	d146      	bne.n	80013e8 <__udivmoddi4+0x150>
 800135a:	42a3      	cmp	r3, r4
 800135c:	d302      	bcc.n	8001364 <__udivmoddi4+0xcc>
 800135e:	4290      	cmp	r0, r2
 8001360:	f0c0 80ee 	bcc.w	8001540 <__udivmoddi4+0x2a8>
 8001364:	1a86      	subs	r6, r0, r2
 8001366:	eb64 0303 	sbc.w	r3, r4, r3
 800136a:	2001      	movs	r0, #1
 800136c:	2d00      	cmp	r5, #0
 800136e:	d0e6      	beq.n	800133e <__udivmoddi4+0xa6>
 8001370:	e9c5 6300 	strd	r6, r3, [r5]
 8001374:	e7e3      	b.n	800133e <__udivmoddi4+0xa6>
 8001376:	2a00      	cmp	r2, #0
 8001378:	f040 808f 	bne.w	800149a <__udivmoddi4+0x202>
 800137c:	eba1 040c 	sub.w	r4, r1, ip
 8001380:	2101      	movs	r1, #1
 8001382:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001386:	fa1f f78c 	uxth.w	r7, ip
 800138a:	fbb4 f6f8 	udiv	r6, r4, r8
 800138e:	fb08 4416 	mls	r4, r8, r6, r4
 8001392:	fb07 f006 	mul.w	r0, r7, r6
 8001396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800139a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800139e:	4298      	cmp	r0, r3
 80013a0:	d908      	bls.n	80013b4 <__udivmoddi4+0x11c>
 80013a2:	eb1c 0303 	adds.w	r3, ip, r3
 80013a6:	f106 34ff 	add.w	r4, r6, #4294967295
 80013aa:	d202      	bcs.n	80013b2 <__udivmoddi4+0x11a>
 80013ac:	4298      	cmp	r0, r3
 80013ae:	f200 80cb 	bhi.w	8001548 <__udivmoddi4+0x2b0>
 80013b2:	4626      	mov	r6, r4
 80013b4:	1a1c      	subs	r4, r3, r0
 80013b6:	fbb4 f0f8 	udiv	r0, r4, r8
 80013ba:	fb08 4410 	mls	r4, r8, r0, r4
 80013be:	fb00 f707 	mul.w	r7, r0, r7
 80013c2:	fa1f f38e 	uxth.w	r3, lr
 80013c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80013ca:	429f      	cmp	r7, r3
 80013cc:	d908      	bls.n	80013e0 <__udivmoddi4+0x148>
 80013ce:	eb1c 0303 	adds.w	r3, ip, r3
 80013d2:	f100 34ff 	add.w	r4, r0, #4294967295
 80013d6:	d202      	bcs.n	80013de <__udivmoddi4+0x146>
 80013d8:	429f      	cmp	r7, r3
 80013da:	f200 80ae 	bhi.w	800153a <__udivmoddi4+0x2a2>
 80013de:	4620      	mov	r0, r4
 80013e0:	1bdb      	subs	r3, r3, r7
 80013e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80013e6:	e7a5      	b.n	8001334 <__udivmoddi4+0x9c>
 80013e8:	f1c1 0720 	rsb	r7, r1, #32
 80013ec:	408b      	lsls	r3, r1
 80013ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80013f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80013f6:	fa24 f607 	lsr.w	r6, r4, r7
 80013fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013fe:	fbb6 f8f9 	udiv	r8, r6, r9
 8001402:	fa1f fe8c 	uxth.w	lr, ip
 8001406:	fb09 6618 	mls	r6, r9, r8, r6
 800140a:	fa20 f307 	lsr.w	r3, r0, r7
 800140e:	408c      	lsls	r4, r1
 8001410:	fa00 fa01 	lsl.w	sl, r0, r1
 8001414:	fb08 f00e 	mul.w	r0, r8, lr
 8001418:	431c      	orrs	r4, r3
 800141a:	0c23      	lsrs	r3, r4, #16
 800141c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001420:	4298      	cmp	r0, r3
 8001422:	fa02 f201 	lsl.w	r2, r2, r1
 8001426:	d90a      	bls.n	800143e <__udivmoddi4+0x1a6>
 8001428:	eb1c 0303 	adds.w	r3, ip, r3
 800142c:	f108 36ff 	add.w	r6, r8, #4294967295
 8001430:	f080 8081 	bcs.w	8001536 <__udivmoddi4+0x29e>
 8001434:	4298      	cmp	r0, r3
 8001436:	d97e      	bls.n	8001536 <__udivmoddi4+0x29e>
 8001438:	f1a8 0802 	sub.w	r8, r8, #2
 800143c:	4463      	add	r3, ip
 800143e:	1a1e      	subs	r6, r3, r0
 8001440:	fbb6 f3f9 	udiv	r3, r6, r9
 8001444:	fb09 6613 	mls	r6, r9, r3, r6
 8001448:	fb03 fe0e 	mul.w	lr, r3, lr
 800144c:	b2a4      	uxth	r4, r4
 800144e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001452:	45a6      	cmp	lr, r4
 8001454:	d908      	bls.n	8001468 <__udivmoddi4+0x1d0>
 8001456:	eb1c 0404 	adds.w	r4, ip, r4
 800145a:	f103 30ff 	add.w	r0, r3, #4294967295
 800145e:	d266      	bcs.n	800152e <__udivmoddi4+0x296>
 8001460:	45a6      	cmp	lr, r4
 8001462:	d964      	bls.n	800152e <__udivmoddi4+0x296>
 8001464:	3b02      	subs	r3, #2
 8001466:	4464      	add	r4, ip
 8001468:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800146c:	fba0 8302 	umull	r8, r3, r0, r2
 8001470:	eba4 040e 	sub.w	r4, r4, lr
 8001474:	429c      	cmp	r4, r3
 8001476:	46c6      	mov	lr, r8
 8001478:	461e      	mov	r6, r3
 800147a:	d350      	bcc.n	800151e <__udivmoddi4+0x286>
 800147c:	d04d      	beq.n	800151a <__udivmoddi4+0x282>
 800147e:	b155      	cbz	r5, 8001496 <__udivmoddi4+0x1fe>
 8001480:	ebba 030e 	subs.w	r3, sl, lr
 8001484:	eb64 0406 	sbc.w	r4, r4, r6
 8001488:	fa04 f707 	lsl.w	r7, r4, r7
 800148c:	40cb      	lsrs	r3, r1
 800148e:	431f      	orrs	r7, r3
 8001490:	40cc      	lsrs	r4, r1
 8001492:	e9c5 7400 	strd	r7, r4, [r5]
 8001496:	2100      	movs	r1, #0
 8001498:	e751      	b.n	800133e <__udivmoddi4+0xa6>
 800149a:	fa0c fc02 	lsl.w	ip, ip, r2
 800149e:	f1c2 0320 	rsb	r3, r2, #32
 80014a2:	40d9      	lsrs	r1, r3
 80014a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80014a8:	fa20 f303 	lsr.w	r3, r0, r3
 80014ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80014b0:	fbb1 f0f8 	udiv	r0, r1, r8
 80014b4:	fb08 1110 	mls	r1, r8, r0, r1
 80014b8:	4094      	lsls	r4, r2
 80014ba:	431c      	orrs	r4, r3
 80014bc:	fa1f f78c 	uxth.w	r7, ip
 80014c0:	0c23      	lsrs	r3, r4, #16
 80014c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80014c6:	fb00 f107 	mul.w	r1, r0, r7
 80014ca:	4299      	cmp	r1, r3
 80014cc:	d908      	bls.n	80014e0 <__udivmoddi4+0x248>
 80014ce:	eb1c 0303 	adds.w	r3, ip, r3
 80014d2:	f100 36ff 	add.w	r6, r0, #4294967295
 80014d6:	d22c      	bcs.n	8001532 <__udivmoddi4+0x29a>
 80014d8:	4299      	cmp	r1, r3
 80014da:	d92a      	bls.n	8001532 <__udivmoddi4+0x29a>
 80014dc:	3802      	subs	r0, #2
 80014de:	4463      	add	r3, ip
 80014e0:	1a5b      	subs	r3, r3, r1
 80014e2:	fbb3 f1f8 	udiv	r1, r3, r8
 80014e6:	fb08 3311 	mls	r3, r8, r1, r3
 80014ea:	b2a4      	uxth	r4, r4
 80014ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80014f0:	fb01 f307 	mul.w	r3, r1, r7
 80014f4:	42a3      	cmp	r3, r4
 80014f6:	d908      	bls.n	800150a <__udivmoddi4+0x272>
 80014f8:	eb1c 0404 	adds.w	r4, ip, r4
 80014fc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001500:	d213      	bcs.n	800152a <__udivmoddi4+0x292>
 8001502:	42a3      	cmp	r3, r4
 8001504:	d911      	bls.n	800152a <__udivmoddi4+0x292>
 8001506:	3902      	subs	r1, #2
 8001508:	4464      	add	r4, ip
 800150a:	1ae4      	subs	r4, r4, r3
 800150c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001510:	e73b      	b.n	800138a <__udivmoddi4+0xf2>
 8001512:	4604      	mov	r4, r0
 8001514:	e6f2      	b.n	80012fc <__udivmoddi4+0x64>
 8001516:	4608      	mov	r0, r1
 8001518:	e708      	b.n	800132c <__udivmoddi4+0x94>
 800151a:	45c2      	cmp	sl, r8
 800151c:	d2af      	bcs.n	800147e <__udivmoddi4+0x1e6>
 800151e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001522:	eb63 060c 	sbc.w	r6, r3, ip
 8001526:	3801      	subs	r0, #1
 8001528:	e7a9      	b.n	800147e <__udivmoddi4+0x1e6>
 800152a:	4631      	mov	r1, r6
 800152c:	e7ed      	b.n	800150a <__udivmoddi4+0x272>
 800152e:	4603      	mov	r3, r0
 8001530:	e79a      	b.n	8001468 <__udivmoddi4+0x1d0>
 8001532:	4630      	mov	r0, r6
 8001534:	e7d4      	b.n	80014e0 <__udivmoddi4+0x248>
 8001536:	46b0      	mov	r8, r6
 8001538:	e781      	b.n	800143e <__udivmoddi4+0x1a6>
 800153a:	4463      	add	r3, ip
 800153c:	3802      	subs	r0, #2
 800153e:	e74f      	b.n	80013e0 <__udivmoddi4+0x148>
 8001540:	4606      	mov	r6, r0
 8001542:	4623      	mov	r3, r4
 8001544:	4608      	mov	r0, r1
 8001546:	e711      	b.n	800136c <__udivmoddi4+0xd4>
 8001548:	3e02      	subs	r6, #2
 800154a:	4463      	add	r3, ip
 800154c:	e732      	b.n	80013b4 <__udivmoddi4+0x11c>
 800154e:	bf00      	nop

08001550 <__aeabi_idiv0>:
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop

08001554 <BMP280_Init>:
#define CONFIG_REG          0xF5
#define PRESSURE_DATA_REG   0xF7
#define BMP280_ADDRESS 0x76 << 1
I2C_HandleTypeDef* hi2c;
BMP280_CalibData *calibData;
HAL_StatusTypeDef BMP280_Init(I2C_HandleTypeDef *handlehi2c) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af02      	add	r7, sp, #8
 800155a:	6078      	str	r0, [r7, #4]
	hi2c=handlehi2c;
 800155c:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <BMP280_Init+0x70>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
    HAL_StatusTypeDef ret;
    uint8_t data[2];
    data[0] = 0xF4;
 8001562:	23f4      	movs	r3, #244	@ 0xf4
 8001564:	733b      	strb	r3, [r7, #12]
    data[1] = 0x27;
 8001566:	2327      	movs	r3, #39	@ 0x27
 8001568:	737b      	strb	r3, [r7, #13]
    ret = HAL_I2C_Master_Transmit(hi2c, BMP280_ADDRESS, data, 2, HAL_MAX_DELAY);
 800156a:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <BMP280_Init+0x70>)
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	f107 020c 	add.w	r2, r7, #12
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2302      	movs	r3, #2
 800157a:	21ec      	movs	r1, #236	@ 0xec
 800157c:	f003 f904 	bl	8004788 <HAL_I2C_Master_Transmit>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) return ret;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <BMP280_Init+0x3a>
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	e016      	b.n	80015bc <BMP280_Init+0x68>
    data[0] = 0xF5;
 800158e:	23f5      	movs	r3, #245	@ 0xf5
 8001590:	733b      	strb	r3, [r7, #12]
    data[1] = 0xA0;
 8001592:	23a0      	movs	r3, #160	@ 0xa0
 8001594:	737b      	strb	r3, [r7, #13]
    ret = HAL_I2C_Master_Transmit(hi2c, BMP280_ADDRESS, data, 2, HAL_MAX_DELAY);
 8001596:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <BMP280_Init+0x70>)
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	f107 020c 	add.w	r2, r7, #12
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2302      	movs	r3, #2
 80015a6:	21ec      	movs	r1, #236	@ 0xec
 80015a8:	f003 f8ee 	bl	8004788 <HAL_I2C_Master_Transmit>
 80015ac:	4603      	mov	r3, r0
 80015ae:	73fb      	strb	r3, [r7, #15]
    BMP280_SetUltraHighRes(hi2c);
 80015b0:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <BMP280_Init+0x70>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 f845 	bl	8001644 <BMP280_SetUltraHighRes>
    return ret;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	2000023c 	.word	0x2000023c

080015c8 <CalculateAltitude>:


float CalculateAltitude(float pressure) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
    return (1.0 - pow(pressure / SEA_LEVEL_PRESSURE, 0.190284)) * 4433000.0;
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7fe ff2b 	bl	800042c <__aeabi_f2d>
 80015d6:	a314      	add	r3, pc, #80	@ (adr r3, 8001628 <CalculateAltitude+0x60>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f7ff f8a8 	bl	8000730 <__aeabi_ddiv>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	a311      	add	r3, pc, #68	@ (adr r3, 8001630 <CalculateAltitude+0x68>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f009 fb43 	bl	800ac78 <pow>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	f04f 0000 	mov.w	r0, #0
 80015fa:	4911      	ldr	r1, [pc, #68]	@ (8001640 <CalculateAltitude+0x78>)
 80015fc:	f7fe fdb6 	bl	800016c <__aeabi_dsub>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	a30b      	add	r3, pc, #44	@ (adr r3, 8001638 <CalculateAltitude+0x70>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe ff65 	bl	80004dc <__aeabi_dmul>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fa57 	bl	8000acc <__aeabi_d2f>
 800161e:	4603      	mov	r3, r0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	00000000 	.word	0x00000000
 800162c:	40f8bcd0 	.word	0x40f8bcd0
 8001630:	e279dd3c 	.word	0xe279dd3c
 8001634:	3fc85b39 	.word	0x3fc85b39
 8001638:	00000000 	.word	0x00000000
 800163c:	4150e91a 	.word	0x4150e91a
 8001640:	3ff00000 	.word	0x3ff00000

08001644 <BMP280_SetUltraHighRes>:

HAL_StatusTypeDef BMP280_SetUltraHighRes(I2C_HandleTypeDef *hi2c) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af02      	add	r7, sp, #8
 800164a:	6078      	str	r0, [r7, #4]
    uint8_t data[2];

    data[0] = CTRL_MEAS_REG;
 800164c:	23f4      	movs	r3, #244	@ 0xf4
 800164e:	733b      	strb	r3, [r7, #12]
    data[1] = 0xFF;
 8001650:	23ff      	movs	r3, #255	@ 0xff
 8001652:	737b      	strb	r3, [r7, #13]
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, BMP280_ADDRESS << 1, data, 2, HAL_MAX_DELAY);
 8001654:	f107 020c 	add.w	r2, r7, #12
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2302      	movs	r3, #2
 8001660:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f003 f88f 	bl	8004788 <HAL_I2C_Master_Transmit>
 800166a:	4603      	mov	r3, r0
 800166c:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) return ret;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <BMP280_SetUltraHighRes+0x34>
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	e011      	b.n	800169c <BMP280_SetUltraHighRes+0x58>
    data[0] = CONFIG_REG;
 8001678:	23f5      	movs	r3, #245	@ 0xf5
 800167a:	733b      	strb	r3, [r7, #12]
    data[1] = 0xB0;
 800167c:	23b0      	movs	r3, #176	@ 0xb0
 800167e:	737b      	strb	r3, [r7, #13]
    ret = HAL_I2C_Master_Transmit(hi2c, BMP280_ADDRESS << 1, data, 2, HAL_MAX_DELAY);
 8001680:	f107 020c 	add.w	r2, r7, #12
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2302      	movs	r3, #2
 800168c:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f003 f879 	bl	8004788 <HAL_I2C_Master_Transmit>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]

    return ret;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <BMP280_ReadCalibrationData>:
HAL_StatusTypeDef BMP280_ReadCalibrationData(I2C_HandleTypeDef *hi2c, BMP280_CalibData *handlecalibData) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08e      	sub	sp, #56	@ 0x38
 80016a8:	af04      	add	r7, sp, #16
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
	calibData=handlecalibData;
 80016ae:	4a4f      	ldr	r2, [pc, #316]	@ (80017ec <BMP280_ReadCalibrationData+0x148>)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	6013      	str	r3, [r2, #0]
    uint8_t calib[24];
    HAL_StatusTypeDef ret;

    ret = HAL_I2C_Mem_Read(hi2c, BMP280_ADDRESS, 0x88, I2C_MEMADD_SIZE_8BIT, calib, 24, HAL_MAX_DELAY);
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
 80016b8:	9302      	str	r3, [sp, #8]
 80016ba:	2318      	movs	r3, #24
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2301      	movs	r3, #1
 80016c6:	2288      	movs	r2, #136	@ 0x88
 80016c8:	21ec      	movs	r1, #236	@ 0xec
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f003 fa54 	bl	8004b78 <HAL_I2C_Mem_Read>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ret != HAL_OK) return ret;
 80016d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <BMP280_ReadCalibrationData+0x40>
 80016de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016e2:	e07e      	b.n	80017e2 <BMP280_ReadCalibrationData+0x13e>

    calibData->dig_T1 = (calib[1] << 8) | calib[0];
 80016e4:	7b7b      	ldrb	r3, [r7, #13]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	7b3b      	ldrb	r3, [r7, #12]
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b3e      	ldr	r3, [pc, #248]	@ (80017ec <BMP280_ReadCalibrationData+0x148>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b292      	uxth	r2, r2
 80016f8:	801a      	strh	r2, [r3, #0]
    calibData->dig_T2 = (calib[3] << 8) | calib[2];
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b219      	sxth	r1, r3
 8001700:	7bbb      	ldrb	r3, [r7, #14]
 8001702:	b21a      	sxth	r2, r3
 8001704:	4b39      	ldr	r3, [pc, #228]	@ (80017ec <BMP280_ReadCalibrationData+0x148>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	b212      	sxth	r2, r2
 800170c:	805a      	strh	r2, [r3, #2]
    calibData->dig_T3 = (calib[5] << 8) | calib[4];
 800170e:	7c7b      	ldrb	r3, [r7, #17]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b219      	sxth	r1, r3
 8001714:	7c3b      	ldrb	r3, [r7, #16]
 8001716:	b21a      	sxth	r2, r3
 8001718:	4b34      	ldr	r3, [pc, #208]	@ (80017ec <BMP280_ReadCalibrationData+0x148>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	b212      	sxth	r2, r2
 8001720:	809a      	strh	r2, [r3, #4]
    calibData->dig_P1 = (calib[7] << 8) | calib[6];
 8001722:	7cfb      	ldrb	r3, [r7, #19]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	b21a      	sxth	r2, r3
 8001728:	7cbb      	ldrb	r3, [r7, #18]
 800172a:	b21b      	sxth	r3, r3
 800172c:	4313      	orrs	r3, r2
 800172e:	b21a      	sxth	r2, r3
 8001730:	4b2e      	ldr	r3, [pc, #184]	@ (80017ec <BMP280_ReadCalibrationData+0x148>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b292      	uxth	r2, r2
 8001736:	80da      	strh	r2, [r3, #6]
    calibData->dig_P2 = (calib[9] << 8) | calib[8];
 8001738:	7d7b      	ldrb	r3, [r7, #21]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	b219      	sxth	r1, r3
 800173e:	7d3b      	ldrb	r3, [r7, #20]
 8001740:	b21a      	sxth	r2, r3
 8001742:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <BMP280_ReadCalibrationData+0x148>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	b212      	sxth	r2, r2
 800174a:	811a      	strh	r2, [r3, #8]
    calibData->dig_P3 = (calib[11] << 8) | calib[10];
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	b219      	sxth	r1, r3
 8001752:	7dbb      	ldrb	r3, [r7, #22]
 8001754:	b21a      	sxth	r2, r3
 8001756:	4b25      	ldr	r3, [pc, #148]	@ (80017ec <BMP280_ReadCalibrationData+0x148>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	b212      	sxth	r2, r2
 800175e:	815a      	strh	r2, [r3, #10]
    calibData->dig_P4 = (calib[13] << 8) | calib[12];
 8001760:	7e7b      	ldrb	r3, [r7, #25]
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	b219      	sxth	r1, r3
 8001766:	7e3b      	ldrb	r3, [r7, #24]
 8001768:	b21a      	sxth	r2, r3
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <BMP280_ReadCalibrationData+0x148>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	b212      	sxth	r2, r2
 8001772:	819a      	strh	r2, [r3, #12]
    calibData->dig_P5 = (calib[15] << 8) | calib[14];
 8001774:	7efb      	ldrb	r3, [r7, #27]
 8001776:	021b      	lsls	r3, r3, #8
 8001778:	b219      	sxth	r1, r3
 800177a:	7ebb      	ldrb	r3, [r7, #26]
 800177c:	b21a      	sxth	r2, r3
 800177e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <BMP280_ReadCalibrationData+0x148>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	b212      	sxth	r2, r2
 8001786:	81da      	strh	r2, [r3, #14]
    calibData->dig_P6 = (calib[17] << 8) | calib[16];
 8001788:	7f7b      	ldrb	r3, [r7, #29]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	b219      	sxth	r1, r3
 800178e:	7f3b      	ldrb	r3, [r7, #28]
 8001790:	b21a      	sxth	r2, r3
 8001792:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <BMP280_ReadCalibrationData+0x148>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	b212      	sxth	r2, r2
 800179a:	821a      	strh	r2, [r3, #16]
    calibData->dig_P7 = (calib[19] << 8) | calib[18];
 800179c:	7ffb      	ldrb	r3, [r7, #31]
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	b219      	sxth	r1, r3
 80017a2:	7fbb      	ldrb	r3, [r7, #30]
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <BMP280_ReadCalibrationData+0x148>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	b212      	sxth	r2, r2
 80017ae:	825a      	strh	r2, [r3, #18]
    calibData->dig_P8 = (calib[21] << 8) | calib[20];
 80017b0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b219      	sxth	r1, r3
 80017b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017bc:	b21a      	sxth	r2, r3
 80017be:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <BMP280_ReadCalibrationData+0x148>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	b212      	sxth	r2, r2
 80017c6:	829a      	strh	r2, [r3, #20]
    calibData->dig_P9 = (calib[23] << 8) | calib[22];
 80017c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	b219      	sxth	r1, r3
 80017d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <BMP280_ReadCalibrationData+0x148>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	b212      	sxth	r2, r2
 80017de:	82da      	strh	r2, [r3, #22]

    return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3728      	adds	r7, #40	@ 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000240 	.word	0x20000240

080017f0 <ReadPressureAndCalculateAltitude>:

HAL_StatusTypeDef ReadPressureAndCalculateAltitude(float *altitude) {
 80017f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017f4:	b0d4      	sub	sp, #336	@ 0x150
 80017f6:	af04      	add	r7, sp, #16
 80017f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    uint8_t rawData[6];
    HAL_StatusTypeDef ret;
    int32_t rawPressure, rawTemp;
    int32_t t_fine;
    ret = HAL_I2C_Mem_Read(hi2c, BMP280_ADDRESS, PRESSURE_DATA_REG, I2C_MEMADD_SIZE_8BIT, rawData, 6, HAL_MAX_DELAY);
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <ReadPressureAndCalculateAltitude+0x40>)
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
 8001804:	9302      	str	r3, [sp, #8]
 8001806:	2306      	movs	r3, #6
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2301      	movs	r3, #1
 8001812:	22f7      	movs	r2, #247	@ 0xf7
 8001814:	21ec      	movs	r1, #236	@ 0xec
 8001816:	f003 f9af 	bl	8004b78 <HAL_I2C_Mem_Read>
 800181a:	4603      	mov	r3, r0
 800181c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
    if (ret != HAL_OK) return ret;
 8001820:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <ReadPressureAndCalculateAltitude+0x44>
 8001828:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800182c:	e2f1      	b.n	8001e12 <ReadPressureAndCalculateAltitude+0x622>
 800182e:	bf00      	nop
 8001830:	2000023c 	.word	0x2000023c
    rawPressure = (int32_t)((rawData[0] << 12) | (rawData[1] << 4) | (rawData[2] >> 4));
 8001834:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 8001838:	031a      	lsls	r2, r3, #12
 800183a:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	431a      	orrs	r2, r3
 8001842:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4313      	orrs	r3, r2
 800184c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    rawTemp = (int32_t)((rawData[3] << 12) | (rawData[4] << 4) | (rawData[5] >> 4));
 8001850:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8001854:	031a      	lsls	r2, r3, #12
 8001856:	f897 3104 	ldrb.w	r3, [r7, #260]	@ 0x104
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	431a      	orrs	r2, r3
 800185e:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 8001862:	091b      	lsrs	r3, r3, #4
 8001864:	b2db      	uxtb	r3, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    int32_t var1 = ((((rawTemp >> 3) - ((int32_t)calibData->dig_T1 << 1))) * ((int32_t)calibData->dig_T2)) >> 11;
 800186c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001870:	10da      	asrs	r2, r3, #3
 8001872:	4bc2      	ldr	r3, [pc, #776]	@ (8001b7c <ReadPressureAndCalculateAltitude+0x38c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	1ad2      	subs	r2, r2, r3
 800187c:	4bbf      	ldr	r3, [pc, #764]	@ (8001b7c <ReadPressureAndCalculateAltitude+0x38c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001884:	fb02 f303 	mul.w	r3, r2, r3
 8001888:	12db      	asrs	r3, r3, #11
 800188a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    int32_t var2 = (((((rawTemp >> 4) - ((int32_t)calibData->dig_T1)) * ((rawTemp >> 4) - ((int32_t)calibData->dig_T1))) >> 12) * ((int32_t)calibData->dig_T3)) >> 14;
 800188e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001892:	111a      	asrs	r2, r3, #4
 8001894:	4bb9      	ldr	r3, [pc, #740]	@ (8001b7c <ReadPressureAndCalculateAltitude+0x38c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	1ad1      	subs	r1, r2, r3
 800189c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80018a0:	111a      	asrs	r2, r3, #4
 80018a2:	4bb6      	ldr	r3, [pc, #728]	@ (8001b7c <ReadPressureAndCalculateAltitude+0x38c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	fb01 f303 	mul.w	r3, r1, r3
 80018ae:	131a      	asrs	r2, r3, #12
 80018b0:	4bb2      	ldr	r3, [pc, #712]	@ (8001b7c <ReadPressureAndCalculateAltitude+0x38c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018b8:	fb02 f303 	mul.w	r3, r2, r3
 80018bc:	139b      	asrs	r3, r3, #14
 80018be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    t_fine = var1 + var2;
 80018c2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80018c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018ca:	4413      	add	r3, r2
 80018cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    int64_t var1p = ((int64_t)t_fine) - 128000;
 80018d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018d4:	17da      	asrs	r2, r3, #31
 80018d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80018da:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80018de:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 80018e2:	4611      	mov	r1, r2
 80018e4:	f5b1 31fa 	subs.w	r1, r1, #128000	@ 0x1f400
 80018e8:	6439      	str	r1, [r7, #64]	@ 0x40
 80018ea:	f143 33ff 	adc.w	r3, r3, #4294967295
 80018ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80018f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80018f4:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    int64_t var2p = var1p * var1p * (int64_t)calibData->dig_P6;
 80018f8:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80018fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001900:	fb03 f102 	mul.w	r1, r3, r2
 8001904:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001908:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	18ca      	adds	r2, r1, r3
 8001912:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001916:	fba3 4503 	umull	r4, r5, r3, r3
 800191a:	1953      	adds	r3, r2, r5
 800191c:	461d      	mov	r5, r3
 800191e:	4b97      	ldr	r3, [pc, #604]	@ (8001b7c <ReadPressureAndCalculateAltitude+0x38c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001926:	b21b      	sxth	r3, r3
 8001928:	17da      	asrs	r2, r3, #31
 800192a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800192e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001932:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001936:	4603      	mov	r3, r0
 8001938:	fb03 f205 	mul.w	r2, r3, r5
 800193c:	460b      	mov	r3, r1
 800193e:	fb04 f303 	mul.w	r3, r4, r3
 8001942:	4413      	add	r3, r2
 8001944:	4602      	mov	r2, r0
 8001946:	fba4 2102 	umull	r2, r1, r4, r2
 800194a:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 800194e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001956:	4413      	add	r3, r2
 8001958:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800195c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001960:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001964:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2p = var2p + ((var1p * (int64_t)calibData->dig_P5) << 17);
 8001968:	4b84      	ldr	r3, [pc, #528]	@ (8001b7c <ReadPressureAndCalculateAltitude+0x38c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001970:	b21b      	sxth	r3, r3
 8001972:	17da      	asrs	r2, r3, #31
 8001974:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001978:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800197c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001980:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8001984:	462a      	mov	r2, r5
 8001986:	fb02 f203 	mul.w	r2, r2, r3
 800198a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800198e:	4621      	mov	r1, r4
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	441a      	add	r2, r3
 8001996:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800199a:	4621      	mov	r1, r4
 800199c:	fba3 8901 	umull	r8, r9, r3, r1
 80019a0:	eb02 0309 	add.w	r3, r2, r9
 80019a4:	4699      	mov	r9, r3
 80019a6:	f04f 0000 	mov.w	r0, #0
 80019aa:	f04f 0100 	mov.w	r1, #0
 80019ae:	ea4f 4149 	mov.w	r1, r9, lsl #17
 80019b2:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 80019b6:	ea4f 4048 	mov.w	r0, r8, lsl #17
 80019ba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80019be:	1814      	adds	r4, r2, r0
 80019c0:	63bc      	str	r4, [r7, #56]	@ 0x38
 80019c2:	414b      	adcs	r3, r1
 80019c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019c6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80019ca:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2p = var2p + (((int64_t)calibData->dig_P4) << 35);
 80019ce:	4b6b      	ldr	r3, [pc, #428]	@ (8001b7c <ReadPressureAndCalculateAltitude+0x38c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	17da      	asrs	r2, r3, #31
 80019da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80019de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80019e2:	f04f 0000 	mov.w	r0, #0
 80019e6:	f04f 0100 	mov.w	r1, #0
 80019ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019ee:	00d9      	lsls	r1, r3, #3
 80019f0:	2000      	movs	r0, #0
 80019f2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80019f6:	1814      	adds	r4, r2, r0
 80019f8:	633c      	str	r4, [r7, #48]	@ 0x30
 80019fa:	414b      	adcs	r3, r1
 80019fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80019fe:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001a02:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1p = ((var1p * var1p * (int64_t)calibData->dig_P3) >> 8) + ((var1p * (int64_t)calibData->dig_P2) << 12);
 8001a06:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001a0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a0e:	fb03 f102 	mul.w	r1, r3, r2
 8001a12:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001a16:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a1a:	fb02 f303 	mul.w	r3, r2, r3
 8001a1e:	18ca      	adds	r2, r1, r3
 8001a20:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a24:	fba3 ab03 	umull	sl, fp, r3, r3
 8001a28:	eb02 030b 	add.w	r3, r2, fp
 8001a2c:	469b      	mov	fp, r3
 8001a2e:	4b53      	ldr	r3, [pc, #332]	@ (8001b7c <ReadPressureAndCalculateAltitude+0x38c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	17da      	asrs	r2, r3, #31
 8001a3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001a3e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001a42:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001a46:	4603      	mov	r3, r0
 8001a48:	fb03 f20b 	mul.w	r2, r3, fp
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	fb0a f303 	mul.w	r3, sl, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	4602      	mov	r2, r0
 8001a56:	fbaa 2102 	umull	r2, r1, sl, r2
 8001a5a:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8001a5e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001a62:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001a66:	4413      	add	r3, r2
 8001a68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001a6c:	f04f 0000 	mov.w	r0, #0
 8001a70:	f04f 0100 	mov.w	r1, #0
 8001a74:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001a78:	4623      	mov	r3, r4
 8001a7a:	0a18      	lsrs	r0, r3, #8
 8001a7c:	462a      	mov	r2, r5
 8001a7e:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001a82:	462b      	mov	r3, r5
 8001a84:	1219      	asrs	r1, r3, #8
 8001a86:	4b3d      	ldr	r3, [pc, #244]	@ (8001b7c <ReadPressureAndCalculateAltitude+0x38c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	17da      	asrs	r2, r3, #31
 8001a92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001a96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001a9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a9e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001aa2:	464a      	mov	r2, r9
 8001aa4:	fb02 f203 	mul.w	r2, r2, r3
 8001aa8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001aac:	4644      	mov	r4, r8
 8001aae:	fb04 f303 	mul.w	r3, r4, r3
 8001ab2:	441a      	add	r2, r3
 8001ab4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ab8:	4644      	mov	r4, r8
 8001aba:	fba3 3404 	umull	r3, r4, r3, r4
 8001abe:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001ac6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001aca:	18d3      	adds	r3, r2, r3
 8001acc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001adc:	464c      	mov	r4, r9
 8001ade:	0323      	lsls	r3, r4, #12
 8001ae0:	46c4      	mov	ip, r8
 8001ae2:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001ae6:	4644      	mov	r4, r8
 8001ae8:	0322      	lsls	r2, r4, #12
 8001aea:	1884      	adds	r4, r0, r2
 8001aec:	62bc      	str	r4, [r7, #40]	@ 0x28
 8001aee:	eb41 0303 	adc.w	r3, r1, r3
 8001af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001af4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001af8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1p = (((((int64_t)1) << 47) + var1p)) * ((int64_t)calibData->dig_P1) >> 33;
 8001afc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b00:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b04:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8001b08:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <ReadPressureAndCalculateAltitude+0x38c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	88db      	ldrh	r3, [r3, #6]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2200      	movs	r2, #0
 8001b16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001b1a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001b1e:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8001b22:	4622      	mov	r2, r4
 8001b24:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8001b28:	4641      	mov	r1, r8
 8001b2a:	fb01 f202 	mul.w	r2, r1, r2
 8001b2e:	464d      	mov	r5, r9
 8001b30:	4618      	mov	r0, r3
 8001b32:	4621      	mov	r1, r4
 8001b34:	4603      	mov	r3, r0
 8001b36:	fb03 f305 	mul.w	r3, r3, r5
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4641      	mov	r1, r8
 8001b40:	fba2 2101 	umull	r2, r1, r2, r1
 8001b44:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001b48:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001b4c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001b50:	4413      	add	r3, r2
 8001b52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001b62:	4629      	mov	r1, r5
 8001b64:	104a      	asrs	r2, r1, #1
 8001b66:	4629      	mov	r1, r5
 8001b68:	17cb      	asrs	r3, r1, #31
 8001b6a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    if (var1p == 0) return HAL_ERROR;
 8001b6e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b72:	4313      	orrs	r3, r2
 8001b74:	d104      	bne.n	8001b80 <ReadPressureAndCalculateAltitude+0x390>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e14b      	b.n	8001e12 <ReadPressureAndCalculateAltitude+0x622>
 8001b7a:	bf00      	nop
 8001b7c:	20000240 	.word	0x20000240
    int64_t p = 1048576 - rawPressure;
 8001b80:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001b84:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001b88:	17da      	asrs	r2, r3, #31
 8001b8a:	623b      	str	r3, [r7, #32]
 8001b8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b8e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001b92:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    p = (((p << 31) - var2p) * 3125) / var1p;
 8001b96:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001b9a:	105b      	asrs	r3, r3, #1
 8001b9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ba2:	07db      	lsls	r3, r3, #31
 8001ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001ba6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001baa:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001bae:	4604      	mov	r4, r0
 8001bb0:	1aa4      	subs	r4, r4, r2
 8001bb2:	673c      	str	r4, [r7, #112]	@ 0x70
 8001bb4:	eb61 0303 	sbc.w	r3, r1, r3
 8001bb8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001bba:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001bbe:	4622      	mov	r2, r4
 8001bc0:	462b      	mov	r3, r5
 8001bc2:	1891      	adds	r1, r2, r2
 8001bc4:	61b9      	str	r1, [r7, #24]
 8001bc6:	415b      	adcs	r3, r3
 8001bc8:	61fb      	str	r3, [r7, #28]
 8001bca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bce:	4621      	mov	r1, r4
 8001bd0:	1851      	adds	r1, r2, r1
 8001bd2:	6139      	str	r1, [r7, #16]
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	414b      	adcs	r3, r1
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001be6:	4649      	mov	r1, r9
 8001be8:	018b      	lsls	r3, r1, #6
 8001bea:	4641      	mov	r1, r8
 8001bec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bf0:	4641      	mov	r1, r8
 8001bf2:	018a      	lsls	r2, r1, #6
 8001bf4:	4641      	mov	r1, r8
 8001bf6:	1889      	adds	r1, r1, r2
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	4649      	mov	r1, r9
 8001bfc:	eb43 0101 	adc.w	r1, r3, r1
 8001c00:	60f9      	str	r1, [r7, #12]
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c0e:	4649      	mov	r1, r9
 8001c10:	008b      	lsls	r3, r1, #2
 8001c12:	46c4      	mov	ip, r8
 8001c14:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c18:	4641      	mov	r1, r8
 8001c1a:	008a      	lsls	r2, r1, #2
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4603      	mov	r3, r0
 8001c22:	4622      	mov	r2, r4
 8001c24:	189b      	adds	r3, r3, r2
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	462a      	mov	r2, r5
 8001c2c:	eb42 0303 	adc.w	r3, r2, r3
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001c3e:	4649      	mov	r1, r9
 8001c40:	008b      	lsls	r3, r1, #2
 8001c42:	46c4      	mov	ip, r8
 8001c44:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c48:	4641      	mov	r1, r8
 8001c4a:	008a      	lsls	r2, r1, #2
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4603      	mov	r3, r0
 8001c52:	4622      	mov	r2, r4
 8001c54:	189b      	adds	r3, r3, r2
 8001c56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001c58:	462b      	mov	r3, r5
 8001c5a:	460a      	mov	r2, r1
 8001c5c:	eb42 0303 	adc.w	r3, r2, r3
 8001c60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c62:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001c6a:	f7ff fa8f 	bl	800118c <__aeabi_ldivmod>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    var1p = (((int64_t)calibData->dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001c76:	4b6a      	ldr	r3, [pc, #424]	@ (8001e20 <ReadPressureAndCalculateAltitude+0x630>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	17da      	asrs	r2, r3, #31
 8001c82:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c84:	667a      	str	r2, [r7, #100]	@ 0x64
 8001c86:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001c8a:	f04f 0000 	mov.w	r0, #0
 8001c8e:	f04f 0100 	mov.w	r1, #0
 8001c92:	0b50      	lsrs	r0, r2, #13
 8001c94:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001c98:	1359      	asrs	r1, r3, #13
 8001c9a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001c9e:	462b      	mov	r3, r5
 8001ca0:	fb00 f203 	mul.w	r2, r0, r3
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	fb03 f301 	mul.w	r3, r3, r1
 8001caa:	4413      	add	r3, r2
 8001cac:	4622      	mov	r2, r4
 8001cae:	fba2 2100 	umull	r2, r1, r2, r0
 8001cb2:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001cb6:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001cba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001cc4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	0b42      	lsrs	r2, r0, #13
 8001cd2:	ea42 42c1 	orr.w	r2, r2, r1, lsl #19
 8001cd6:	134b      	asrs	r3, r1, #13
 8001cd8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001cdc:	4629      	mov	r1, r5
 8001cde:	fb02 f001 	mul.w	r0, r2, r1
 8001ce2:	4621      	mov	r1, r4
 8001ce4:	fb01 f103 	mul.w	r1, r1, r3
 8001ce8:	4401      	add	r1, r0
 8001cea:	4620      	mov	r0, r4
 8001cec:	fba0 3202 	umull	r3, r2, r0, r2
 8001cf0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001cf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001cfc:	18cb      	adds	r3, r1, r3
 8001cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001d0e:	4621      	mov	r1, r4
 8001d10:	0e4a      	lsrs	r2, r1, #25
 8001d12:	4620      	mov	r0, r4
 8001d14:	4629      	mov	r1, r5
 8001d16:	460c      	mov	r4, r1
 8001d18:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001d1c:	164b      	asrs	r3, r1, #25
 8001d1e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var2p = (((int64_t)calibData->dig_P8) * p) >> 19;
 8001d22:	4b3f      	ldr	r3, [pc, #252]	@ (8001e20 <ReadPressureAndCalculateAltitude+0x630>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	17da      	asrs	r2, r3, #31
 8001d2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d30:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001d32:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d36:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001d3a:	462a      	mov	r2, r5
 8001d3c:	fb02 f203 	mul.w	r2, r2, r3
 8001d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d44:	4621      	mov	r1, r4
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001d50:	4621      	mov	r1, r4
 8001d52:	fba2 2101 	umull	r2, r1, r2, r1
 8001d56:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001d5a:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001d5e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001d62:	4413      	add	r3, r2
 8001d64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001d74:	4621      	mov	r1, r4
 8001d76:	0cca      	lsrs	r2, r1, #19
 8001d78:	4620      	mov	r0, r4
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	460c      	mov	r4, r1
 8001d7e:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001d82:	14cb      	asrs	r3, r1, #19
 8001d84:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    int32_t pressure = (int32_t)(((p + var1p + var2p) >> 8) + (((int64_t)calibData->dig_P7) << 4));
 8001d88:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001d8c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001d90:	1884      	adds	r4, r0, r2
 8001d92:	653c      	str	r4, [r7, #80]	@ 0x50
 8001d94:	eb41 0303 	adc.w	r3, r1, r3
 8001d98:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d9a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d9e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001da2:	4621      	mov	r1, r4
 8001da4:	1889      	adds	r1, r1, r2
 8001da6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001da8:	4629      	mov	r1, r5
 8001daa:	eb43 0101 	adc.w	r1, r3, r1
 8001dae:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	0a0a      	lsrs	r2, r1, #8
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	460c      	mov	r4, r1
 8001dc6:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8001dca:	120b      	asrs	r3, r1, #8
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <ReadPressureAndCalculateAltitude+0x630>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    float pressure_Pa = pressure / 256.0;
 8001ddc:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001de0:	f7fe fb12 	bl	8000408 <__aeabi_i2d>
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <ReadPressureAndCalculateAltitude+0x634>)
 8001dea:	f7fe fca1 	bl	8000730 <__aeabi_ddiv>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7fe fe69 	bl	8000acc <__aeabi_d2f>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    *altitude = CalculateAltitude(pressure_Pa);
 8001e00:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001e04:	f7ff fbe0 	bl	80015c8 <CalculateAltitude>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e0e:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000240 	.word	0x20000240
 8001e24:	40700000 	.word	0x40700000

08001e28 <ComputeAccelAngles>:

#define ACCEL_SCALE_FACTOR 8192.0f

MPU6050_HandleTypeDef* mpuHandle;

void ComputeAccelAngles(int16_t ax, int16_t ay, int16_t az, float* pitch, float* roll) {
 8001e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2a:	b089      	sub	sp, #36	@ 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	4603      	mov	r3, r0
 8001e32:	81fb      	strh	r3, [r7, #14]
 8001e34:	460b      	mov	r3, r1
 8001e36:	81bb      	strh	r3, [r7, #12]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	817b      	strh	r3, [r7, #10]
    float ax_g = (float)ax / ACCEL_SCALE_FACTOR;
 8001e3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe ff4d 	bl	8000ce0 <__aeabi_i2f>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f84f 	bl	8000ef0 <__aeabi_fdiv>
 8001e52:	4603      	mov	r3, r0
 8001e54:	61fb      	str	r3, [r7, #28]
    float ay_g = (float)ay / ACCEL_SCALE_FACTOR;
 8001e56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe ff40 	bl	8000ce0 <__aeabi_i2f>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f842 	bl	8000ef0 <__aeabi_fdiv>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	61bb      	str	r3, [r7, #24]
    float az_g = (float)az / ACCEL_SCALE_FACTOR;
 8001e70:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe ff33 	bl	8000ce0 <__aeabi_i2f>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f835 	bl	8000ef0 <__aeabi_fdiv>
 8001e86:	4603      	mov	r3, r0
 8001e88:	617b      	str	r3, [r7, #20]

    *pitch = atan2(ax_g, sqrt(ay_g * ay_g + az_g * az_g)) * (180.0f / M_PI);
 8001e8a:	69f8      	ldr	r0, [r7, #28]
 8001e8c:	f7fe face 	bl	800042c <__aeabi_f2d>
 8001e90:	4604      	mov	r4, r0
 8001e92:	460d      	mov	r5, r1
 8001e94:	69b9      	ldr	r1, [r7, #24]
 8001e96:	69b8      	ldr	r0, [r7, #24]
 8001e98:	f7fe ff76 	bl	8000d88 <__aeabi_fmul>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461e      	mov	r6, r3
 8001ea0:	6979      	ldr	r1, [r7, #20]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7fe ff70 	bl	8000d88 <__aeabi_fmul>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4630      	mov	r0, r6
 8001eae:	f7fe fe63 	bl	8000b78 <__addsf3>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe fab9 	bl	800042c <__aeabi_f2d>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f008 ff41 	bl	800ad48 <sqrt>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4620      	mov	r0, r4
 8001ecc:	4629      	mov	r1, r5
 8001ece:	f008 fed1 	bl	800ac74 <atan2>
 8001ed2:	a323      	add	r3, pc, #140	@ (adr r3, 8001f60 <ComputeAccelAngles+0x138>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fb00 	bl	80004dc <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f7fe fdf2 	bl	8000acc <__aeabi_d2f>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	601a      	str	r2, [r3, #0]
    *roll = atan2(ay_g, sqrt(ax_g * ax_g + az_g * az_g)) * (180.0f / M_PI);
 8001eee:	69b8      	ldr	r0, [r7, #24]
 8001ef0:	f7fe fa9c 	bl	800042c <__aeabi_f2d>
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	460d      	mov	r5, r1
 8001ef8:	69f9      	ldr	r1, [r7, #28]
 8001efa:	69f8      	ldr	r0, [r7, #28]
 8001efc:	f7fe ff44 	bl	8000d88 <__aeabi_fmul>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461e      	mov	r6, r3
 8001f04:	6979      	ldr	r1, [r7, #20]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7fe ff3e 	bl	8000d88 <__aeabi_fmul>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4630      	mov	r0, r6
 8001f12:	f7fe fe31 	bl	8000b78 <__addsf3>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fa87 	bl	800042c <__aeabi_f2d>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f008 ff0f 	bl	800ad48 <sqrt>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4620      	mov	r0, r4
 8001f30:	4629      	mov	r1, r5
 8001f32:	f008 fe9f 	bl	800ac74 <atan2>
 8001f36:	a30a      	add	r3, pc, #40	@ (adr r3, 8001f60 <ComputeAccelAngles+0x138>)
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	f7fe face 	bl	80004dc <__aeabi_dmul>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7fe fdc0 	bl	8000acc <__aeabi_d2f>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f50:	601a      	str	r2, [r3, #0]
}
 8001f52:	bf00      	nop
 8001f54:	3724      	adds	r7, #36	@ 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	f3af 8000 	nop.w
 8001f60:	1a63c1f8 	.word	0x1a63c1f8
 8001f64:	404ca5dc 	.word	0x404ca5dc

08001f68 <MPU6050_CalculatePitchRoll>:
void MPU6050_CalculatePitchRoll(float* pitch, float* roll){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
	int16_t accelerometer[3]={0,0,0};
 8001f72:	2300      	movs	r3, #0
 8001f74:	813b      	strh	r3, [r7, #8]
 8001f76:	2300      	movs	r3, #0
 8001f78:	817b      	strh	r3, [r7, #10]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	81bb      	strh	r3, [r7, #12]
	MPU6050_ReadAccel(mpuHandle,accelerometer);
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <MPU6050_CalculatePitchRoll+0x44>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f107 0208 	add.w	r2, r7, #8
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 f855 	bl	8002038 <MPU6050_ReadAccel>
	ComputeAccelAngles(accelerometer[0], accelerometer[1], accelerometer[2],pitch, roll);
 8001f8e:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001f92:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001f96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f7ff ff42 	bl	8001e28 <ComputeAccelAngles>
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000250 	.word	0x20000250

08001fb0 <MPU6050_Init>:

HAL_StatusTypeDef MPU6050_Init(MPU6050_HandleTypeDef *mpu) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef ret;
    mpuHandle=mpu;
 8001fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8002034 <MPU6050_Init+0x84>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
    ret = MPU6050_WriteRegister(mpu, MPU6050_PWR_MGMT_1, 0x00);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	216b      	movs	r1, #107	@ 0x6b
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f8f2 	bl	80021ac <MPU6050_WriteRegister>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MPU6050_Init+0x26>
        return ret;
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	e02a      	b.n	800202c <MPU6050_Init+0x7c>
    }
    HAL_Delay(100);
 8001fd6:	2064      	movs	r0, #100	@ 0x64
 8001fd8:	f001 ff12 	bl	8003e00 <HAL_Delay>
    ret = MPU6050_WriteRegister(mpu, MPU6050_CONFIG, 0x06);
 8001fdc:	2206      	movs	r2, #6
 8001fde:	211a      	movs	r1, #26
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f8e3 	bl	80021ac <MPU6050_WriteRegister>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	73fb      	strb	r3, [r7, #15]
        if (ret != HAL_OK) {
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MPU6050_Init+0x44>
            return ret;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
 8001ff2:	e01b      	b.n	800202c <MPU6050_Init+0x7c>
    }
    HAL_Delay(100);
 8001ff4:	2064      	movs	r0, #100	@ 0x64
 8001ff6:	f001 ff03 	bl	8003e00 <HAL_Delay>
    ret = MPU6050_WriteRegister(mpu, MPU6050_ACCEL_CONFIG, 0x00);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	211c      	movs	r1, #28
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f8d4 	bl	80021ac <MPU6050_WriteRegister>
 8002004:	4603      	mov	r3, r0
 8002006:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MPU6050_Init+0x62>
        return ret;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	e00c      	b.n	800202c <MPU6050_Init+0x7c>
    }
    ret = MPU6050_WriteRegister(mpu, MPU6050_GYRO_CONFIG, 0x00);
 8002012:	2200      	movs	r2, #0
 8002014:	211b      	movs	r1, #27
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f8c8 	bl	80021ac <MPU6050_WriteRegister>
 800201c:	4603      	mov	r3, r0
 800201e:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK) {
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MPU6050_Init+0x7a>
        return ret;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	e000      	b.n	800202c <MPU6050_Init+0x7c>
    }
    return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000250 	.word	0x20000250

08002038 <MPU6050_ReadAccel>:

HAL_StatusTypeDef MPU6050_ReadAccel(MPU6050_HandleTypeDef *mpu, int16_t* accelData) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af04      	add	r7, sp, #16
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
    uint8_t rawData[6];
    HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(mpu->hi2c, MPU6050_ADDRESS, MPU6050_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, rawData, 6, HAL_MAX_DELAY);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	9302      	str	r3, [sp, #8]
 800204c:	2306      	movs	r3, #6
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	f107 0308 	add.w	r3, r7, #8
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2301      	movs	r3, #1
 8002058:	223b      	movs	r2, #59	@ 0x3b
 800205a:	21d0      	movs	r1, #208	@ 0xd0
 800205c:	f002 fd8c 	bl	8004b78 <HAL_I2C_Mem_Read>
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(100);
 8002064:	2064      	movs	r0, #100	@ 0x64
 8002066:	f001 fecb 	bl	8003e00 <HAL_Delay>
    if (ret == HAL_OK) {
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d134      	bne.n	80020da <MPU6050_ReadAccel+0xa2>
        accelData[0] = ((int16_t)(rawData[0] << 8 | rawData[1])) - ax_offset;
 8002070:	7a3b      	ldrb	r3, [r7, #8]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	b21a      	sxth	r2, r3
 8002076:	7a7b      	ldrb	r3, [r7, #9]
 8002078:	b21b      	sxth	r3, r3
 800207a:	4313      	orrs	r3, r2
 800207c:	b21b      	sxth	r3, r3
 800207e:	b29a      	uxth	r2, r3
 8002080:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <MPU6050_ReadAccel+0xac>)
 8002082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002086:	b29b      	uxth	r3, r3
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	b29b      	uxth	r3, r3
 800208c:	b21a      	sxth	r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	801a      	strh	r2, [r3, #0]
        accelData[1] = ((int16_t)(rawData[2] << 8 | rawData[3])) - ay_offset;
 8002092:	7abb      	ldrb	r3, [r7, #10]
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	b21a      	sxth	r2, r3
 8002098:	7afb      	ldrb	r3, [r7, #11]
 800209a:	b21b      	sxth	r3, r3
 800209c:	4313      	orrs	r3, r2
 800209e:	b21b      	sxth	r3, r3
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <MPU6050_ReadAccel+0xb0>)
 80020a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	3302      	adds	r3, #2
 80020b2:	b212      	sxth	r2, r2
 80020b4:	801a      	strh	r2, [r3, #0]
        accelData[2] = ((int16_t)(rawData[4] << 8 | rawData[5])) - az_offset;
 80020b6:	7b3b      	ldrb	r3, [r7, #12]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	b21a      	sxth	r2, r3
 80020bc:	7b7b      	ldrb	r3, [r7, #13]
 80020be:	b21b      	sxth	r3, r3
 80020c0:	4313      	orrs	r3, r2
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <MPU6050_ReadAccel+0xb4>)
 80020c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	3304      	adds	r3, #4
 80020d6:	b212      	sxth	r2, r2
 80020d8:	801a      	strh	r2, [r3, #0]
    }
    return ret;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000244 	.word	0x20000244
 80020e8:	20000246 	.word	0x20000246
 80020ec:	20000248 	.word	0x20000248

080020f0 <MPU6050_ReadGyro>:

HAL_StatusTypeDef MPU6050_ReadGyro(int16_t* gyroData) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af04      	add	r7, sp, #16
 80020f6:	6078      	str	r0, [r7, #4]
    uint8_t rawData[6];
    HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(mpuHandle->hi2c, MPU6050_ADDRESS, MPU6050_GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, rawData, 6, HAL_MAX_DELAY);
 80020f8:	4b28      	ldr	r3, [pc, #160]	@ (800219c <MPU6050_ReadGyro+0xac>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	9302      	str	r3, [sp, #8]
 8002104:	2306      	movs	r3, #6
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	f107 0308 	add.w	r3, r7, #8
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2301      	movs	r3, #1
 8002110:	2243      	movs	r2, #67	@ 0x43
 8002112:	21d0      	movs	r1, #208	@ 0xd0
 8002114:	f002 fd30 	bl	8004b78 <HAL_I2C_Mem_Read>
 8002118:	4603      	mov	r3, r0
 800211a:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(100);
 800211c:	2064      	movs	r0, #100	@ 0x64
 800211e:	f001 fe6f 	bl	8003e00 <HAL_Delay>
    if (ret == HAL_OK) {
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d134      	bne.n	8002192 <MPU6050_ReadGyro+0xa2>
        gyroData[0] = ((int16_t)(rawData[0] << 8 | rawData[1])) - gx_offset;
 8002128:	7a3b      	ldrb	r3, [r7, #8]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	b21a      	sxth	r2, r3
 800212e:	7a7b      	ldrb	r3, [r7, #9]
 8002130:	b21b      	sxth	r3, r3
 8002132:	4313      	orrs	r3, r2
 8002134:	b21b      	sxth	r3, r3
 8002136:	b29a      	uxth	r2, r3
 8002138:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <MPU6050_ReadGyro+0xb0>)
 800213a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800213e:	b29b      	uxth	r3, r3
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	b29b      	uxth	r3, r3
 8002144:	b21a      	sxth	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	801a      	strh	r2, [r3, #0]
        gyroData[1] = ((int16_t)(rawData[2] << 8 | rawData[3])) - gy_offset;
 800214a:	7abb      	ldrb	r3, [r7, #10]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	7afb      	ldrb	r3, [r7, #11]
 8002152:	b21b      	sxth	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	b21b      	sxth	r3, r3
 8002158:	b29a      	uxth	r2, r3
 800215a:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <MPU6050_ReadGyro+0xb4>)
 800215c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002160:	b29b      	uxth	r3, r3
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	b29a      	uxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3302      	adds	r3, #2
 800216a:	b212      	sxth	r2, r2
 800216c:	801a      	strh	r2, [r3, #0]
        gyroData[2] = ((int16_t)(rawData[4] << 8 | rawData[5])) - gz_offset;
 800216e:	7b3b      	ldrb	r3, [r7, #12]
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	b21a      	sxth	r2, r3
 8002174:	7b7b      	ldrb	r3, [r7, #13]
 8002176:	b21b      	sxth	r3, r3
 8002178:	4313      	orrs	r3, r2
 800217a:	b21b      	sxth	r3, r3
 800217c:	b29a      	uxth	r2, r3
 800217e:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <MPU6050_ReadGyro+0xb8>)
 8002180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002184:	b29b      	uxth	r3, r3
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	b29a      	uxth	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	b212      	sxth	r2, r2
 8002190:	801a      	strh	r2, [r3, #0]
    }
    return ret;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20000250 	.word	0x20000250
 80021a0:	2000024a 	.word	0x2000024a
 80021a4:	2000024c 	.word	0x2000024c
 80021a8:	2000024e 	.word	0x2000024e

080021ac <MPU6050_WriteRegister>:

HAL_StatusTypeDef MPU6050_WriteRegister(MPU6050_HandleTypeDef *mpu, uint8_t reg, uint8_t data) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af04      	add	r7, sp, #16
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	70fb      	strb	r3, [r7, #3]
 80021b8:	4613      	mov	r3, r2
 80021ba:	70bb      	strb	r3, [r7, #2]
    return HAL_I2C_Mem_Write(mpu->hi2c, MPU6050_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	f04f 33ff 	mov.w	r3, #4294967295
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	2301      	movs	r3, #1
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	1cbb      	adds	r3, r7, #2
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	2301      	movs	r3, #1
 80021d4:	21d0      	movs	r1, #208	@ 0xd0
 80021d6:	f002 fbd5 	bl	8004984 <HAL_I2C_Mem_Write>
 80021da:	4603      	mov	r3, r0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <MPU6050_Calibrate>:

HAL_StatusTypeDef MPU6050_ReadRegister(MPU6050_HandleTypeDef *mpu, uint8_t reg, uint8_t* data) {
    return HAL_I2C_Mem_Read(mpu->hi2c, MPU6050_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
}

void MPU6050_Calibrate() {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
    int32_t gx_sum = 0, gy_sum = 0, gz_sum = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
    int16_t gyro[3];

    for (int i = 0; i < 100; i++) {
 80021f6:	2300      	movs	r3, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	e01b      	b.n	8002234 <MPU6050_Calibrate+0x50>
        MPU6050_ReadGyro(gyro);
 80021fc:	463b      	mov	r3, r7
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff ff76 	bl	80020f0 <MPU6050_ReadGyro>
        gx_sum += gyro[0];
 8002204:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002208:	461a      	mov	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	4413      	add	r3, r2
 800220e:	617b      	str	r3, [r7, #20]
        gy_sum += gyro[1];
 8002210:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002214:	461a      	mov	r2, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4413      	add	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        gz_sum += gyro[2];
 800221c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002220:	461a      	mov	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4413      	add	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]

        HAL_Delay(10);
 8002228:	200a      	movs	r0, #10
 800222a:	f001 fde9 	bl	8003e00 <HAL_Delay>
    for (int i = 0; i < 100; i++) {
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3301      	adds	r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b63      	cmp	r3, #99	@ 0x63
 8002238:	dde0      	ble.n	80021fc <MPU6050_Calibrate+0x18>
    }
gx_offset = gx_sum / 100;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	4a10      	ldr	r2, [pc, #64]	@ (8002280 <MPU6050_Calibrate+0x9c>)
 800223e:	fb82 1203 	smull	r1, r2, r2, r3
 8002242:	1152      	asrs	r2, r2, #5
 8002244:	17db      	asrs	r3, r3, #31
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	b21a      	sxth	r2, r3
 800224a:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <MPU6050_Calibrate+0xa0>)
 800224c:	801a      	strh	r2, [r3, #0]
gy_offset = gy_sum / 100;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4a0b      	ldr	r2, [pc, #44]	@ (8002280 <MPU6050_Calibrate+0x9c>)
 8002252:	fb82 1203 	smull	r1, r2, r2, r3
 8002256:	1152      	asrs	r2, r2, #5
 8002258:	17db      	asrs	r3, r3, #31
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	b21a      	sxth	r2, r3
 800225e:	4b0a      	ldr	r3, [pc, #40]	@ (8002288 <MPU6050_Calibrate+0xa4>)
 8002260:	801a      	strh	r2, [r3, #0]
gz_offset = gz_sum / 100;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a06      	ldr	r2, [pc, #24]	@ (8002280 <MPU6050_Calibrate+0x9c>)
 8002266:	fb82 1203 	smull	r1, r2, r2, r3
 800226a:	1152      	asrs	r2, r2, #5
 800226c:	17db      	asrs	r3, r3, #31
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	b21a      	sxth	r2, r3
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <MPU6050_Calibrate+0xa8>)
 8002274:	801a      	strh	r2, [r3, #0]

}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	51eb851f 	.word	0x51eb851f
 8002284:	2000024a 	.word	0x2000024a
 8002288:	2000024c 	.word	0x2000024c
 800228c:	2000024e 	.word	0x2000024e

08002290 <UpdateTime>:
float desired_pitch_rate=0.0f;
float desired_yaw_rate=0.0f;
volatile uint32_t previousTime = 0;
volatile uint32_t currentTime = 0;

void UpdateTime() {
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
    previousTime = currentTime;
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <UpdateTime+0x1c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a05      	ldr	r2, [pc, #20]	@ (80022b0 <UpdateTime+0x20>)
 800229a:	6013      	str	r3, [r2, #0]
    currentTime = HAL_GetTick();
 800229c:	f001 fda6 	bl	8003dec <HAL_GetTick>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4a02      	ldr	r2, [pc, #8]	@ (80022ac <UpdateTime+0x1c>)
 80022a4:	6013      	str	r3, [r2, #0]
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000288 	.word	0x20000288
 80022b0:	20000284 	.word	0x20000284

080022b4 <GetDeltaTime>:

float GetDeltaTime() {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
    return (currentTime - previousTime) / 1000.0f;
 80022b8:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <GetDeltaTime+0x24>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <GetDeltaTime+0x28>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fd08 	bl	8000cd8 <__aeabi_ui2f>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4905      	ldr	r1, [pc, #20]	@ (80022e0 <GetDeltaTime+0x2c>)
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fe0f 	bl	8000ef0 <__aeabi_fdiv>
 80022d2:	4603      	mov	r3, r0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000288 	.word	0x20000288
 80022dc:	20000284 	.word	0x20000284
 80022e0:	447a0000 	.word	0x447a0000

080022e4 <PID_init>:
void PID_init(){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	previousTime = HAL_GetTick();
 80022e8:	f001 fd80 	bl	8003dec <HAL_GetTick>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a03      	ldr	r2, [pc, #12]	@ (80022fc <PID_init+0x18>)
 80022f0:	6013      	str	r3, [r2, #0]
	MPU6050_Calibrate();
 80022f2:	f7ff ff77 	bl	80021e4 <MPU6050_Calibrate>
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000284 	.word	0x20000284

08002300 <PID_Update>:
void PID_Update(PIDController* pid, float setpoint, float measurement, float* output){
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b089      	sub	sp, #36	@ 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
	float error= setpoint-measurement;
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	68b8      	ldr	r0, [r7, #8]
 8002312:	f7fe fc2f 	bl	8000b74 <__aeabi_fsub>
 8002316:	4603      	mov	r3, r0
 8002318:	61fb      	str	r3, [r7, #28]
	if (fabs(error) < DEADBAND) {
	        error = 0.0;
	}
	float prop=pid->kp*error;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4619      	mov	r1, r3
 8002320:	69f8      	ldr	r0, [r7, #28]
 8002322:	f7fe fd31 	bl	8000d88 <__aeabi_fmul>
 8002326:	4603      	mov	r3, r0
 8002328:	61bb      	str	r3, [r7, #24]
	pid->integral+=pid->ki * error;;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	68dc      	ldr	r4, [r3, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	69f9      	ldr	r1, [r7, #28]
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fd27 	bl	8000d88 <__aeabi_fmul>
 800233a:	4603      	mov	r3, r0
 800233c:	4619      	mov	r1, r3
 800233e:	4620      	mov	r0, r4
 8002340:	f7fe fc1a 	bl	8000b78 <__addsf3>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	60da      	str	r2, [r3, #12]
	if (pid->integral > 1000.0f) pid->integral = 1000.0f;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	491d      	ldr	r1, [pc, #116]	@ (80023c8 <PID_Update+0xc8>)
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fed4 	bl	8001100 <__aeabi_fcmpgt>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <PID_Update+0x64>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4a19      	ldr	r2, [pc, #100]	@ (80023c8 <PID_Update+0xc8>)
 8002362:	60da      	str	r2, [r3, #12]
	if (pid->integral < -1000.0f) pid->integral = -1000.0f;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4918      	ldr	r1, [pc, #96]	@ (80023cc <PID_Update+0xcc>)
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe feaa 	bl	80010c4 <__aeabi_fcmplt>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <PID_Update+0x7c>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a14      	ldr	r2, [pc, #80]	@ (80023cc <PID_Update+0xcc>)
 800237a:	60da      	str	r2, [r3, #12]
	float derivative=pid->kd * (error - pid->last_error);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689c      	ldr	r4, [r3, #8]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	4619      	mov	r1, r3
 8002386:	69f8      	ldr	r0, [r7, #28]
 8002388:	f7fe fbf4 	bl	8000b74 <__aeabi_fsub>
 800238c:	4603      	mov	r3, r0
 800238e:	4619      	mov	r1, r3
 8002390:	4620      	mov	r0, r4
 8002392:	f7fe fcf9 	bl	8000d88 <__aeabi_fmul>
 8002396:	4603      	mov	r3, r0
 8002398:	617b      	str	r3, [r7, #20]
	*output=prop+pid->integral+derivative;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	69b9      	ldr	r1, [r7, #24]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe fbe9 	bl	8000b78 <__addsf3>
 80023a6:	4603      	mov	r3, r0
 80023a8:	6979      	ldr	r1, [r7, #20]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fbe4 	bl	8000b78 <__addsf3>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	601a      	str	r2, [r3, #0]
	pid->last_error=error;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	611a      	str	r2, [r3, #16]
}
 80023be:	bf00      	nop
 80023c0:	3724      	adds	r7, #36	@ 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd90      	pop	{r4, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	447a0000 	.word	0x447a0000
 80023cc:	c47a0000 	.word	0xc47a0000

080023d0 <UpdateGyroStabilization>:


void UpdateGyroStabilization() {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
    int16_t gyroData[3] = {0, 0, 0};
 80023d6:	2300      	movs	r3, #0
 80023d8:	803b      	strh	r3, [r7, #0]
 80023da:	2300      	movs	r3, #0
 80023dc:	807b      	strh	r3, [r7, #2]
 80023de:	2300      	movs	r3, #0
 80023e0:	80bb      	strh	r3, [r7, #4]
    if (MPU6050_ReadGyro(gyroData) == HAL_OK) {
 80023e2:	463b      	mov	r3, r7
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fe83 	bl	80020f0 <MPU6050_ReadGyro>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d143      	bne.n	8002478 <UpdateGyroStabilization+0xa8>
        rollRate = 	-gyroData[0] / GYRO_SENSITIVITY;
 80023f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80023f4:	425b      	negs	r3, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fc72 	bl	8000ce0 <__aeabi_i2f>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4920      	ldr	r1, [pc, #128]	@ (8002480 <UpdateGyroStabilization+0xb0>)
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fd75 	bl	8000ef0 <__aeabi_fdiv>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	4b1e      	ldr	r3, [pc, #120]	@ (8002484 <UpdateGyroStabilization+0xb4>)
 800240c:	601a      	str	r2, [r3, #0]
        pitchRate = -gyroData[1] / GYRO_SENSITIVITY;
 800240e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002412:	425b      	negs	r3, r3
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fc63 	bl	8000ce0 <__aeabi_i2f>
 800241a:	4603      	mov	r3, r0
 800241c:	4918      	ldr	r1, [pc, #96]	@ (8002480 <UpdateGyroStabilization+0xb0>)
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fd66 	bl	8000ef0 <__aeabi_fdiv>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <UpdateGyroStabilization+0xb8>)
 800242a:	601a      	str	r2, [r3, #0]
        yawRate = 	gyroData[2] / GYRO_SENSITIVITY;
 800242c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe fc55 	bl	8000ce0 <__aeabi_i2f>
 8002436:	4603      	mov	r3, r0
 8002438:	4911      	ldr	r1, [pc, #68]	@ (8002480 <UpdateGyroStabilization+0xb0>)
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fd58 	bl	8000ef0 <__aeabi_fdiv>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <UpdateGyroStabilization+0xbc>)
 8002446:	601a      	str	r2, [r3, #0]
        PID_Update(&roll_pid, desired_roll_rate, rollRate, &motor_roll_output);
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <UpdateGyroStabilization+0xc0>)
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	4b0d      	ldr	r3, [pc, #52]	@ (8002484 <UpdateGyroStabilization+0xb4>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <UpdateGyroStabilization+0xc4>)
 8002452:	4811      	ldr	r0, [pc, #68]	@ (8002498 <UpdateGyroStabilization+0xc8>)
 8002454:	f7ff ff54 	bl	8002300 <PID_Update>
        PID_Update(&pitch_pid, desired_pitch_rate, pitchRate, &motor_pitch_output);
 8002458:	4b10      	ldr	r3, [pc, #64]	@ (800249c <UpdateGyroStabilization+0xcc>)
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <UpdateGyroStabilization+0xb8>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4b0f      	ldr	r3, [pc, #60]	@ (80024a0 <UpdateGyroStabilization+0xd0>)
 8002462:	4810      	ldr	r0, [pc, #64]	@ (80024a4 <UpdateGyroStabilization+0xd4>)
 8002464:	f7ff ff4c 	bl	8002300 <PID_Update>
        PID_Update(&yaw_pid, desired_yaw_rate, yawRate, &motor_yaw_output);
 8002468:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <UpdateGyroStabilization+0xd8>)
 800246a:	6819      	ldr	r1, [r3, #0]
 800246c:	4b07      	ldr	r3, [pc, #28]	@ (800248c <UpdateGyroStabilization+0xbc>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <UpdateGyroStabilization+0xdc>)
 8002472:	480f      	ldr	r0, [pc, #60]	@ (80024b0 <UpdateGyroStabilization+0xe0>)
 8002474:	f7ff ff44 	bl	8002300 <PID_Update>
    }
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	41833333 	.word	0x41833333
 8002484:	2000026c 	.word	0x2000026c
 8002488:	20000270 	.word	0x20000270
 800248c:	20000274 	.word	0x20000274
 8002490:	20000278 	.word	0x20000278
 8002494:	20000264 	.word	0x20000264
 8002498:	20000014 	.word	0x20000014
 800249c:	2000027c 	.word	0x2000027c
 80024a0:	20000260 	.word	0x20000260
 80024a4:	20000000 	.word	0x20000000
 80024a8:	20000280 	.word	0x20000280
 80024ac:	20000268 	.word	0x20000268
 80024b0:	20000028 	.word	0x20000028
 80024b4:	00000000 	.word	0x00000000

080024b8 <PID_ControlLoop>:

        uartBufferLength = 0;
    }
}

void PID_ControlLoop(void) {
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
    float realPitch = 0;
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
    float realRoll = 0;
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
    UpdateTime();
 80024ca:	f7ff fee1 	bl	8002290 <UpdateTime>
    float dt = GetDeltaTime();
 80024ce:	f7ff fef1 	bl	80022b4 <GetDeltaTime>
 80024d2:	6178      	str	r0, [r7, #20]
    UpdateGyroStabilization();
 80024d4:	f7ff ff7c 	bl	80023d0 <UpdateGyroStabilization>
    MPU6050_CalculatePitchRoll(&realPitch, &realRoll);
 80024d8:	1d3a      	adds	r2, r7, #4
 80024da:	f107 0308 	add.w	r3, r7, #8
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fd41 	bl	8001f68 <MPU6050_CalculatePitchRoll>
    float estimatedPitch = (0.98 * (realPitch + pitchRate * dt)) + (0.02 * realPitch);
 80024e6:	4ba8      	ldr	r3, [pc, #672]	@ (8002788 <PID_ControlLoop+0x2d0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6979      	ldr	r1, [r7, #20]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fc4b 	bl	8000d88 <__aeabi_fmul>
 80024f2:	4603      	mov	r3, r0
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f7fe fb3c 	bl	8000b78 <__addsf3>
 8002500:	4603      	mov	r3, r0
 8002502:	4618      	mov	r0, r3
 8002504:	f7fd ff92 	bl	800042c <__aeabi_f2d>
 8002508:	a39b      	add	r3, pc, #620	@ (adr r3, 8002778 <PID_ControlLoop+0x2c0>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fd ffe5 	bl	80004dc <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4614      	mov	r4, r2
 8002518:	461d      	mov	r5, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fd ff85 	bl	800042c <__aeabi_f2d>
 8002522:	a397      	add	r3, pc, #604	@ (adr r3, 8002780 <PID_ControlLoop+0x2c8>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	f7fd ffd8 	bl	80004dc <__aeabi_dmul>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4620      	mov	r0, r4
 8002532:	4629      	mov	r1, r5
 8002534:	f7fd fe1c 	bl	8000170 <__adddf3>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	f7fe fac4 	bl	8000acc <__aeabi_d2f>
 8002544:	4603      	mov	r3, r0
 8002546:	613b      	str	r3, [r7, #16]
    float estimatedRoll = (0.98 * (realRoll + rollRate * dt)) + (0.02 * realRoll);
 8002548:	4b90      	ldr	r3, [pc, #576]	@ (800278c <PID_ControlLoop+0x2d4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6979      	ldr	r1, [r7, #20]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fc1a 	bl	8000d88 <__aeabi_fmul>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4619      	mov	r1, r3
 800255c:	4610      	mov	r0, r2
 800255e:	f7fe fb0b 	bl	8000b78 <__addsf3>
 8002562:	4603      	mov	r3, r0
 8002564:	4618      	mov	r0, r3
 8002566:	f7fd ff61 	bl	800042c <__aeabi_f2d>
 800256a:	a383      	add	r3, pc, #524	@ (adr r3, 8002778 <PID_ControlLoop+0x2c0>)
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f7fd ffb4 	bl	80004dc <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4614      	mov	r4, r2
 800257a:	461d      	mov	r5, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fd ff54 	bl	800042c <__aeabi_f2d>
 8002584:	a37e      	add	r3, pc, #504	@ (adr r3, 8002780 <PID_ControlLoop+0x2c8>)
 8002586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258a:	f7fd ffa7 	bl	80004dc <__aeabi_dmul>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4620      	mov	r0, r4
 8002594:	4629      	mov	r1, r5
 8002596:	f7fd fdeb 	bl	8000170 <__adddf3>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7fe fa93 	bl	8000acc <__aeabi_d2f>
 80025a6:	4603      	mov	r3, r0
 80025a8:	60fb      	str	r3, [r7, #12]
    PID_Update(&pitch_pid, desired_pitch, estimatedPitch, &motor_pitch_output);
 80025aa:	4b79      	ldr	r3, [pc, #484]	@ (8002790 <PID_ControlLoop+0x2d8>)
 80025ac:	6819      	ldr	r1, [r3, #0]
 80025ae:	4b79      	ldr	r3, [pc, #484]	@ (8002794 <PID_ControlLoop+0x2dc>)
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4879      	ldr	r0, [pc, #484]	@ (8002798 <PID_ControlLoop+0x2e0>)
 80025b4:	f7ff fea4 	bl	8002300 <PID_Update>
    PID_Update(&roll_pid, desired_roll, estimatedRoll, &motor_roll_output);
 80025b8:	4b78      	ldr	r3, [pc, #480]	@ (800279c <PID_ControlLoop+0x2e4>)
 80025ba:	6819      	ldr	r1, [r3, #0]
 80025bc:	4b78      	ldr	r3, [pc, #480]	@ (80027a0 <PID_ControlLoop+0x2e8>)
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	4878      	ldr	r0, [pc, #480]	@ (80027a4 <PID_ControlLoop+0x2ec>)
 80025c2:	f7ff fe9d 	bl	8002300 <PID_Update>
    PID_Update(&yaw_pid, desired_yaw, yawRate, &motor_yaw_output);
 80025c6:	4b78      	ldr	r3, [pc, #480]	@ (80027a8 <PID_ControlLoop+0x2f0>)
 80025c8:	6819      	ldr	r1, [r3, #0]
 80025ca:	4b78      	ldr	r3, [pc, #480]	@ (80027ac <PID_ControlLoop+0x2f4>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b78      	ldr	r3, [pc, #480]	@ (80027b0 <PID_ControlLoop+0x2f8>)
 80025d0:	4878      	ldr	r0, [pc, #480]	@ (80027b4 <PID_ControlLoop+0x2fc>)
 80025d2:	f7ff fe95 	bl	8002300 <PID_Update>
    Motor_setRoll((int)motor_roll_output);
 80025d6:	4b72      	ldr	r3, [pc, #456]	@ (80027a0 <PID_ControlLoop+0x2e8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fdb0 	bl	8001140 <__aeabi_f2iz>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f001 f8ec 	bl	80037c0 <Motor_setRoll>
    Motor_setPitch((int)motor_pitch_output);
 80025e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002794 <PID_ControlLoop+0x2dc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fda7 	bl	8001140 <__aeabi_f2iz>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 f907 	bl	8003808 <Motor_setPitch>
    Motor_setYaw((int)motor_yaw_output);
 80025fa:	4b6d      	ldr	r3, [pc, #436]	@ (80027b0 <PID_ControlLoop+0x2f8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fd9e 	bl	8001140 <__aeabi_f2iz>
 8002604:	4603      	mov	r3, r0
 8002606:	4618      	mov	r0, r3
 8002608:	f001 f922 	bl	8003850 <Motor_setYaw>
    float altitude;
    ReadPressureAndCalculateAltitude(&altitude);
 800260c:	463b      	mov	r3, r7
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff f8ee 	bl	80017f0 <ReadPressureAndCalculateAltitude>
    uartBufferLength += sprintf(uartBuffer + uartBufferLength, "{");
 8002614:	4b68      	ldr	r3, [pc, #416]	@ (80027b8 <PID_ControlLoop+0x300>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	4b68      	ldr	r3, [pc, #416]	@ (80027bc <PID_ControlLoop+0x304>)
 800261c:	4413      	add	r3, r2
 800261e:	4968      	ldr	r1, [pc, #416]	@ (80027c0 <PID_ControlLoop+0x308>)
 8002620:	4618      	mov	r0, r3
 8002622:	f006 f9df 	bl	80089e4 <siprintf>
 8002626:	4602      	mov	r2, r0
 8002628:	4b63      	ldr	r3, [pc, #396]	@ (80027b8 <PID_ControlLoop+0x300>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4413      	add	r3, r2
 800262e:	4a62      	ldr	r2, [pc, #392]	@ (80027b8 <PID_ControlLoop+0x300>)
 8002630:	6013      	str	r3, [r2, #0]
    uartBufferLength += sprintf(uartBuffer + uartBufferLength, "\"CurrentPitch\":%d, \"CurrentRoll\":%d, ", (int)realPitch, (int)realRoll);
 8002632:	4b61      	ldr	r3, [pc, #388]	@ (80027b8 <PID_ControlLoop+0x300>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	4b60      	ldr	r3, [pc, #384]	@ (80027bc <PID_ControlLoop+0x304>)
 800263a:	18d4      	adds	r4, r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe fd7e 	bl	8001140 <__aeabi_f2iz>
 8002644:	4605      	mov	r5, r0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fd79 	bl	8001140 <__aeabi_f2iz>
 800264e:	4603      	mov	r3, r0
 8002650:	462a      	mov	r2, r5
 8002652:	495c      	ldr	r1, [pc, #368]	@ (80027c4 <PID_ControlLoop+0x30c>)
 8002654:	4620      	mov	r0, r4
 8002656:	f006 f9c5 	bl	80089e4 <siprintf>
 800265a:	4602      	mov	r2, r0
 800265c:	4b56      	ldr	r3, [pc, #344]	@ (80027b8 <PID_ControlLoop+0x300>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4413      	add	r3, r2
 8002662:	4a55      	ldr	r2, [pc, #340]	@ (80027b8 <PID_ControlLoop+0x300>)
 8002664:	6013      	str	r3, [r2, #0]
    uartBufferLength += sprintf(uartBuffer + uartBufferLength, "\"OutputPitch\":%d, \"OutputRoll\":%d, ", (int)motor_pitch_output, (int)motor_roll_output);
 8002666:	4b54      	ldr	r3, [pc, #336]	@ (80027b8 <PID_ControlLoop+0x300>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	4b53      	ldr	r3, [pc, #332]	@ (80027bc <PID_ControlLoop+0x304>)
 800266e:	18d4      	adds	r4, r2, r3
 8002670:	4b48      	ldr	r3, [pc, #288]	@ (8002794 <PID_ControlLoop+0x2dc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fd63 	bl	8001140 <__aeabi_f2iz>
 800267a:	4605      	mov	r5, r0
 800267c:	4b48      	ldr	r3, [pc, #288]	@ (80027a0 <PID_ControlLoop+0x2e8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fd5d 	bl	8001140 <__aeabi_f2iz>
 8002686:	4603      	mov	r3, r0
 8002688:	462a      	mov	r2, r5
 800268a:	494f      	ldr	r1, [pc, #316]	@ (80027c8 <PID_ControlLoop+0x310>)
 800268c:	4620      	mov	r0, r4
 800268e:	f006 f9a9 	bl	80089e4 <siprintf>
 8002692:	4602      	mov	r2, r0
 8002694:	4b48      	ldr	r3, [pc, #288]	@ (80027b8 <PID_ControlLoop+0x300>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4413      	add	r3, r2
 800269a:	4a47      	ldr	r2, [pc, #284]	@ (80027b8 <PID_ControlLoop+0x300>)
 800269c:	6013      	str	r3, [r2, #0]
    uartBufferLength += sprintf(uartBuffer + uartBufferLength, "\"RollRate\":%d, \"PitchRate\":%d, ", (int)rollRate, (int)pitchRate);
 800269e:	4b46      	ldr	r3, [pc, #280]	@ (80027b8 <PID_ControlLoop+0x300>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	4b45      	ldr	r3, [pc, #276]	@ (80027bc <PID_ControlLoop+0x304>)
 80026a6:	18d4      	adds	r4, r2, r3
 80026a8:	4b38      	ldr	r3, [pc, #224]	@ (800278c <PID_ControlLoop+0x2d4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fd47 	bl	8001140 <__aeabi_f2iz>
 80026b2:	4605      	mov	r5, r0
 80026b4:	4b34      	ldr	r3, [pc, #208]	@ (8002788 <PID_ControlLoop+0x2d0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fd41 	bl	8001140 <__aeabi_f2iz>
 80026be:	4603      	mov	r3, r0
 80026c0:	462a      	mov	r2, r5
 80026c2:	4942      	ldr	r1, [pc, #264]	@ (80027cc <PID_ControlLoop+0x314>)
 80026c4:	4620      	mov	r0, r4
 80026c6:	f006 f98d 	bl	80089e4 <siprintf>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b3a      	ldr	r3, [pc, #232]	@ (80027b8 <PID_ControlLoop+0x300>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	4a39      	ldr	r2, [pc, #228]	@ (80027b8 <PID_ControlLoop+0x300>)
 80026d4:	6013      	str	r3, [r2, #0]
    uartBufferLength += sprintf(uartBuffer + uartBufferLength, "\"YawRate\":%d, \"YawOutput\":%d,", (int)yawRate, (int)motor_yaw_output);
 80026d6:	4b38      	ldr	r3, [pc, #224]	@ (80027b8 <PID_ControlLoop+0x300>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	4b37      	ldr	r3, [pc, #220]	@ (80027bc <PID_ControlLoop+0x304>)
 80026de:	18d4      	adds	r4, r2, r3
 80026e0:	4b32      	ldr	r3, [pc, #200]	@ (80027ac <PID_ControlLoop+0x2f4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fd2b 	bl	8001140 <__aeabi_f2iz>
 80026ea:	4605      	mov	r5, r0
 80026ec:	4b30      	ldr	r3, [pc, #192]	@ (80027b0 <PID_ControlLoop+0x2f8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fd25 	bl	8001140 <__aeabi_f2iz>
 80026f6:	4603      	mov	r3, r0
 80026f8:	462a      	mov	r2, r5
 80026fa:	4935      	ldr	r1, [pc, #212]	@ (80027d0 <PID_ControlLoop+0x318>)
 80026fc:	4620      	mov	r0, r4
 80026fe:	f006 f971 	bl	80089e4 <siprintf>
 8002702:	4602      	mov	r2, r0
 8002704:	4b2c      	ldr	r3, [pc, #176]	@ (80027b8 <PID_ControlLoop+0x300>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4413      	add	r3, r2
 800270a:	4a2b      	ldr	r2, [pc, #172]	@ (80027b8 <PID_ControlLoop+0x300>)
 800270c:	6013      	str	r3, [r2, #0]
    uartBufferLength += sprintf(uartBuffer + uartBufferLength, "\"Altitude\":%d", (int)altitude);
 800270e:	4b2a      	ldr	r3, [pc, #168]	@ (80027b8 <PID_ControlLoop+0x300>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	4b29      	ldr	r3, [pc, #164]	@ (80027bc <PID_ControlLoop+0x304>)
 8002716:	18d4      	adds	r4, r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7fe fd10 	bl	8001140 <__aeabi_f2iz>
 8002720:	4603      	mov	r3, r0
 8002722:	461a      	mov	r2, r3
 8002724:	492b      	ldr	r1, [pc, #172]	@ (80027d4 <PID_ControlLoop+0x31c>)
 8002726:	4620      	mov	r0, r4
 8002728:	f006 f95c 	bl	80089e4 <siprintf>
 800272c:	4602      	mov	r2, r0
 800272e:	4b22      	ldr	r3, [pc, #136]	@ (80027b8 <PID_ControlLoop+0x300>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4413      	add	r3, r2
 8002734:	4a20      	ldr	r2, [pc, #128]	@ (80027b8 <PID_ControlLoop+0x300>)
 8002736:	6013      	str	r3, [r2, #0]
    uartBufferLength += sprintf(uartBuffer + uartBufferLength, "}\n");
 8002738:	4b1f      	ldr	r3, [pc, #124]	@ (80027b8 <PID_ControlLoop+0x300>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	4b1f      	ldr	r3, [pc, #124]	@ (80027bc <PID_ControlLoop+0x304>)
 8002740:	4413      	add	r3, r2
 8002742:	4925      	ldr	r1, [pc, #148]	@ (80027d8 <PID_ControlLoop+0x320>)
 8002744:	4618      	mov	r0, r3
 8002746:	f006 f94d 	bl	80089e4 <siprintf>
 800274a:	4602      	mov	r2, r0
 800274c:	4b1a      	ldr	r3, [pc, #104]	@ (80027b8 <PID_ControlLoop+0x300>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4413      	add	r3, r2
 8002752:	4a19      	ldr	r2, [pc, #100]	@ (80027b8 <PID_ControlLoop+0x300>)
 8002754:	6013      	str	r3, [r2, #0]
    UART_sendString(uartBuffer);
 8002756:	4819      	ldr	r0, [pc, #100]	@ (80027bc <PID_ControlLoop+0x304>)
 8002758:	f000 fe5c 	bl	8003414 <UART_sendString>
    memset(uartBuffer, 0, sizeof(uartBuffer));
 800275c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002760:	2100      	movs	r1, #0
 8002762:	4816      	ldr	r0, [pc, #88]	@ (80027bc <PID_ControlLoop+0x304>)
 8002764:	f006 f9a1 	bl	8008aaa <memset>
    uartBufferLength=0;
 8002768:	4b13      	ldr	r3, [pc, #76]	@ (80027b8 <PID_ControlLoop+0x300>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bdb0      	pop	{r4, r5, r7, pc}
 8002776:	bf00      	nop
 8002778:	f5c28f5c 	.word	0xf5c28f5c
 800277c:	3fef5c28 	.word	0x3fef5c28
 8002780:	47ae147b 	.word	0x47ae147b
 8002784:	3f947ae1 	.word	0x3f947ae1
 8002788:	20000270 	.word	0x20000270
 800278c:	2000026c 	.word	0x2000026c
 8002790:	20000254 	.word	0x20000254
 8002794:	20000260 	.word	0x20000260
 8002798:	20000000 	.word	0x20000000
 800279c:	20000258 	.word	0x20000258
 80027a0:	20000264 	.word	0x20000264
 80027a4:	20000014 	.word	0x20000014
 80027a8:	2000025c 	.word	0x2000025c
 80027ac:	20000274 	.word	0x20000274
 80027b0:	20000268 	.word	0x20000268
 80027b4:	20000028 	.word	0x20000028
 80027b8:	20000480 	.word	0x20000480
 80027bc:	2000028c 	.word	0x2000028c
 80027c0:	0800bfc0 	.word	0x0800bfc0
 80027c4:	0800bfc4 	.word	0x0800bfc4
 80027c8:	0800bfec 	.word	0x0800bfec
 80027cc:	0800c010 	.word	0x0800c010
 80027d0:	0800c030 	.word	0x0800c030
 80027d4:	0800c050 	.word	0x0800c050
 80027d8:	0800c060 	.word	0x0800c060

080027dc <PID_updatePitch>:
void PID_updatePitch(float pitch){
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
	if(pitch!=desired_pitch){
 80027e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <PID_updatePitch+0x3c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4619      	mov	r1, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe fc60 	bl	80010b0 <__aeabi_fcmpeq>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d000      	beq.n	80027f8 <PID_updatePitch+0x1c>
			desired_pitch=pitch;
			pitch_pid.last_error=0;
			pitch_pid.integral=0;
		}
}
 80027f6:	e00a      	b.n	800280e <PID_updatePitch+0x32>
			desired_pitch=pitch;
 80027f8:	4a07      	ldr	r2, [pc, #28]	@ (8002818 <PID_updatePitch+0x3c>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6013      	str	r3, [r2, #0]
			pitch_pid.last_error=0;
 80027fe:	4b07      	ldr	r3, [pc, #28]	@ (800281c <PID_updatePitch+0x40>)
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	611a      	str	r2, [r3, #16]
			pitch_pid.integral=0;
 8002806:	4b05      	ldr	r3, [pc, #20]	@ (800281c <PID_updatePitch+0x40>)
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	60da      	str	r2, [r3, #12]
}
 800280e:	bf00      	nop
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000254 	.word	0x20000254
 800281c:	20000000 	.word	0x20000000

08002820 <PID_updateRoll>:
void PID_updateRoll(float roll){
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

	if(roll!=desired_roll){
 8002828:	4b0c      	ldr	r3, [pc, #48]	@ (800285c <PID_updateRoll+0x3c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4619      	mov	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe fc3e 	bl	80010b0 <__aeabi_fcmpeq>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d000      	beq.n	800283c <PID_updateRoll+0x1c>
		desired_roll=roll;
		roll_pid.last_error=0;
		roll_pid.integral=0;
	}
}
 800283a:	e00a      	b.n	8002852 <PID_updateRoll+0x32>
		desired_roll=roll;
 800283c:	4a07      	ldr	r2, [pc, #28]	@ (800285c <PID_updateRoll+0x3c>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6013      	str	r3, [r2, #0]
		roll_pid.last_error=0;
 8002842:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <PID_updateRoll+0x40>)
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
		roll_pid.integral=0;
 800284a:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <PID_updateRoll+0x40>)
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000258 	.word	0x20000258
 8002860:	20000014 	.word	0x20000014

08002864 <PID_updateYaw>:
void PID_updateYaw(float yaw){
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	if(yaw!=desired_yaw){
 800286c:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <PID_updateYaw+0x3c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4619      	mov	r1, r3
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe fc1c 	bl	80010b0 <__aeabi_fcmpeq>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d000      	beq.n	8002880 <PID_updateYaw+0x1c>
		desired_yaw=yaw;
		yaw_pid.last_error=0;
		yaw_pid.integral=0;
	}
}
 800287e:	e00a      	b.n	8002896 <PID_updateYaw+0x32>
		desired_yaw=yaw;
 8002880:	4a07      	ldr	r2, [pc, #28]	@ (80028a0 <PID_updateYaw+0x3c>)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6013      	str	r3, [r2, #0]
		yaw_pid.last_error=0;
 8002886:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <PID_updateYaw+0x40>)
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
		yaw_pid.integral=0;
 800288e:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <PID_updateYaw+0x40>)
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000025c 	.word	0x2000025c
 80028a4:	20000028 	.word	0x20000028

080028a8 <PID_Reset>:
void PID_Reset(){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	PID_Reset_Controller(&pitch_pid);
 80028ac:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <PID_Reset+0x1c>)
 80028ae:	f000 f80f 	bl	80028d0 <PID_Reset_Controller>
	PID_Reset_Controller(&roll_pid);
 80028b2:	4805      	ldr	r0, [pc, #20]	@ (80028c8 <PID_Reset+0x20>)
 80028b4:	f000 f80c 	bl	80028d0 <PID_Reset_Controller>
	PID_Reset_Controller(&yaw_pid);
 80028b8:	4804      	ldr	r0, [pc, #16]	@ (80028cc <PID_Reset+0x24>)
 80028ba:	f000 f809 	bl	80028d0 <PID_Reset_Controller>
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000
 80028c8:	20000014 	.word	0x20000014
 80028cc:	20000028 	.word	0x20000028

080028d0 <PID_Reset_Controller>:
void PID_Reset_Controller(PIDController* pid) {
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
    pid->kp = 0.0;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
    pid->ki = 0.0;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	605a      	str	r2, [r3, #4]
    pid->kd = 0.0;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	609a      	str	r2, [r3, #8]
    pid->integral = 0.0;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]
    pid->last_error = 0.0;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	611a      	str	r2, [r3, #16]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
	...

0800290c <PID_SetKP>:
void PID_SetKP(float kp) {
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b093      	sub	sp, #76	@ 0x4c
 8002910:	af02      	add	r7, sp, #8
 8002912:	6078      	str	r0, [r7, #4]
    char buffer[50];
    pitch_pid.kp = kp;
 8002914:	4a1b      	ldr	r2, [pc, #108]	@ (8002984 <PID_SetKP+0x78>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6013      	str	r3, [r2, #0]
    roll_pid.kp = kp;
 800291a:	4a1b      	ldr	r2, [pc, #108]	@ (8002988 <PID_SetKP+0x7c>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6013      	str	r3, [r2, #0]
    yaw_pid.kp=kp;
 8002920:	4a1a      	ldr	r2, [pc, #104]	@ (800298c <PID_SetKP+0x80>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6013      	str	r3, [r2, #0]
    int kp_int = (int)(kp * 10000);
 8002926:	491a      	ldr	r1, [pc, #104]	@ (8002990 <PID_SetKP+0x84>)
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7fe fa2d 	bl	8000d88 <__aeabi_fmul>
 800292e:	4603      	mov	r3, r0
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fc05 	bl	8001140 <__aeabi_f2iz>
 8002936:	4603      	mov	r3, r0
 8002938:	63fb      	str	r3, [r7, #60]	@ 0x3c
    snprintf(buffer, sizeof(buffer), "KP value=%d.%04d\n", kp_int / 10000, kp_int % 10000);
 800293a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800293c:	4a15      	ldr	r2, [pc, #84]	@ (8002994 <PID_SetKP+0x88>)
 800293e:	fb82 1203 	smull	r1, r2, r2, r3
 8002942:	1312      	asrs	r2, r2, #12
 8002944:	17db      	asrs	r3, r3, #31
 8002946:	1ad4      	subs	r4, r2, r3
 8002948:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800294a:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <PID_SetKP+0x88>)
 800294c:	fb83 1302 	smull	r1, r3, r3, r2
 8002950:	1319      	asrs	r1, r3, #12
 8002952:	17d3      	asrs	r3, r2, #31
 8002954:	1acb      	subs	r3, r1, r3
 8002956:	f242 7110 	movw	r1, #10000	@ 0x2710
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f107 0008 	add.w	r0, r7, #8
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	4623      	mov	r3, r4
 8002968:	4a0b      	ldr	r2, [pc, #44]	@ (8002998 <PID_SetKP+0x8c>)
 800296a:	2132      	movs	r1, #50	@ 0x32
 800296c:	f006 f806 	bl	800897c <sniprintf>
    UART_sendString(buffer);
 8002970:	f107 0308 	add.w	r3, r7, #8
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fd4d 	bl	8003414 <UART_sendString>
}
 800297a:	bf00      	nop
 800297c:	3744      	adds	r7, #68	@ 0x44
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}
 8002982:	bf00      	nop
 8002984:	20000000 	.word	0x20000000
 8002988:	20000014 	.word	0x20000014
 800298c:	20000028 	.word	0x20000028
 8002990:	461c4000 	.word	0x461c4000
 8002994:	68db8bad 	.word	0x68db8bad
 8002998:	0800c064 	.word	0x0800c064

0800299c <PID_SetKI>:

void PID_SetKI(float ki) {
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b093      	sub	sp, #76	@ 0x4c
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	6078      	str	r0, [r7, #4]
    char buffer[50];
    pitch_pid.ki = ki;
 80029a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a14 <PID_SetKI+0x78>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6053      	str	r3, [r2, #4]
    roll_pid.ki = ki;
 80029aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002a18 <PID_SetKI+0x7c>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6053      	str	r3, [r2, #4]
    yaw_pid.ki=ki;
 80029b0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a1c <PID_SetKI+0x80>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6053      	str	r3, [r2, #4]
    int ki_int = (int)(ki * 10000);
 80029b6:	491a      	ldr	r1, [pc, #104]	@ (8002a20 <PID_SetKI+0x84>)
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7fe f9e5 	bl	8000d88 <__aeabi_fmul>
 80029be:	4603      	mov	r3, r0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fbbd 	bl	8001140 <__aeabi_f2iz>
 80029c6:	4603      	mov	r3, r0
 80029c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    snprintf(buffer, sizeof(buffer), "KI value=%d.%04d\n", ki_int / 10000, ki_int % 10000);
 80029ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029cc:	4a15      	ldr	r2, [pc, #84]	@ (8002a24 <PID_SetKI+0x88>)
 80029ce:	fb82 1203 	smull	r1, r2, r2, r3
 80029d2:	1312      	asrs	r2, r2, #12
 80029d4:	17db      	asrs	r3, r3, #31
 80029d6:	1ad4      	subs	r4, r2, r3
 80029d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029da:	4b12      	ldr	r3, [pc, #72]	@ (8002a24 <PID_SetKI+0x88>)
 80029dc:	fb83 1302 	smull	r1, r3, r3, r2
 80029e0:	1319      	asrs	r1, r3, #12
 80029e2:	17d3      	asrs	r3, r2, #31
 80029e4:	1acb      	subs	r3, r1, r3
 80029e6:	f242 7110 	movw	r1, #10000	@ 0x2710
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f107 0008 	add.w	r0, r7, #8
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4623      	mov	r3, r4
 80029f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002a28 <PID_SetKI+0x8c>)
 80029fa:	2132      	movs	r1, #50	@ 0x32
 80029fc:	f005 ffbe 	bl	800897c <sniprintf>
    UART_sendString(buffer);
 8002a00:	f107 0308 	add.w	r3, r7, #8
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fd05 	bl	8003414 <UART_sendString>
}
 8002a0a:	bf00      	nop
 8002a0c:	3744      	adds	r7, #68	@ 0x44
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd90      	pop	{r4, r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000000 	.word	0x20000000
 8002a18:	20000014 	.word	0x20000014
 8002a1c:	20000028 	.word	0x20000028
 8002a20:	461c4000 	.word	0x461c4000
 8002a24:	68db8bad 	.word	0x68db8bad
 8002a28:	0800c078 	.word	0x0800c078

08002a2c <PID_SetKD>:

void PID_SetKD(float kd) {
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b093      	sub	sp, #76	@ 0x4c
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	6078      	str	r0, [r7, #4]
    char buffer[50];
    pitch_pid.kd = kd;
 8002a34:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa4 <PID_SetKD+0x78>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6093      	str	r3, [r2, #8]
    roll_pid.kd = kd;
 8002a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa8 <PID_SetKD+0x7c>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6093      	str	r3, [r2, #8]
    yaw_pid.kd=kd;
 8002a40:	4a1a      	ldr	r2, [pc, #104]	@ (8002aac <PID_SetKD+0x80>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6093      	str	r3, [r2, #8]
    int kd_int = (int)(kd * 10000);
 8002a46:	491a      	ldr	r1, [pc, #104]	@ (8002ab0 <PID_SetKD+0x84>)
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7fe f99d 	bl	8000d88 <__aeabi_fmul>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe fb75 	bl	8001140 <__aeabi_f2iz>
 8002a56:	4603      	mov	r3, r0
 8002a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    snprintf(buffer, sizeof(buffer), "KD value=%d.%04d\n", kd_int / 10000, kd_int % 10000);
 8002a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a5c:	4a15      	ldr	r2, [pc, #84]	@ (8002ab4 <PID_SetKD+0x88>)
 8002a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8002a62:	1312      	asrs	r2, r2, #12
 8002a64:	17db      	asrs	r3, r3, #31
 8002a66:	1ad4      	subs	r4, r2, r3
 8002a68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a6a:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <PID_SetKD+0x88>)
 8002a6c:	fb83 1302 	smull	r1, r3, r3, r2
 8002a70:	1319      	asrs	r1, r3, #12
 8002a72:	17d3      	asrs	r3, r2, #31
 8002a74:	1acb      	subs	r3, r1, r3
 8002a76:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f107 0008 	add.w	r0, r7, #8
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	4623      	mov	r3, r4
 8002a88:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab8 <PID_SetKD+0x8c>)
 8002a8a:	2132      	movs	r1, #50	@ 0x32
 8002a8c:	f005 ff76 	bl	800897c <sniprintf>
    UART_sendString(buffer);
 8002a90:	f107 0308 	add.w	r3, r7, #8
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fcbd 	bl	8003414 <UART_sendString>
}
 8002a9a:	bf00      	nop
 8002a9c:	3744      	adds	r7, #68	@ 0x44
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd90      	pop	{r4, r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	20000014 	.word	0x20000014
 8002aac:	20000028 	.word	0x20000028
 8002ab0:	461c4000 	.word	0x461c4000
 8002ab4:	68db8bad 	.word	0x68db8bad
 8002ab8:	0800c08c 	.word	0x0800c08c

08002abc <PID_SetYawKP>:

void PID_SetYawKP(float kp) {
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b093      	sub	sp, #76	@ 0x4c
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	6078      	str	r0, [r7, #4]
    char buffer[50];
    yaw_pid.kp = kp;
 8002ac4:	4a18      	ldr	r2, [pc, #96]	@ (8002b28 <PID_SetYawKP+0x6c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
    int kp_int = (int)(kp * 10000);
 8002aca:	4918      	ldr	r1, [pc, #96]	@ (8002b2c <PID_SetYawKP+0x70>)
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7fe f95b 	bl	8000d88 <__aeabi_fmul>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fb33 	bl	8001140 <__aeabi_f2iz>
 8002ada:	4603      	mov	r3, r0
 8002adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    snprintf(buffer, sizeof(buffer), "Yaw KP value=%d.%04d\n", kp_int / 10000, kp_int % 10000);
 8002ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ae0:	4a13      	ldr	r2, [pc, #76]	@ (8002b30 <PID_SetYawKP+0x74>)
 8002ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ae6:	1312      	asrs	r2, r2, #12
 8002ae8:	17db      	asrs	r3, r3, #31
 8002aea:	1ad4      	subs	r4, r2, r3
 8002aec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002aee:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <PID_SetYawKP+0x74>)
 8002af0:	fb83 1302 	smull	r1, r3, r3, r2
 8002af4:	1319      	asrs	r1, r3, #12
 8002af6:	17d3      	asrs	r3, r2, #31
 8002af8:	1acb      	subs	r3, r1, r3
 8002afa:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002afe:	fb01 f303 	mul.w	r3, r1, r3
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f107 0008 	add.w	r0, r7, #8
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	4a09      	ldr	r2, [pc, #36]	@ (8002b34 <PID_SetYawKP+0x78>)
 8002b0e:	2132      	movs	r1, #50	@ 0x32
 8002b10:	f005 ff34 	bl	800897c <sniprintf>
    UART_sendString(buffer);
 8002b14:	f107 0308 	add.w	r3, r7, #8
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 fc7b 	bl	8003414 <UART_sendString>
}
 8002b1e:	bf00      	nop
 8002b20:	3744      	adds	r7, #68	@ 0x44
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd90      	pop	{r4, r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000028 	.word	0x20000028
 8002b2c:	461c4000 	.word	0x461c4000
 8002b30:	68db8bad 	.word	0x68db8bad
 8002b34:	0800c0a0 	.word	0x0800c0a0

08002b38 <PID_SetYawKI>:


void PID_SetYawKI(float ki) {
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b093      	sub	sp, #76	@ 0x4c
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	6078      	str	r0, [r7, #4]
    char buffer[50];
    yaw_pid.ki = ki;
 8002b40:	4a18      	ldr	r2, [pc, #96]	@ (8002ba4 <PID_SetYawKI+0x6c>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6053      	str	r3, [r2, #4]
    int ki_int = (int)(ki * 10000);
 8002b46:	4918      	ldr	r1, [pc, #96]	@ (8002ba8 <PID_SetYawKI+0x70>)
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7fe f91d 	bl	8000d88 <__aeabi_fmul>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe faf5 	bl	8001140 <__aeabi_f2iz>
 8002b56:	4603      	mov	r3, r0
 8002b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    snprintf(buffer, sizeof(buffer), "Yaw KI value=%d.%04d\n", ki_int / 10000, ki_int % 10000);
 8002b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b5c:	4a13      	ldr	r2, [pc, #76]	@ (8002bac <PID_SetYawKI+0x74>)
 8002b5e:	fb82 1203 	smull	r1, r2, r2, r3
 8002b62:	1312      	asrs	r2, r2, #12
 8002b64:	17db      	asrs	r3, r3, #31
 8002b66:	1ad4      	subs	r4, r2, r3
 8002b68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b6a:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <PID_SetYawKI+0x74>)
 8002b6c:	fb83 1302 	smull	r1, r3, r3, r2
 8002b70:	1319      	asrs	r1, r3, #12
 8002b72:	17d3      	asrs	r3, r2, #31
 8002b74:	1acb      	subs	r3, r1, r3
 8002b76:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f107 0008 	add.w	r0, r7, #8
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	4623      	mov	r3, r4
 8002b88:	4a09      	ldr	r2, [pc, #36]	@ (8002bb0 <PID_SetYawKI+0x78>)
 8002b8a:	2132      	movs	r1, #50	@ 0x32
 8002b8c:	f005 fef6 	bl	800897c <sniprintf>
    UART_sendString(buffer);
 8002b90:	f107 0308 	add.w	r3, r7, #8
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fc3d 	bl	8003414 <UART_sendString>
}
 8002b9a:	bf00      	nop
 8002b9c:	3744      	adds	r7, #68	@ 0x44
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd90      	pop	{r4, r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000028 	.word	0x20000028
 8002ba8:	461c4000 	.word	0x461c4000
 8002bac:	68db8bad 	.word	0x68db8bad
 8002bb0:	0800c0b8 	.word	0x0800c0b8

08002bb4 <PID_SetYawKD>:

void PID_SetYawKD(float kd) {
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b093      	sub	sp, #76	@ 0x4c
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	6078      	str	r0, [r7, #4]
    char buffer[50];
    yaw_pid.kd = kd;
 8002bbc:	4a18      	ldr	r2, [pc, #96]	@ (8002c20 <PID_SetYawKD+0x6c>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6093      	str	r3, [r2, #8]
    int kd_int = (int)(kd * 10000);
 8002bc2:	4918      	ldr	r1, [pc, #96]	@ (8002c24 <PID_SetYawKD+0x70>)
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fe f8df 	bl	8000d88 <__aeabi_fmul>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fab7 	bl	8001140 <__aeabi_f2iz>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    snprintf(buffer, sizeof(buffer), "Yaw KD value=%d.%04d\n", kd_int / 10000, kd_int % 10000);
 8002bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bd8:	4a13      	ldr	r2, [pc, #76]	@ (8002c28 <PID_SetYawKD+0x74>)
 8002bda:	fb82 1203 	smull	r1, r2, r2, r3
 8002bde:	1312      	asrs	r2, r2, #12
 8002be0:	17db      	asrs	r3, r3, #31
 8002be2:	1ad4      	subs	r4, r2, r3
 8002be4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002be6:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <PID_SetYawKD+0x74>)
 8002be8:	fb83 1302 	smull	r1, r3, r3, r2
 8002bec:	1319      	asrs	r1, r3, #12
 8002bee:	17d3      	asrs	r3, r2, #31
 8002bf0:	1acb      	subs	r3, r1, r3
 8002bf2:	f242 7110 	movw	r1, #10000	@ 0x2710
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f107 0008 	add.w	r0, r7, #8
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	4623      	mov	r3, r4
 8002c04:	4a09      	ldr	r2, [pc, #36]	@ (8002c2c <PID_SetYawKD+0x78>)
 8002c06:	2132      	movs	r1, #50	@ 0x32
 8002c08:	f005 feb8 	bl	800897c <sniprintf>
    UART_sendString(buffer);
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fbff 	bl	8003414 <UART_sendString>
}
 8002c16:	bf00      	nop
 8002c18:	3744      	adds	r7, #68	@ 0x44
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd90      	pop	{r4, r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000028 	.word	0x20000028
 8002c24:	461c4000 	.word	0x461c4000
 8002c28:	68db8bad 	.word	0x68db8bad
 8002c2c:	0800c0d0 	.word	0x0800c0d0

08002c30 <Controller_executeCommand>:
#include <string.h>
#include "UART.h"
#include "motor.h"
#include "PID.h"
#include "main.h"
void Controller_executeCommand(char* data){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b098      	sub	sp, #96	@ 0x60
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	char* token=strtok(data,"$");
 8002c38:	499a      	ldr	r1, [pc, #616]	@ (8002ea4 <Controller_executeCommand+0x274>)
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f005 ff50 	bl	8008ae0 <strtok>
 8002c40:	65f8      	str	r0, [r7, #92]	@ 0x5c
	if (token != NULL && strcmp(token, "#MOTOR") == 0) {
 8002c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8091 	beq.w	8002d6c <Controller_executeCommand+0x13c>
 8002c4a:	4997      	ldr	r1, [pc, #604]	@ (8002ea8 <Controller_executeCommand+0x278>)
 8002c4c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002c4e:	f7fd fa7f 	bl	8000150 <strcmp>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 8089 	bne.w	8002d6c <Controller_executeCommand+0x13c>
        token = strtok(NULL, "$");
 8002c5a:	4992      	ldr	r1, [pc, #584]	@ (8002ea4 <Controller_executeCommand+0x274>)
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f005 ff3f 	bl	8008ae0 <strtok>
 8002c62:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (token != NULL)
 8002c64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d013      	beq.n	8002c92 <Controller_executeCommand+0x62>
        {
            char* endptr;
            int speed = strtol(token, &endptr, 10);
 8002c6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c6e:	220a      	movs	r2, #10
 8002c70:	4619      	mov	r1, r3
 8002c72:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002c74:	f005 fdb6 	bl	80087e4 <strtol>
 8002c78:	65b8      	str	r0, [r7, #88]	@ 0x58
            if (*endptr != '\0')
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <Controller_executeCommand+0x5a>
            {
                UART_sendString("Invalid speed value\n");
 8002c82:	488a      	ldr	r0, [pc, #552]	@ (8002eac <Controller_executeCommand+0x27c>)
 8002c84:	f000 fbc6 	bl	8003414 <UART_sendString>
 8002c88:	e006      	b.n	8002c98 <Controller_executeCommand+0x68>
            }
            else
            {
                Motor_setSpeedAll(speed);
 8002c8a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002c8c:	f000 fd50 	bl	8003730 <Motor_setSpeedAll>
 8002c90:	e002      	b.n	8002c98 <Controller_executeCommand+0x68>
            }
        }
        else
        {
            UART_sendString("Speed value missing\n");
 8002c92:	4887      	ldr	r0, [pc, #540]	@ (8002eb0 <Controller_executeCommand+0x280>)
 8002c94:	f000 fbbe 	bl	8003414 <UART_sendString>
        }

        token = strtok(NULL, "$");
 8002c98:	4982      	ldr	r1, [pc, #520]	@ (8002ea4 <Controller_executeCommand+0x274>)
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f005 ff20 	bl	8008ae0 <strtok>
 8002ca0:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (token != NULL)
 8002ca2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d017      	beq.n	8002cd8 <Controller_executeCommand+0xa8>
        {
            char* endptr;
            int roll = strtol(token, &endptr, 10);
 8002ca8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cac:	220a      	movs	r2, #10
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002cb2:	f005 fd97 	bl	80087e4 <strtol>
 8002cb6:	6578      	str	r0, [r7, #84]	@ 0x54
            if (*endptr != '\0')
 8002cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <Controller_executeCommand+0x98>
            {
                UART_sendString("Invalid roll value\n");
 8002cc0:	487c      	ldr	r0, [pc, #496]	@ (8002eb4 <Controller_executeCommand+0x284>)
 8002cc2:	f000 fba7 	bl	8003414 <UART_sendString>
 8002cc6:	e00a      	b.n	8002cde <Controller_executeCommand+0xae>
            }
            else
            {
                PID_updateRoll(roll);
 8002cc8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002cca:	f7fe f809 	bl	8000ce0 <__aeabi_i2f>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fda5 	bl	8002820 <PID_updateRoll>
 8002cd6:	e002      	b.n	8002cde <Controller_executeCommand+0xae>
            }
        }
        else
        {
            UART_sendString("Roll value missing\n");
 8002cd8:	4877      	ldr	r0, [pc, #476]	@ (8002eb8 <Controller_executeCommand+0x288>)
 8002cda:	f000 fb9b 	bl	8003414 <UART_sendString>
        }

        token = strtok(NULL, "$");
 8002cde:	4971      	ldr	r1, [pc, #452]	@ (8002ea4 <Controller_executeCommand+0x274>)
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f005 fefd 	bl	8008ae0 <strtok>
 8002ce6:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (token != NULL)
 8002ce8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d017      	beq.n	8002d1e <Controller_executeCommand+0xee>
        {
            char* endptr;
            int pitch = strtol(token, &endptr, 10);
 8002cee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002cf2:	220a      	movs	r2, #10
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002cf8:	f005 fd74 	bl	80087e4 <strtol>
 8002cfc:	6538      	str	r0, [r7, #80]	@ 0x50
            if (*endptr != '\0')
 8002cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <Controller_executeCommand+0xde>
            {
                UART_sendString("Invalid pitch value\n");
 8002d06:	486d      	ldr	r0, [pc, #436]	@ (8002ebc <Controller_executeCommand+0x28c>)
 8002d08:	f000 fb84 	bl	8003414 <UART_sendString>
 8002d0c:	e00a      	b.n	8002d24 <Controller_executeCommand+0xf4>
            }
            else
            {
                PID_updatePitch(pitch);
 8002d0e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002d10:	f7fd ffe6 	bl	8000ce0 <__aeabi_i2f>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fd60 	bl	80027dc <PID_updatePitch>
 8002d1c:	e002      	b.n	8002d24 <Controller_executeCommand+0xf4>

            }
        }
        else
        {
            UART_sendString("Pitch value missing\n");
 8002d1e:	4868      	ldr	r0, [pc, #416]	@ (8002ec0 <Controller_executeCommand+0x290>)
 8002d20:	f000 fb78 	bl	8003414 <UART_sendString>
        }
        token = strtok(NULL, "$");
 8002d24:	495f      	ldr	r1, [pc, #380]	@ (8002ea4 <Controller_executeCommand+0x274>)
 8002d26:	2000      	movs	r0, #0
 8002d28:	f005 feda 	bl	8008ae0 <strtok>
 8002d2c:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (token != NULL)
 8002d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d017      	beq.n	8002d64 <Controller_executeCommand+0x134>
        {
            char* endptr;
            int yaw = strtol(token, &endptr, 10);
 8002d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d38:	220a      	movs	r2, #10
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002d3e:	f005 fd51 	bl	80087e4 <strtol>
 8002d42:	64f8      	str	r0, [r7, #76]	@ 0x4c
            if (*endptr != '\0')
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <Controller_executeCommand+0x124>
            {
                UART_sendString("Invalid yaw value\n");
 8002d4c:	485d      	ldr	r0, [pc, #372]	@ (8002ec4 <Controller_executeCommand+0x294>)
 8002d4e:	f000 fb61 	bl	8003414 <UART_sendString>
        if (token != NULL)
 8002d52:	e12f      	b.n	8002fb4 <Controller_executeCommand+0x384>
            }
            else
            {
            	PID_updateYaw(yaw);
 8002d54:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002d56:	f7fd ffc3 	bl	8000ce0 <__aeabi_i2f>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fd81 	bl	8002864 <PID_updateYaw>
        if (token != NULL)
 8002d62:	e127      	b.n	8002fb4 <Controller_executeCommand+0x384>

            }
        }
        else
        {
            UART_sendString("yaw value missing\n");
 8002d64:	4858      	ldr	r0, [pc, #352]	@ (8002ec8 <Controller_executeCommand+0x298>)
 8002d66:	f000 fb55 	bl	8003414 <UART_sendString>
        if (token != NULL)
 8002d6a:	e123      	b.n	8002fb4 <Controller_executeCommand+0x384>
        }
	}
	else{
	    if (token != NULL && strcmp(token, "#SET") == 0) {
 8002d6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80ff 	beq.w	8002f72 <Controller_executeCommand+0x342>
 8002d74:	4955      	ldr	r1, [pc, #340]	@ (8002ecc <Controller_executeCommand+0x29c>)
 8002d76:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002d78:	f7fd f9ea 	bl	8000150 <strcmp>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f040 80f7 	bne.w	8002f72 <Controller_executeCommand+0x342>
	        token = strtok(NULL, "$");
 8002d84:	4947      	ldr	r1, [pc, #284]	@ (8002ea4 <Controller_executeCommand+0x274>)
 8002d86:	2000      	movs	r0, #0
 8002d88:	f005 feaa 	bl	8008ae0 <strtok>
 8002d8c:	65f8      	str	r0, [r7, #92]	@ 0x5c
	        if (token != NULL && strcmp(token, "PID") == 0) {
 8002d8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d060      	beq.n	8002e56 <Controller_executeCommand+0x226>
 8002d94:	494e      	ldr	r1, [pc, #312]	@ (8002ed0 <Controller_executeCommand+0x2a0>)
 8002d96:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002d98:	f7fd f9da 	bl	8000150 <strcmp>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d159      	bne.n	8002e56 <Controller_executeCommand+0x226>

	            token = strtok(NULL, "$");
 8002da2:	4940      	ldr	r1, [pc, #256]	@ (8002ea4 <Controller_executeCommand+0x274>)
 8002da4:	2000      	movs	r0, #0
 8002da6:	f005 fe9b 	bl	8008ae0 <strtok>
 8002daa:	65f8      	str	r0, [r7, #92]	@ 0x5c
	            if (token != NULL) {
 8002dac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d012      	beq.n	8002dd8 <Controller_executeCommand+0x1a8>
	                char* endptr;
	                float kp = strtof(token, &endptr);
 8002db2:	f107 0320 	add.w	r3, r7, #32
 8002db6:	4619      	mov	r1, r3
 8002db8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002dba:	f005 fc41 	bl	8008640 <strtof>
 8002dbe:	64b8      	str	r0, [r7, #72]	@ 0x48
	                if (*endptr != '\0') {
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <Controller_executeCommand+0x1a0>
	                    UART_sendString("Invalid KP value\n");
 8002dc8:	4842      	ldr	r0, [pc, #264]	@ (8002ed4 <Controller_executeCommand+0x2a4>)
 8002dca:	f000 fb23 	bl	8003414 <UART_sendString>
 8002dce:	e0f1      	b.n	8002fb4 <Controller_executeCommand+0x384>
	                    return;
	                }
	                PID_SetKP(kp);
 8002dd0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002dd2:	f7ff fd9b 	bl	800290c <PID_SetKP>
 8002dd6:	e002      	b.n	8002dde <Controller_executeCommand+0x1ae>
	            } else {
	                UART_sendString("KP value missing\n");
 8002dd8:	483f      	ldr	r0, [pc, #252]	@ (8002ed8 <Controller_executeCommand+0x2a8>)
 8002dda:	f000 fb1b 	bl	8003414 <UART_sendString>
	            }
	            // Process KI value
	            token = strtok(NULL, "$");
 8002dde:	4931      	ldr	r1, [pc, #196]	@ (8002ea4 <Controller_executeCommand+0x274>)
 8002de0:	2000      	movs	r0, #0
 8002de2:	f005 fe7d 	bl	8008ae0 <strtok>
 8002de6:	65f8      	str	r0, [r7, #92]	@ 0x5c
	            if (token != NULL) {
 8002de8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d011      	beq.n	8002e12 <Controller_executeCommand+0x1e2>
	                char* endptr;
	                float ki = strtof(token, &endptr);
 8002dee:	f107 031c 	add.w	r3, r7, #28
 8002df2:	4619      	mov	r1, r3
 8002df4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002df6:	f005 fc23 	bl	8008640 <strtof>
 8002dfa:	6478      	str	r0, [r7, #68]	@ 0x44
	                if (*endptr != '\0') {
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <Controller_executeCommand+0x1da>
	                    UART_sendString("Invalid KI value\n");
 8002e04:	4835      	ldr	r0, [pc, #212]	@ (8002edc <Controller_executeCommand+0x2ac>)
 8002e06:	f000 fb05 	bl	8003414 <UART_sendString>
	                }
	                PID_SetKI(ki);
 8002e0a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002e0c:	f7ff fdc6 	bl	800299c <PID_SetKI>
 8002e10:	e002      	b.n	8002e18 <Controller_executeCommand+0x1e8>
	            } else {
	                UART_sendString("KI value missing\n");
 8002e12:	4833      	ldr	r0, [pc, #204]	@ (8002ee0 <Controller_executeCommand+0x2b0>)
 8002e14:	f000 fafe 	bl	8003414 <UART_sendString>
	            }

	            // Process KD value
	            token = strtok(NULL, "$");
 8002e18:	4922      	ldr	r1, [pc, #136]	@ (8002ea4 <Controller_executeCommand+0x274>)
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f005 fe60 	bl	8008ae0 <strtok>
 8002e20:	65f8      	str	r0, [r7, #92]	@ 0x5c
	            if (token != NULL) {
 8002e22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d012      	beq.n	8002e4e <Controller_executeCommand+0x21e>
	                char* endptr;
	                float kd = strtof(token, &endptr);
 8002e28:	f107 0318 	add.w	r3, r7, #24
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002e30:	f005 fc06 	bl	8008640 <strtof>
 8002e34:	6438      	str	r0, [r7, #64]	@ 0x40
	                if (*endptr != '\0') {
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <Controller_executeCommand+0x216>
	                    UART_sendString("Invalid KD value\n");
 8002e3e:	4829      	ldr	r0, [pc, #164]	@ (8002ee4 <Controller_executeCommand+0x2b4>)
 8002e40:	f000 fae8 	bl	8003414 <UART_sendString>
 8002e44:	e0b6      	b.n	8002fb4 <Controller_executeCommand+0x384>
	                    return;
	                }
	                PID_SetKD(kd);
 8002e46:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002e48:	f7ff fdf0 	bl	8002a2c <PID_SetKD>
	            if (token != NULL) {
 8002e4c:	e090      	b.n	8002f70 <Controller_executeCommand+0x340>
	            } else {
	                UART_sendString("KD value missing\n");
 8002e4e:	4826      	ldr	r0, [pc, #152]	@ (8002ee8 <Controller_executeCommand+0x2b8>)
 8002e50:	f000 fae0 	bl	8003414 <UART_sendString>
	            if (token != NULL) {
 8002e54:	e08c      	b.n	8002f70 <Controller_executeCommand+0x340>
	            }

	        }
	        else{
		        if (token != NULL && strcmp(token, "YAW") == 0) {
 8002e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80aa 	beq.w	8002fb2 <Controller_executeCommand+0x382>
 8002e5e:	4923      	ldr	r1, [pc, #140]	@ (8002eec <Controller_executeCommand+0x2bc>)
 8002e60:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002e62:	f7fd f975 	bl	8000150 <strcmp>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f040 80a2 	bne.w	8002fb2 <Controller_executeCommand+0x382>

		            token = strtok(NULL, "$");
 8002e6e:	490d      	ldr	r1, [pc, #52]	@ (8002ea4 <Controller_executeCommand+0x274>)
 8002e70:	2000      	movs	r0, #0
 8002e72:	f005 fe35 	bl	8008ae0 <strtok>
 8002e76:	65f8      	str	r0, [r7, #92]	@ 0x5c
		            if (token != NULL) {
 8002e78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d038      	beq.n	8002ef0 <Controller_executeCommand+0x2c0>
		                char* endptr;
		                float kp = strtof(token, &endptr);
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	4619      	mov	r1, r3
 8002e84:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002e86:	f005 fbdb 	bl	8008640 <strtof>
 8002e8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
		                if (*endptr != '\0') {
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <Controller_executeCommand+0x26c>
		                    UART_sendString("Invalid KP value\n");
 8002e94:	480f      	ldr	r0, [pc, #60]	@ (8002ed4 <Controller_executeCommand+0x2a4>)
 8002e96:	f000 fabd 	bl	8003414 <UART_sendString>
 8002e9a:	e08b      	b.n	8002fb4 <Controller_executeCommand+0x384>
		                    return;
		                }
		                PID_SetYawKP(kp);
 8002e9c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002e9e:	f7ff fe0d 	bl	8002abc <PID_SetYawKP>
 8002ea2:	e028      	b.n	8002ef6 <Controller_executeCommand+0x2c6>
 8002ea4:	0800c0e8 	.word	0x0800c0e8
 8002ea8:	0800c0ec 	.word	0x0800c0ec
 8002eac:	0800c0f4 	.word	0x0800c0f4
 8002eb0:	0800c10c 	.word	0x0800c10c
 8002eb4:	0800c124 	.word	0x0800c124
 8002eb8:	0800c138 	.word	0x0800c138
 8002ebc:	0800c14c 	.word	0x0800c14c
 8002ec0:	0800c164 	.word	0x0800c164
 8002ec4:	0800c17c 	.word	0x0800c17c
 8002ec8:	0800c190 	.word	0x0800c190
 8002ecc:	0800c1a4 	.word	0x0800c1a4
 8002ed0:	0800c1ac 	.word	0x0800c1ac
 8002ed4:	0800c1b0 	.word	0x0800c1b0
 8002ed8:	0800c1c4 	.word	0x0800c1c4
 8002edc:	0800c1d8 	.word	0x0800c1d8
 8002ee0:	0800c1ec 	.word	0x0800c1ec
 8002ee4:	0800c200 	.word	0x0800c200
 8002ee8:	0800c214 	.word	0x0800c214
 8002eec:	0800c228 	.word	0x0800c228
		            } else {
		                UART_sendString("KP value missing\n");
 8002ef0:	4832      	ldr	r0, [pc, #200]	@ (8002fbc <Controller_executeCommand+0x38c>)
 8002ef2:	f000 fa8f 	bl	8003414 <UART_sendString>
		            }

		            // Process KI value
		            token = strtok(NULL, "$");
 8002ef6:	4932      	ldr	r1, [pc, #200]	@ (8002fc0 <Controller_executeCommand+0x390>)
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f005 fdf1 	bl	8008ae0 <strtok>
 8002efe:	65f8      	str	r0, [r7, #92]	@ 0x5c
		            if (token != NULL) {
 8002f00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d012      	beq.n	8002f2c <Controller_executeCommand+0x2fc>
		                char* endptr;
		                float ki = strtof(token, &endptr);
 8002f06:	f107 0310 	add.w	r3, r7, #16
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002f0e:	f005 fb97 	bl	8008640 <strtof>
 8002f12:	63b8      	str	r0, [r7, #56]	@ 0x38
		                if (*endptr != '\0') {
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <Controller_executeCommand+0x2f4>
		                    UART_sendString("Invalid KI value\n");
 8002f1c:	4829      	ldr	r0, [pc, #164]	@ (8002fc4 <Controller_executeCommand+0x394>)
 8002f1e:	f000 fa79 	bl	8003414 <UART_sendString>
 8002f22:	e047      	b.n	8002fb4 <Controller_executeCommand+0x384>
		                    return;
		                }
		                PID_SetYawKI(ki);
 8002f24:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002f26:	f7ff fe07 	bl	8002b38 <PID_SetYawKI>
 8002f2a:	e002      	b.n	8002f32 <Controller_executeCommand+0x302>
		            } else {
		                UART_sendString("KI value missing\n");
 8002f2c:	4826      	ldr	r0, [pc, #152]	@ (8002fc8 <Controller_executeCommand+0x398>)
 8002f2e:	f000 fa71 	bl	8003414 <UART_sendString>
		            }

		            // Process KD value
		            token = strtok(NULL, "$");
 8002f32:	4923      	ldr	r1, [pc, #140]	@ (8002fc0 <Controller_executeCommand+0x390>)
 8002f34:	2000      	movs	r0, #0
 8002f36:	f005 fdd3 	bl	8008ae0 <strtok>
 8002f3a:	65f8      	str	r0, [r7, #92]	@ 0x5c
		            if (token != NULL) {
 8002f3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d012      	beq.n	8002f68 <Controller_executeCommand+0x338>
		                char* endptr;
		                float kd = strtof(token, &endptr);
 8002f42:	f107 030c 	add.w	r3, r7, #12
 8002f46:	4619      	mov	r1, r3
 8002f48:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002f4a:	f005 fb79 	bl	8008640 <strtof>
 8002f4e:	6378      	str	r0, [r7, #52]	@ 0x34
		                if (*endptr != '\0') {
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <Controller_executeCommand+0x330>
		                    UART_sendString("Invalid KD value\n");
 8002f58:	481c      	ldr	r0, [pc, #112]	@ (8002fcc <Controller_executeCommand+0x39c>)
 8002f5a:	f000 fa5b 	bl	8003414 <UART_sendString>
 8002f5e:	e029      	b.n	8002fb4 <Controller_executeCommand+0x384>
		                    return;
		                }
		                PID_SetYawKD(kd);
 8002f60:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f62:	f7ff fe27 	bl	8002bb4 <PID_SetYawKD>
	        if (token != NULL && strcmp(token, "PID") == 0) {
 8002f66:	e024      	b.n	8002fb2 <Controller_executeCommand+0x382>
		            } else {
		                UART_sendString("KD value missing\n");
 8002f68:	4819      	ldr	r0, [pc, #100]	@ (8002fd0 <Controller_executeCommand+0x3a0>)
 8002f6a:	f000 fa53 	bl	8003414 <UART_sendString>
	        if (token != NULL && strcmp(token, "PID") == 0) {
 8002f6e:	e020      	b.n	8002fb2 <Controller_executeCommand+0x382>
 8002f70:	e01f      	b.n	8002fb2 <Controller_executeCommand+0x382>
	        }

	    }

	    else {
	    	 if (token != NULL && strcmp(token, "#RESET") == 0) {
 8002f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01d      	beq.n	8002fb4 <Controller_executeCommand+0x384>
 8002f78:	4916      	ldr	r1, [pc, #88]	@ (8002fd4 <Controller_executeCommand+0x3a4>)
 8002f7a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002f7c:	f7fd f8e8 	bl	8000150 <strcmp>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d116      	bne.n	8002fb4 <Controller_executeCommand+0x384>
	    		 token = strtok(NULL, "$");
 8002f86:	490e      	ldr	r1, [pc, #56]	@ (8002fc0 <Controller_executeCommand+0x390>)
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f005 fda9 	bl	8008ae0 <strtok>
 8002f8e:	65f8      	str	r0, [r7, #92]	@ 0x5c
	    			        if (token != NULL && strcmp(token, "PID") == 0) {
 8002f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <Controller_executeCommand+0x37a>
 8002f96:	4910      	ldr	r1, [pc, #64]	@ (8002fd8 <Controller_executeCommand+0x3a8>)
 8002f98:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002f9a:	f7fd f8d9 	bl	8000150 <strcmp>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <Controller_executeCommand+0x37a>
	    			        	PID_Reset();
 8002fa4:	f7ff fc80 	bl	80028a8 <PID_Reset>
 8002fa8:	e004      	b.n	8002fb4 <Controller_executeCommand+0x384>
	    			        }
	    			        else{
	    			            UART_sendString("Invalid command after #RESET\n");
 8002faa:	480c      	ldr	r0, [pc, #48]	@ (8002fdc <Controller_executeCommand+0x3ac>)
 8002fac:	f000 fa32 	bl	8003414 <UART_sendString>
 8002fb0:	e000      	b.n	8002fb4 <Controller_executeCommand+0x384>
	        if (token != NULL && strcmp(token, "PID") == 0) {
 8002fb2:	bf00      	nop
	    			        }
	    	 }
	    }
	}

}
 8002fb4:	3760      	adds	r7, #96	@ 0x60
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	0800c1c4 	.word	0x0800c1c4
 8002fc0:	0800c0e8 	.word	0x0800c0e8
 8002fc4:	0800c1d8 	.word	0x0800c1d8
 8002fc8:	0800c1ec 	.word	0x0800c1ec
 8002fcc:	0800c200 	.word	0x0800c200
 8002fd0:	0800c214 	.word	0x0800c214
 8002fd4:	0800c22c 	.word	0x0800c22c
 8002fd8:	0800c1ac 	.word	0x0800c1ac
 8002fdc:	0800c234 	.word	0x0800c234

08002fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fe6:	f000 fea9 	bl	8003d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fea:	f000 f849 	bl	8003080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fee:	f000 f95b 	bl	80032a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002ff2:	f000 f8dd 	bl	80031b0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002ff6:	f000 f92d 	bl	8003254 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8002ffa:	f000 f8ab 	bl	8003154 <MX_I2C2_Init>
  MX_I2C1_Init();
 8002ffe:	f000 f87b 	bl	80030f8 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  Motor_Init();
 8003002:	f000 fa2f 	bl	8003464 <Motor_Init>
  //pair();
  mpu.hi2c = &hi2c2;
 8003006:	4b18      	ldr	r3, [pc, #96]	@ (8003068 <main+0x88>)
 8003008:	4a18      	ldr	r2, [pc, #96]	@ (800306c <main+0x8c>)
 800300a:	601a      	str	r2, [r3, #0]
  HAL_Delay(2000);
 800300c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003010:	f000 fef6 	bl	8003e00 <HAL_Delay>
  MPU6050_Init(&mpu);
 8003014:	4814      	ldr	r0, [pc, #80]	@ (8003068 <main+0x88>)
 8003016:	f7fe ffcb 	bl	8001fb0 <MPU6050_Init>
  HAL_Delay(1000);
 800301a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800301e:	f000 feef 	bl	8003e00 <HAL_Delay>
  HAL_UART_Receive_IT(&huart2, &rx_buffer[bufferIndex], 1);
 8003022:	4b13      	ldr	r3, [pc, #76]	@ (8003070 <main+0x90>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	4b12      	ldr	r3, [pc, #72]	@ (8003074 <main+0x94>)
 800302a:	4413      	add	r3, r2
 800302c:	2201      	movs	r2, #1
 800302e:	4619      	mov	r1, r3
 8003030:	4811      	ldr	r0, [pc, #68]	@ (8003078 <main+0x98>)
 8003032:	f003 fef8 	bl	8006e26 <HAL_UART_Receive_IT>
  BMP280_Init(&hi2c1);
 8003036:	4811      	ldr	r0, [pc, #68]	@ (800307c <main+0x9c>)
 8003038:	f7fe fa8c 	bl	8001554 <BMP280_Init>
  HAL_Delay(1000);
 800303c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003040:	f000 fede 	bl	8003e00 <HAL_Delay>
  BMP280_CalibData calibData;
  BMP280_ReadCalibrationData(&hi2c1, &calibData);
 8003044:	463b      	mov	r3, r7
 8003046:	4619      	mov	r1, r3
 8003048:	480c      	ldr	r0, [pc, #48]	@ (800307c <main+0x9c>)
 800304a:	f7fe fb2b 	bl	80016a4 <BMP280_ReadCalibrationData>
  HAL_Delay(1000);
 800304e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003052:	f000 fed5 	bl	8003e00 <HAL_Delay>
  PID_init();
 8003056:	f7ff f945 	bl	80022e4 <PID_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PID_ControlLoop();
 800305a:	f7ff fa2d 	bl	80024b8 <PID_ControlLoop>
	  HAL_Delay(10);
 800305e:	200a      	movs	r0, #10
 8003060:	f000 fece 	bl	8003e00 <HAL_Delay>
	  PID_ControlLoop();
 8003064:	bf00      	nop
 8003066:	e7f8      	b.n	800305a <main+0x7a>
 8003068:	20000620 	.word	0x20000620
 800306c:	200004d8 	.word	0x200004d8
 8003070:	2000061e 	.word	0x2000061e
 8003074:	200005ec 	.word	0x200005ec
 8003078:	20000574 	.word	0x20000574
 800307c:	20000484 	.word	0x20000484

08003080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b090      	sub	sp, #64	@ 0x40
 8003084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003086:	f107 0318 	add.w	r3, r7, #24
 800308a:	2228      	movs	r2, #40	@ 0x28
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f005 fd0b 	bl	8008aaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003094:	1d3b      	adds	r3, r7, #4
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	60da      	str	r2, [r3, #12]
 80030a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030a2:	2302      	movs	r3, #2
 80030a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030a6:	2301      	movs	r3, #1
 80030a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030aa:	2310      	movs	r3, #16
 80030ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b2:	f107 0318 	add.w	r3, r7, #24
 80030b6:	4618      	mov	r0, r3
 80030b8:	f002 fbfc 	bl	80058b4 <HAL_RCC_OscConfig>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80030c2:	f000 f9c1 	bl	8003448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030c6:	230f      	movs	r3, #15
 80030c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	2100      	movs	r1, #0
 80030de:	4618      	mov	r0, r3
 80030e0:	f002 fe6a 	bl	8005db8 <HAL_RCC_ClockConfig>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80030ea:	f000 f9ad 	bl	8003448 <Error_Handler>
  }
}
 80030ee:	bf00      	nop
 80030f0:	3740      	adds	r7, #64	@ 0x40
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030fc:	4b12      	ldr	r3, [pc, #72]	@ (8003148 <MX_I2C1_Init+0x50>)
 80030fe:	4a13      	ldr	r2, [pc, #76]	@ (800314c <MX_I2C1_Init+0x54>)
 8003100:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003102:	4b11      	ldr	r3, [pc, #68]	@ (8003148 <MX_I2C1_Init+0x50>)
 8003104:	4a12      	ldr	r2, [pc, #72]	@ (8003150 <MX_I2C1_Init+0x58>)
 8003106:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003108:	4b0f      	ldr	r3, [pc, #60]	@ (8003148 <MX_I2C1_Init+0x50>)
 800310a:	2200      	movs	r2, #0
 800310c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800310e:	4b0e      	ldr	r3, [pc, #56]	@ (8003148 <MX_I2C1_Init+0x50>)
 8003110:	2200      	movs	r2, #0
 8003112:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003114:	4b0c      	ldr	r3, [pc, #48]	@ (8003148 <MX_I2C1_Init+0x50>)
 8003116:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800311a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800311c:	4b0a      	ldr	r3, [pc, #40]	@ (8003148 <MX_I2C1_Init+0x50>)
 800311e:	2200      	movs	r2, #0
 8003120:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003122:	4b09      	ldr	r3, [pc, #36]	@ (8003148 <MX_I2C1_Init+0x50>)
 8003124:	2200      	movs	r2, #0
 8003126:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003128:	4b07      	ldr	r3, [pc, #28]	@ (8003148 <MX_I2C1_Init+0x50>)
 800312a:	2200      	movs	r2, #0
 800312c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800312e:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <MX_I2C1_Init+0x50>)
 8003130:	2200      	movs	r2, #0
 8003132:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003134:	4804      	ldr	r0, [pc, #16]	@ (8003148 <MX_I2C1_Init+0x50>)
 8003136:	f001 f9e3 	bl	8004500 <HAL_I2C_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003140:	f000 f982 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000484 	.word	0x20000484
 800314c:	40005400 	.word	0x40005400
 8003150:	000186a0 	.word	0x000186a0

08003154 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003158:	4b12      	ldr	r3, [pc, #72]	@ (80031a4 <MX_I2C2_Init+0x50>)
 800315a:	4a13      	ldr	r2, [pc, #76]	@ (80031a8 <MX_I2C2_Init+0x54>)
 800315c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800315e:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <MX_I2C2_Init+0x50>)
 8003160:	4a12      	ldr	r2, [pc, #72]	@ (80031ac <MX_I2C2_Init+0x58>)
 8003162:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003164:	4b0f      	ldr	r3, [pc, #60]	@ (80031a4 <MX_I2C2_Init+0x50>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800316a:	4b0e      	ldr	r3, [pc, #56]	@ (80031a4 <MX_I2C2_Init+0x50>)
 800316c:	2200      	movs	r2, #0
 800316e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003170:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <MX_I2C2_Init+0x50>)
 8003172:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003176:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003178:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <MX_I2C2_Init+0x50>)
 800317a:	2200      	movs	r2, #0
 800317c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800317e:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <MX_I2C2_Init+0x50>)
 8003180:	2200      	movs	r2, #0
 8003182:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003184:	4b07      	ldr	r3, [pc, #28]	@ (80031a4 <MX_I2C2_Init+0x50>)
 8003186:	2200      	movs	r2, #0
 8003188:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800318a:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <MX_I2C2_Init+0x50>)
 800318c:	2200      	movs	r2, #0
 800318e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003190:	4804      	ldr	r0, [pc, #16]	@ (80031a4 <MX_I2C2_Init+0x50>)
 8003192:	f001 f9b5 	bl	8004500 <HAL_I2C_Init>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800319c:	f000 f954 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	200004d8 	.word	0x200004d8
 80031a8:	40005800 	.word	0x40005800
 80031ac:	000186a0 	.word	0x000186a0

080031b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80031b6:	f107 030c 	add.w	r3, r7, #12
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031ce:	4b1f      	ldr	r3, [pc, #124]	@ (800324c <MX_TIM1_Init+0x9c>)
 80031d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003250 <MX_TIM1_Init+0xa0>)
 80031d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80031d4:	4b1d      	ldr	r3, [pc, #116]	@ (800324c <MX_TIM1_Init+0x9c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031da:	4b1c      	ldr	r3, [pc, #112]	@ (800324c <MX_TIM1_Init+0x9c>)
 80031dc:	2200      	movs	r2, #0
 80031de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80031e0:	4b1a      	ldr	r3, [pc, #104]	@ (800324c <MX_TIM1_Init+0x9c>)
 80031e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e8:	4b18      	ldr	r3, [pc, #96]	@ (800324c <MX_TIM1_Init+0x9c>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031ee:	4b17      	ldr	r3, [pc, #92]	@ (800324c <MX_TIM1_Init+0x9c>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f4:	4b15      	ldr	r3, [pc, #84]	@ (800324c <MX_TIM1_Init+0x9c>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031fa:	4814      	ldr	r0, [pc, #80]	@ (800324c <MX_TIM1_Init+0x9c>)
 80031fc:	f002 ff6a 	bl	80060d4 <HAL_TIM_Base_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003206:	f000 f91f 	bl	8003448 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8003212:	f107 030c 	add.w	r3, r7, #12
 8003216:	4619      	mov	r1, r3
 8003218:	480c      	ldr	r0, [pc, #48]	@ (800324c <MX_TIM1_Init+0x9c>)
 800321a:	f003 f967 	bl	80064ec <HAL_TIM_SlaveConfigSynchro>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003224:	f000 f910 	bl	8003448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003228:	2300      	movs	r3, #0
 800322a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	4619      	mov	r1, r3
 8003234:	4805      	ldr	r0, [pc, #20]	@ (800324c <MX_TIM1_Init+0x9c>)
 8003236:	f003 fcb7 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003240:	f000 f902 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	2000052c 	.word	0x2000052c
 8003250:	40012c00 	.word	0x40012c00

08003254 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003258:	4b11      	ldr	r3, [pc, #68]	@ (80032a0 <MX_USART2_UART_Init+0x4c>)
 800325a:	4a12      	ldr	r2, [pc, #72]	@ (80032a4 <MX_USART2_UART_Init+0x50>)
 800325c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800325e:	4b10      	ldr	r3, [pc, #64]	@ (80032a0 <MX_USART2_UART_Init+0x4c>)
 8003260:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003264:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003266:	4b0e      	ldr	r3, [pc, #56]	@ (80032a0 <MX_USART2_UART_Init+0x4c>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800326c:	4b0c      	ldr	r3, [pc, #48]	@ (80032a0 <MX_USART2_UART_Init+0x4c>)
 800326e:	2200      	movs	r2, #0
 8003270:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003272:	4b0b      	ldr	r3, [pc, #44]	@ (80032a0 <MX_USART2_UART_Init+0x4c>)
 8003274:	2200      	movs	r2, #0
 8003276:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003278:	4b09      	ldr	r3, [pc, #36]	@ (80032a0 <MX_USART2_UART_Init+0x4c>)
 800327a:	220c      	movs	r2, #12
 800327c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800327e:	4b08      	ldr	r3, [pc, #32]	@ (80032a0 <MX_USART2_UART_Init+0x4c>)
 8003280:	2200      	movs	r2, #0
 8003282:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003284:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <MX_USART2_UART_Init+0x4c>)
 8003286:	2200      	movs	r2, #0
 8003288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800328a:	4805      	ldr	r0, [pc, #20]	@ (80032a0 <MX_USART2_UART_Init+0x4c>)
 800328c:	f003 fcea 	bl	8006c64 <HAL_UART_Init>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003296:	f000 f8d7 	bl	8003448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	20000574 	.word	0x20000574
 80032a4:	40004400 	.word	0x40004400

080032a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ae:	f107 0310 	add.w	r3, r7, #16
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	609a      	str	r2, [r3, #8]
 80032ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003338 <MX_GPIO_Init+0x90>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003338 <MX_GPIO_Init+0x90>)
 80032c2:	f043 0310 	orr.w	r3, r3, #16
 80032c6:	6193      	str	r3, [r2, #24]
 80032c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003338 <MX_GPIO_Init+0x90>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d4:	4b18      	ldr	r3, [pc, #96]	@ (8003338 <MX_GPIO_Init+0x90>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	4a17      	ldr	r2, [pc, #92]	@ (8003338 <MX_GPIO_Init+0x90>)
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	6193      	str	r3, [r2, #24]
 80032e0:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <MX_GPIO_Init+0x90>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ec:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <MX_GPIO_Init+0x90>)
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	4a11      	ldr	r2, [pc, #68]	@ (8003338 <MX_GPIO_Init+0x90>)
 80032f2:	f043 0308 	orr.w	r3, r3, #8
 80032f6:	6193      	str	r3, [r2, #24]
 80032f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003338 <MX_GPIO_Init+0x90>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003304:	2200      	movs	r2, #0
 8003306:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800330a:	480c      	ldr	r0, [pc, #48]	@ (800333c <MX_GPIO_Init+0x94>)
 800330c:	f001 f8e0 	bl	80044d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003310:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003316:	2301      	movs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	2302      	movs	r3, #2
 8003320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003322:	f107 0310 	add.w	r3, r7, #16
 8003326:	4619      	mov	r1, r3
 8003328:	4804      	ldr	r0, [pc, #16]	@ (800333c <MX_GPIO_Init+0x94>)
 800332a:	f000 ff4d 	bl	80041c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800332e:	bf00      	nop
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	40011000 	.word	0x40011000

08003340 <HAL_UART_RxCpltCallback>:
//	    }
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

    if (huart->Instance == USART2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2b      	ldr	r2, [pc, #172]	@ (80033fc <HAL_UART_RxCpltCallback+0xbc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d145      	bne.n	80033de <HAL_UART_RxCpltCallback+0x9e>
    {
    	if(rx_buffer[bufferIndex]=='\n' || rx_buffer[bufferIndex]=='\r' ){
 8003352:	4b2b      	ldr	r3, [pc, #172]	@ (8003400 <HAL_UART_RxCpltCallback+0xc0>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	4b2a      	ldr	r3, [pc, #168]	@ (8003404 <HAL_UART_RxCpltCallback+0xc4>)
 800335a:	5c9b      	ldrb	r3, [r3, r2]
 800335c:	2b0a      	cmp	r3, #10
 800335e:	d006      	beq.n	800336e <HAL_UART_RxCpltCallback+0x2e>
 8003360:	4b27      	ldr	r3, [pc, #156]	@ (8003400 <HAL_UART_RxCpltCallback+0xc0>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	4b27      	ldr	r3, [pc, #156]	@ (8003404 <HAL_UART_RxCpltCallback+0xc4>)
 8003368:	5c9b      	ldrb	r3, [r3, r2]
 800336a:	2b0d      	cmp	r3, #13
 800336c:	d121      	bne.n	80033b2 <HAL_UART_RxCpltCallback+0x72>
    		rx_buffer[bufferIndex]='\0';
 800336e:	4b24      	ldr	r3, [pc, #144]	@ (8003400 <HAL_UART_RxCpltCallback+0xc0>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	4b23      	ldr	r3, [pc, #140]	@ (8003404 <HAL_UART_RxCpltCallback+0xc4>)
 8003376:	2100      	movs	r1, #0
 8003378:	5499      	strb	r1, [r3, r2]
            if (rx_buffer[0] != '#')
 800337a:	4b22      	ldr	r3, [pc, #136]	@ (8003404 <HAL_UART_RxCpltCallback+0xc4>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b23      	cmp	r3, #35	@ 0x23
 8003380:	d00b      	beq.n	800339a <HAL_UART_RxCpltCallback+0x5a>
            {
                // Clear the buffer
                memset(rx_buffer, 0, sizeof(rx_buffer));
 8003382:	2232      	movs	r2, #50	@ 0x32
 8003384:	2100      	movs	r1, #0
 8003386:	481f      	ldr	r0, [pc, #124]	@ (8003404 <HAL_UART_RxCpltCallback+0xc4>)
 8003388:	f005 fb8f 	bl	8008aaa <memset>
                bufferIndex = 0;
 800338c:	4b1c      	ldr	r3, [pc, #112]	@ (8003400 <HAL_UART_RxCpltCallback+0xc0>)
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
                UART_sendString("Command does not start with '#', clearing buffer.\n");
 8003392:	481d      	ldr	r0, [pc, #116]	@ (8003408 <HAL_UART_RxCpltCallback+0xc8>)
 8003394:	f000 f83e 	bl	8003414 <UART_sendString>
            if (rx_buffer[0] != '#')
 8003398:	e021      	b.n	80033de <HAL_UART_RxCpltCallback+0x9e>
            }
            else
            {
                Controller_executeCommand((char*)rx_buffer);
 800339a:	481a      	ldr	r0, [pc, #104]	@ (8003404 <HAL_UART_RxCpltCallback+0xc4>)
 800339c:	f7ff fc48 	bl	8002c30 <Controller_executeCommand>
                memset(rx_buffer, 0, sizeof(rx_buffer));
 80033a0:	2232      	movs	r2, #50	@ 0x32
 80033a2:	2100      	movs	r1, #0
 80033a4:	4817      	ldr	r0, [pc, #92]	@ (8003404 <HAL_UART_RxCpltCallback+0xc4>)
 80033a6:	f005 fb80 	bl	8008aaa <memset>
                bufferIndex = 0;
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <HAL_UART_RxCpltCallback+0xc0>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	701a      	strb	r2, [r3, #0]
            if (rx_buffer[0] != '#')
 80033b0:	e015      	b.n	80033de <HAL_UART_RxCpltCallback+0x9e>
            }

    	}
    	else{
    		if(bufferIndex<RX_BUFFER_SIZE-1){
 80033b2:	4b13      	ldr	r3, [pc, #76]	@ (8003400 <HAL_UART_RxCpltCallback+0xc0>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b30      	cmp	r3, #48	@ 0x30
 80033b8:	d806      	bhi.n	80033c8 <HAL_UART_RxCpltCallback+0x88>
    			bufferIndex++;
 80033ba:	4b11      	ldr	r3, [pc, #68]	@ (8003400 <HAL_UART_RxCpltCallback+0xc0>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003400 <HAL_UART_RxCpltCallback+0xc0>)
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	e00a      	b.n	80033de <HAL_UART_RxCpltCallback+0x9e>
    		}
    		else{
    			UART_sendString((char*)"Instruction is too large\n");
 80033c8:	4810      	ldr	r0, [pc, #64]	@ (800340c <HAL_UART_RxCpltCallback+0xcc>)
 80033ca:	f000 f823 	bl	8003414 <UART_sendString>
    			memset(rx_buffer, 0, sizeof(rx_buffer));
 80033ce:	2232      	movs	r2, #50	@ 0x32
 80033d0:	2100      	movs	r1, #0
 80033d2:	480c      	ldr	r0, [pc, #48]	@ (8003404 <HAL_UART_RxCpltCallback+0xc4>)
 80033d4:	f005 fb69 	bl	8008aaa <memset>
    			bufferIndex=0;
 80033d8:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <HAL_UART_RxCpltCallback+0xc0>)
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
    		}
    	}

    }
    HAL_UART_Receive_IT(&huart2, &rx_buffer[bufferIndex], 1);
 80033de:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <HAL_UART_RxCpltCallback+0xc0>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <HAL_UART_RxCpltCallback+0xc4>)
 80033e6:	4413      	add	r3, r2
 80033e8:	2201      	movs	r2, #1
 80033ea:	4619      	mov	r1, r3
 80033ec:	4808      	ldr	r0, [pc, #32]	@ (8003410 <HAL_UART_RxCpltCallback+0xd0>)
 80033ee:	f003 fd1a 	bl	8006e26 <HAL_UART_Receive_IT>

}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40004400 	.word	0x40004400
 8003400:	2000061e 	.word	0x2000061e
 8003404:	200005ec 	.word	0x200005ec
 8003408:	0800c254 	.word	0x0800c254
 800340c:	0800c288 	.word	0x0800c288
 8003410:	20000574 	.word	0x20000574

08003414 <UART_sendString>:
        UART_send_Char(buffer[i]);
    }
}


void UART_sendString(char *str) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    while (*str) {
 800341c:	e009      	b.n	8003432 <UART_sendString+0x1e>
        HAL_UART_Transmit(&huart2, (uint8_t *)str, 1, HAL_MAX_DELAY);
 800341e:	f04f 33ff 	mov.w	r3, #4294967295
 8003422:	2201      	movs	r2, #1
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4807      	ldr	r0, [pc, #28]	@ (8003444 <UART_sendString+0x30>)
 8003428:	f003 fc7a 	bl	8006d20 <HAL_UART_Transmit>
        str++;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3301      	adds	r3, #1
 8003430:	607b      	str	r3, [r7, #4]
    while (*str) {
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f1      	bne.n	800341e <UART_sendString+0xa>
    }
}
 800343a:	bf00      	nop
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000574 	.word	0x20000574

08003448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800344c:	b672      	cpsid	i
}
 800344e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <Error_Handler+0x8>

08003454 <enable_global_interrupts>:
#include "core_cm3.h"
#include "main.h"
#include <string.h>
#include <stdint.h>
#include <stdio.h>
void enable_global_interrupts(void) {
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8003458:	b662      	cpsie	i
}
 800345a:	bf00      	nop
    __enable_irq();
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <Motor_Init>:
static int pitch=0;
static int roll=0;
static int yaw=0;

void Motor_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08e      	sub	sp, #56	@ 0x38
 8003468:	af00      	add	r7, sp, #0
	PWM_PERIOD=CLOCK_FREQUENCY/PWM_FREQUENCY - 1 ;
 800346a:	4b42      	ldr	r3, [pc, #264]	@ (8003574 <Motor_Init+0x110>)
 800346c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003470:	601a      	str	r2, [r3, #0]
	enable_global_interrupts();
 8003472:	f7ff ffef 	bl	8003454 <enable_global_interrupts>
    TIM_OC_InitTypeDef sConfigOC = {0};
 8003476:	f107 031c 	add.w	r3, r7, #28
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	611a      	str	r2, [r3, #16]
 8003486:	615a      	str	r2, [r3, #20]
 8003488:	619a      	str	r2, [r3, #24]
    TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800348a:	f107 0308 	add.w	r3, r7, #8
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	611a      	str	r2, [r3, #16]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800349a:	463b      	mov	r3, r7
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
    htim1.Instance = TIM1;
 80034a2:	4b35      	ldr	r3, [pc, #212]	@ (8003578 <Motor_Init+0x114>)
 80034a4:	4a35      	ldr	r2, [pc, #212]	@ (800357c <Motor_Init+0x118>)
 80034a6:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 80034a8:	4b33      	ldr	r3, [pc, #204]	@ (8003578 <Motor_Init+0x114>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ae:	4b32      	ldr	r3, [pc, #200]	@ (8003578 <Motor_Init+0x114>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = PWM_PERIOD;
 80034b4:	4b2f      	ldr	r3, [pc, #188]	@ (8003574 <Motor_Init+0x110>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003578 <Motor_Init+0x114>)
 80034bc:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034be:	4b2e      	ldr	r3, [pc, #184]	@ (8003578 <Motor_Init+0x114>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 80034c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003578 <Motor_Init+0x114>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003578 <Motor_Init+0x114>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	619a      	str	r2, [r3, #24]

    HAL_TIM_Base_Init(&htim1);
 80034d0:	4829      	ldr	r0, [pc, #164]	@ (8003578 <Motor_Init+0x114>)
 80034d2:	f002 fdff 	bl	80060d4 <HAL_TIM_Base_Init>

    sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
    sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
    HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig);
 80034de:	f107 0308 	add.w	r3, r7, #8
 80034e2:	4619      	mov	r1, r3
 80034e4:	4824      	ldr	r0, [pc, #144]	@ (8003578 <Motor_Init+0x114>)
 80034e6:	f003 f801 	bl	80064ec <HAL_TIM_SlaveConfigSynchro>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ea:	2300      	movs	r3, #0
 80034ec:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
    HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 80034f2:	463b      	mov	r3, r7
 80034f4:	4619      	mov	r1, r3
 80034f6:	4820      	ldr	r0, [pc, #128]	@ (8003578 <Motor_Init+0x114>)
 80034f8:	f003 fb56 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
    HAL_TIM_PWM_Init(&htim1);
 80034fc:	481e      	ldr	r0, [pc, #120]	@ (8003578 <Motor_Init+0x114>)
 80034fe:	f002 fe38 	bl	8006172 <HAL_TIM_PWM_Init>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003502:	2360      	movs	r3, #96	@ 0x60
 8003504:	61fb      	str	r3, [r7, #28]
    sConfigOC.Pulse = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	623b      	str	r3, [r7, #32]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800350e:	2300      	movs	r3, #0
 8003510:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8003512:	f107 031c 	add.w	r3, r7, #28
 8003516:	2200      	movs	r2, #0
 8003518:	4619      	mov	r1, r3
 800351a:	4817      	ldr	r0, [pc, #92]	@ (8003578 <Motor_Init+0x114>)
 800351c:	f002 ff24 	bl	8006368 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003520:	2100      	movs	r1, #0
 8003522:	4815      	ldr	r0, [pc, #84]	@ (8003578 <Motor_Init+0x114>)
 8003524:	f002 fe7e 	bl	8006224 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8003528:	f107 031c 	add.w	r3, r7, #28
 800352c:	2204      	movs	r2, #4
 800352e:	4619      	mov	r1, r3
 8003530:	4811      	ldr	r0, [pc, #68]	@ (8003578 <Motor_Init+0x114>)
 8003532:	f002 ff19 	bl	8006368 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003536:	2104      	movs	r1, #4
 8003538:	480f      	ldr	r0, [pc, #60]	@ (8003578 <Motor_Init+0x114>)
 800353a:	f002 fe73 	bl	8006224 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 800353e:	f107 031c 	add.w	r3, r7, #28
 8003542:	2208      	movs	r2, #8
 8003544:	4619      	mov	r1, r3
 8003546:	480c      	ldr	r0, [pc, #48]	@ (8003578 <Motor_Init+0x114>)
 8003548:	f002 ff0e 	bl	8006368 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800354c:	2108      	movs	r1, #8
 800354e:	480a      	ldr	r0, [pc, #40]	@ (8003578 <Motor_Init+0x114>)
 8003550:	f002 fe68 	bl	8006224 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 8003554:	f107 031c 	add.w	r3, r7, #28
 8003558:	220c      	movs	r2, #12
 800355a:	4619      	mov	r1, r3
 800355c:	4806      	ldr	r0, [pc, #24]	@ (8003578 <Motor_Init+0x114>)
 800355e:	f002 ff03 	bl	8006368 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003562:	210c      	movs	r1, #12
 8003564:	4804      	ldr	r0, [pc, #16]	@ (8003578 <Motor_Init+0x114>)
 8003566:	f002 fe5d 	bl	8006224 <HAL_TIM_PWM_Start>

}
 800356a:	bf00      	nop
 800356c:	3738      	adds	r7, #56	@ 0x38
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	2000066c 	.word	0x2000066c
 8003578:	20000624 	.word	0x20000624
 800357c:	40012c00 	.word	0x40012c00

08003580 <Motor_SetSpeedM1>:
void Motor_SetSpeedM1()
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
	int speed=throttle_base+pitch+roll+yaw;
 8003586:	4b12      	ldr	r3, [pc, #72]	@ (80035d0 <Motor_SetSpeedM1+0x50>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b12      	ldr	r3, [pc, #72]	@ (80035d4 <Motor_SetSpeedM1+0x54>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	441a      	add	r2, r3
 8003590:	4b11      	ldr	r3, [pc, #68]	@ (80035d8 <Motor_SetSpeedM1+0x58>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	441a      	add	r2, r3
 8003596:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <Motor_SetSpeedM1+0x5c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4413      	add	r3, r2
 800359c:	607b      	str	r3, [r7, #4]
    if (speed > PWM_PERIOD)
 800359e:	4b10      	ldr	r3, [pc, #64]	@ (80035e0 <Motor_SetSpeedM1+0x60>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	dd02      	ble.n	80035ae <Motor_SetSpeedM1+0x2e>
    {
    	speed = PWM_PERIOD;
 80035a8:	4b0d      	ldr	r3, [pc, #52]	@ (80035e0 <Motor_SetSpeedM1+0x60>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	607b      	str	r3, [r7, #4]
    }
    if(speed<0){
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	da01      	bge.n	80035b8 <Motor_SetSpeedM1+0x38>
    	    	speed=0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	607b      	str	r3, [r7, #4]
    	    }
    MOTORS_SPEED[0]=speed;
 80035b8:	4a0a      	ldr	r2, [pc, #40]	@ (80035e4 <Motor_SetSpeedM1+0x64>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6013      	str	r3, [r2, #0]

    __HAL_TIM_SET_COMPARE(&htim1, MOTOR1, speed);
 80035be:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <Motor_SetSpeedM1+0x68>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	20000680 	.word	0x20000680
 80035d4:	20000684 	.word	0x20000684
 80035d8:	20000688 	.word	0x20000688
 80035dc:	2000068c 	.word	0x2000068c
 80035e0:	2000066c 	.word	0x2000066c
 80035e4:	20000670 	.word	0x20000670
 80035e8:	20000624 	.word	0x20000624

080035ec <Motor_SetSpeedM2>:
void Motor_SetSpeedM2(){
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0

	int speed=throttle_base-pitch+roll-yaw;
 80035f2:	4b12      	ldr	r3, [pc, #72]	@ (800363c <Motor_SetSpeedM2+0x50>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	4b12      	ldr	r3, [pc, #72]	@ (8003640 <Motor_SetSpeedM2+0x54>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	1ad2      	subs	r2, r2, r3
 80035fc:	4b11      	ldr	r3, [pc, #68]	@ (8003644 <Motor_SetSpeedM2+0x58>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	441a      	add	r2, r3
 8003602:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <Motor_SetSpeedM2+0x5c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	607b      	str	r3, [r7, #4]
	    if (speed > PWM_PERIOD)
 800360a:	4b10      	ldr	r3, [pc, #64]	@ (800364c <Motor_SetSpeedM2+0x60>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	dd02      	ble.n	800361a <Motor_SetSpeedM2+0x2e>
	    {
	    	speed = PWM_PERIOD;
 8003614:	4b0d      	ldr	r3, [pc, #52]	@ (800364c <Motor_SetSpeedM2+0x60>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	607b      	str	r3, [r7, #4]
	    }
	    if(speed<0){
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	da01      	bge.n	8003624 <Motor_SetSpeedM2+0x38>
	    	    	speed=0;
 8003620:	2300      	movs	r3, #0
 8003622:	607b      	str	r3, [r7, #4]
	    	    }
	    MOTORS_SPEED[1]=speed;
 8003624:	4a0a      	ldr	r2, [pc, #40]	@ (8003650 <Motor_SetSpeedM2+0x64>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6053      	str	r3, [r2, #4]

	    __HAL_TIM_SET_COMPARE(&htim1, MOTOR2, speed);
 800362a:	4b0a      	ldr	r3, [pc, #40]	@ (8003654 <Motor_SetSpeedM2+0x68>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	20000680 	.word	0x20000680
 8003640:	20000684 	.word	0x20000684
 8003644:	20000688 	.word	0x20000688
 8003648:	2000068c 	.word	0x2000068c
 800364c:	2000066c 	.word	0x2000066c
 8003650:	20000670 	.word	0x20000670
 8003654:	20000624 	.word	0x20000624

08003658 <Motor_SetSpeedM3>:
void Motor_SetSpeedM3(){
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0

	int speed=throttle_base-pitch-roll+yaw;
 800365e:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <Motor_SetSpeedM3+0x50>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <Motor_SetSpeedM3+0x54>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	1ad2      	subs	r2, r2, r3
 8003668:	4b11      	ldr	r3, [pc, #68]	@ (80036b0 <Motor_SetSpeedM3+0x58>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	1ad2      	subs	r2, r2, r3
 800366e:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <Motor_SetSpeedM3+0x5c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4413      	add	r3, r2
 8003674:	607b      	str	r3, [r7, #4]
	    if (speed > PWM_PERIOD)
 8003676:	4b10      	ldr	r3, [pc, #64]	@ (80036b8 <Motor_SetSpeedM3+0x60>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	dd02      	ble.n	8003686 <Motor_SetSpeedM3+0x2e>
	    {
	    	speed = PWM_PERIOD;
 8003680:	4b0d      	ldr	r3, [pc, #52]	@ (80036b8 <Motor_SetSpeedM3+0x60>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	607b      	str	r3, [r7, #4]
	    }
	    if(speed<0){
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	da01      	bge.n	8003690 <Motor_SetSpeedM3+0x38>
	    	    	speed=0;
 800368c:	2300      	movs	r3, #0
 800368e:	607b      	str	r3, [r7, #4]
	    	    }
	    MOTORS_SPEED[2]=speed;
 8003690:	4a0a      	ldr	r2, [pc, #40]	@ (80036bc <Motor_SetSpeedM3+0x64>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6093      	str	r3, [r2, #8]

	    __HAL_TIM_SET_COMPARE(&htim1, MOTOR3, speed);
 8003696:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <Motor_SetSpeedM3+0x68>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr
 80036a8:	20000680 	.word	0x20000680
 80036ac:	20000684 	.word	0x20000684
 80036b0:	20000688 	.word	0x20000688
 80036b4:	2000068c 	.word	0x2000068c
 80036b8:	2000066c 	.word	0x2000066c
 80036bc:	20000670 	.word	0x20000670
 80036c0:	20000624 	.word	0x20000624

080036c4 <Motor_SetSpeedM4>:
void Motor_SetSpeedM4(){
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
	int speed=throttle_base+pitch-roll-yaw;
 80036ca:	4b12      	ldr	r3, [pc, #72]	@ (8003714 <Motor_SetSpeedM4+0x50>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b12      	ldr	r3, [pc, #72]	@ (8003718 <Motor_SetSpeedM4+0x54>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	441a      	add	r2, r3
 80036d4:	4b11      	ldr	r3, [pc, #68]	@ (800371c <Motor_SetSpeedM4+0x58>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	1ad2      	subs	r2, r2, r3
 80036da:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <Motor_SetSpeedM4+0x5c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	607b      	str	r3, [r7, #4]
	    if (speed > PWM_PERIOD)
 80036e2:	4b10      	ldr	r3, [pc, #64]	@ (8003724 <Motor_SetSpeedM4+0x60>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	dd02      	ble.n	80036f2 <Motor_SetSpeedM4+0x2e>
	    {
	    	speed = PWM_PERIOD;
 80036ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003724 <Motor_SetSpeedM4+0x60>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	607b      	str	r3, [r7, #4]
	    }
	    if(speed<0){
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	da01      	bge.n	80036fc <Motor_SetSpeedM4+0x38>
	    	    	speed=0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	607b      	str	r3, [r7, #4]
	    	    }
	    MOTORS_SPEED[3]=speed;
 80036fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003728 <Motor_SetSpeedM4+0x64>)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	60d3      	str	r3, [r2, #12]

	    __HAL_TIM_SET_COMPARE(&htim1, MOTOR4, speed);
 8003702:	4b0a      	ldr	r3, [pc, #40]	@ (800372c <Motor_SetSpeedM4+0x68>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	bc80      	pop	{r7}
 8003712:	4770      	bx	lr
 8003714:	20000680 	.word	0x20000680
 8003718:	20000684 	.word	0x20000684
 800371c:	20000688 	.word	0x20000688
 8003720:	2000068c 	.word	0x2000068c
 8003724:	2000066c 	.word	0x2000066c
 8003728:	20000670 	.word	0x20000670
 800372c:	20000624 	.word	0x20000624

08003730 <Motor_setSpeedAll>:
void Motor_setSpeedAll(int speed){
 8003730:	b5b0      	push	{r4, r5, r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

	throttle_base=(int)((((double)speed)/100.0) * PWM_PERIOD);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fc fe65 	bl	8000408 <__aeabi_i2d>
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <Motor_setSpeedAll+0x68>)
 8003744:	f7fc fff4 	bl	8000730 <__aeabi_ddiv>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4614      	mov	r4, r2
 800374e:	461d      	mov	r5, r3
 8003750:	4b12      	ldr	r3, [pc, #72]	@ (800379c <Motor_setSpeedAll+0x6c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fc fe57 	bl	8000408 <__aeabi_i2d>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	4620      	mov	r0, r4
 8003760:	4629      	mov	r1, r5
 8003762:	f7fc febb 	bl	80004dc <__aeabi_dmul>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	f7fd f965 	bl	8000a3c <__aeabi_d2iz>
 8003772:	4603      	mov	r3, r0
 8003774:	4a0a      	ldr	r2, [pc, #40]	@ (80037a0 <Motor_setSpeedAll+0x70>)
 8003776:	6013      	str	r3, [r2, #0]

	if (throttle_base > PWM_PERIOD)
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <Motor_setSpeedAll+0x70>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b07      	ldr	r3, [pc, #28]	@ (800379c <Motor_setSpeedAll+0x6c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	dd03      	ble.n	800378c <Motor_setSpeedAll+0x5c>
		    {
		    	throttle_base = PWM_PERIOD;
 8003784:	4b05      	ldr	r3, [pc, #20]	@ (800379c <Motor_setSpeedAll+0x6c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a05      	ldr	r2, [pc, #20]	@ (80037a0 <Motor_setSpeedAll+0x70>)
 800378a:	6013      	str	r3, [r2, #0]
		    }
	updateSpeeds();
 800378c:	f000 f80a 	bl	80037a4 <updateSpeeds>
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bdb0      	pop	{r4, r5, r7, pc}
 8003798:	40590000 	.word	0x40590000
 800379c:	2000066c 	.word	0x2000066c
 80037a0:	20000680 	.word	0x20000680

080037a4 <updateSpeeds>:
void updateSpeeds(){
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
	Motor_SetSpeedM1();
 80037a8:	f7ff feea 	bl	8003580 <Motor_SetSpeedM1>
	Motor_SetSpeedM2();
 80037ac:	f7ff ff1e 	bl	80035ec <Motor_SetSpeedM2>
	Motor_SetSpeedM3();
 80037b0:	f7ff ff52 	bl	8003658 <Motor_SetSpeedM3>
	Motor_SetSpeedM4();
 80037b4:	f7ff ff86 	bl	80036c4 <Motor_SetSpeedM4>
}
 80037b8:	bf00      	nop
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	0000      	movs	r0, r0
	...

080037c0 <Motor_setRoll>:
int* Motor_getMotorsSpeed(void) {
    return MOTORS_SPEED;

}
void Motor_setRoll(int output_roll){
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	roll=5.56*output_roll;
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7fc fe1d 	bl	8000408 <__aeabi_i2d>
 80037ce:	a30a      	add	r3, pc, #40	@ (adr r3, 80037f8 <Motor_setRoll+0x38>)
 80037d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d4:	f7fc fe82 	bl	80004dc <__aeabi_dmul>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	f7fd f92c 	bl	8000a3c <__aeabi_d2iz>
 80037e4:	4603      	mov	r3, r0
 80037e6:	4a06      	ldr	r2, [pc, #24]	@ (8003800 <Motor_setRoll+0x40>)
 80037e8:	6013      	str	r3, [r2, #0]
	updateSpeeds();
 80037ea:	f7ff ffdb 	bl	80037a4 <updateSpeeds>
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	a3d70a3d 	.word	0xa3d70a3d
 80037fc:	40163d70 	.word	0x40163d70
 8003800:	20000688 	.word	0x20000688
 8003804:	00000000 	.word	0x00000000

08003808 <Motor_setPitch>:
void Motor_setPitch(int output_pitch){
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
	pitch=5.56*output_pitch;
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7fc fdf9 	bl	8000408 <__aeabi_i2d>
 8003816:	a30a      	add	r3, pc, #40	@ (adr r3, 8003840 <Motor_setPitch+0x38>)
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f7fc fe5e 	bl	80004dc <__aeabi_dmul>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	f7fd f908 	bl	8000a3c <__aeabi_d2iz>
 800382c:	4603      	mov	r3, r0
 800382e:	4a06      	ldr	r2, [pc, #24]	@ (8003848 <Motor_setPitch+0x40>)
 8003830:	6013      	str	r3, [r2, #0]
	updateSpeeds();
 8003832:	f7ff ffb7 	bl	80037a4 <updateSpeeds>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	a3d70a3d 	.word	0xa3d70a3d
 8003844:	40163d70 	.word	0x40163d70
 8003848:	20000684 	.word	0x20000684
 800384c:	00000000 	.word	0x00000000

08003850 <Motor_setYaw>:
void Motor_setYaw(int output_yaw){
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	yaw=5.56*output_yaw;
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fc fdd5 	bl	8000408 <__aeabi_i2d>
 800385e:	a30a      	add	r3, pc, #40	@ (adr r3, 8003888 <Motor_setYaw+0x38>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f7fc fe3a 	bl	80004dc <__aeabi_dmul>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	f7fd f8e4 	bl	8000a3c <__aeabi_d2iz>
 8003874:	4603      	mov	r3, r0
 8003876:	4a06      	ldr	r2, [pc, #24]	@ (8003890 <Motor_setYaw+0x40>)
 8003878:	6013      	str	r3, [r2, #0]
	updateSpeeds();
 800387a:	f7ff ff93 	bl	80037a4 <updateSpeeds>
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	a3d70a3d 	.word	0xa3d70a3d
 800388c:	40163d70 	.word	0x40163d70
 8003890:	2000068c 	.word	0x2000068c

08003894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800389a:	4b15      	ldr	r3, [pc, #84]	@ (80038f0 <HAL_MspInit+0x5c>)
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	4a14      	ldr	r2, [pc, #80]	@ (80038f0 <HAL_MspInit+0x5c>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6193      	str	r3, [r2, #24]
 80038a6:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <HAL_MspInit+0x5c>)
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	4b0f      	ldr	r3, [pc, #60]	@ (80038f0 <HAL_MspInit+0x5c>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	4a0e      	ldr	r2, [pc, #56]	@ (80038f0 <HAL_MspInit+0x5c>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038bc:	61d3      	str	r3, [r2, #28]
 80038be:	4b0c      	ldr	r3, [pc, #48]	@ (80038f0 <HAL_MspInit+0x5c>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038c6:	607b      	str	r3, [r7, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80038ca:	4b0a      	ldr	r3, [pc, #40]	@ (80038f4 <HAL_MspInit+0x60>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	4a04      	ldr	r2, [pc, #16]	@ (80038f4 <HAL_MspInit+0x60>)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40010000 	.word	0x40010000

080038f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	@ 0x28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 0318 	add.w	r3, r7, #24
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2b      	ldr	r2, [pc, #172]	@ (80039c0 <HAL_I2C_MspInit+0xc8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d124      	bne.n	8003962 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003918:	4b2a      	ldr	r3, [pc, #168]	@ (80039c4 <HAL_I2C_MspInit+0xcc>)
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	4a29      	ldr	r2, [pc, #164]	@ (80039c4 <HAL_I2C_MspInit+0xcc>)
 800391e:	f043 0308 	orr.w	r3, r3, #8
 8003922:	6193      	str	r3, [r2, #24]
 8003924:	4b27      	ldr	r3, [pc, #156]	@ (80039c4 <HAL_I2C_MspInit+0xcc>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003930:	23c0      	movs	r3, #192	@ 0xc0
 8003932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003934:	2312      	movs	r3, #18
 8003936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003938:	2303      	movs	r3, #3
 800393a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393c:	f107 0318 	add.w	r3, r7, #24
 8003940:	4619      	mov	r1, r3
 8003942:	4821      	ldr	r0, [pc, #132]	@ (80039c8 <HAL_I2C_MspInit+0xd0>)
 8003944:	f000 fc40 	bl	80041c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003948:	4b1e      	ldr	r3, [pc, #120]	@ (80039c4 <HAL_I2C_MspInit+0xcc>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4a1d      	ldr	r2, [pc, #116]	@ (80039c4 <HAL_I2C_MspInit+0xcc>)
 800394e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003952:	61d3      	str	r3, [r2, #28]
 8003954:	4b1b      	ldr	r3, [pc, #108]	@ (80039c4 <HAL_I2C_MspInit+0xcc>)
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003960:	e029      	b.n	80039b6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a19      	ldr	r2, [pc, #100]	@ (80039cc <HAL_I2C_MspInit+0xd4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d124      	bne.n	80039b6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800396c:	4b15      	ldr	r3, [pc, #84]	@ (80039c4 <HAL_I2C_MspInit+0xcc>)
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	4a14      	ldr	r2, [pc, #80]	@ (80039c4 <HAL_I2C_MspInit+0xcc>)
 8003972:	f043 0308 	orr.w	r3, r3, #8
 8003976:	6193      	str	r3, [r2, #24]
 8003978:	4b12      	ldr	r3, [pc, #72]	@ (80039c4 <HAL_I2C_MspInit+0xcc>)
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003984:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800398a:	2312      	movs	r3, #18
 800398c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800398e:	2303      	movs	r3, #3
 8003990:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003992:	f107 0318 	add.w	r3, r7, #24
 8003996:	4619      	mov	r1, r3
 8003998:	480b      	ldr	r0, [pc, #44]	@ (80039c8 <HAL_I2C_MspInit+0xd0>)
 800399a:	f000 fc15 	bl	80041c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800399e:	4b09      	ldr	r3, [pc, #36]	@ (80039c4 <HAL_I2C_MspInit+0xcc>)
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	4a08      	ldr	r2, [pc, #32]	@ (80039c4 <HAL_I2C_MspInit+0xcc>)
 80039a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039a8:	61d3      	str	r3, [r2, #28]
 80039aa:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <HAL_I2C_MspInit+0xcc>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	68bb      	ldr	r3, [r7, #8]
}
 80039b6:	bf00      	nop
 80039b8:	3728      	adds	r7, #40	@ 0x28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40005400 	.word	0x40005400
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40010c00 	.word	0x40010c00
 80039cc:	40005800 	.word	0x40005800

080039d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d8:	f107 0310 	add.w	r3, r7, #16
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	609a      	str	r2, [r3, #8]
 80039e4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a16      	ldr	r2, [pc, #88]	@ (8003a44 <HAL_TIM_Base_MspInit+0x74>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d124      	bne.n	8003a3a <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039f0:	4b15      	ldr	r3, [pc, #84]	@ (8003a48 <HAL_TIM_Base_MspInit+0x78>)
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	4a14      	ldr	r2, [pc, #80]	@ (8003a48 <HAL_TIM_Base_MspInit+0x78>)
 80039f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039fa:	6193      	str	r3, [r2, #24]
 80039fc:	4b12      	ldr	r3, [pc, #72]	@ (8003a48 <HAL_TIM_Base_MspInit+0x78>)
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a08:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <HAL_TIM_Base_MspInit+0x78>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	4a0e      	ldr	r2, [pc, #56]	@ (8003a48 <HAL_TIM_Base_MspInit+0x78>)
 8003a0e:	f043 0304 	orr.w	r3, r3, #4
 8003a12:	6193      	str	r3, [r2, #24]
 8003a14:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <HAL_TIM_Base_MspInit+0x78>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003a20:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003a24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a26:	2302      	movs	r3, #2
 8003a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2e:	f107 0310 	add.w	r3, r7, #16
 8003a32:	4619      	mov	r1, r3
 8003a34:	4805      	ldr	r0, [pc, #20]	@ (8003a4c <HAL_TIM_Base_MspInit+0x7c>)
 8003a36:	f000 fbc7 	bl	80041c8 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003a3a:	bf00      	nop
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40010800 	.word	0x40010800

08003a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 0310 	add.w	r3, r7, #16
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae8 <HAL_UART_MspInit+0x98>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d137      	bne.n	8003ae0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a70:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <HAL_UART_MspInit+0x9c>)
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	4a1d      	ldr	r2, [pc, #116]	@ (8003aec <HAL_UART_MspInit+0x9c>)
 8003a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a7a:	61d3      	str	r3, [r2, #28]
 8003a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003aec <HAL_UART_MspInit+0x9c>)
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a88:	4b18      	ldr	r3, [pc, #96]	@ (8003aec <HAL_UART_MspInit+0x9c>)
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	4a17      	ldr	r2, [pc, #92]	@ (8003aec <HAL_UART_MspInit+0x9c>)
 8003a8e:	f043 0304 	orr.w	r3, r3, #4
 8003a92:	6193      	str	r3, [r2, #24]
 8003a94:	4b15      	ldr	r3, [pc, #84]	@ (8003aec <HAL_UART_MspInit+0x9c>)
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aac:	f107 0310 	add.w	r3, r7, #16
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	480f      	ldr	r0, [pc, #60]	@ (8003af0 <HAL_UART_MspInit+0xa0>)
 8003ab4:	f000 fb88 	bl	80041c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003ab8:	2308      	movs	r3, #8
 8003aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac4:	f107 0310 	add.w	r3, r7, #16
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4809      	ldr	r0, [pc, #36]	@ (8003af0 <HAL_UART_MspInit+0xa0>)
 8003acc:	f000 fb7c 	bl	80041c8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	2026      	movs	r0, #38	@ 0x26
 8003ad6:	f000 fa8e 	bl	8003ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ada:	2026      	movs	r0, #38	@ 0x26
 8003adc:	f000 faa7 	bl	800402e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003ae0:	bf00      	nop
 8003ae2:	3720      	adds	r7, #32
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40004400 	.word	0x40004400
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40010800 	.word	0x40010800

08003af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003af8:	bf00      	nop
 8003afa:	e7fd      	b.n	8003af8 <NMI_Handler+0x4>

08003afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b00:	bf00      	nop
 8003b02:	e7fd      	b.n	8003b00 <HardFault_Handler+0x4>

08003b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <MemManage_Handler+0x4>

08003b0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <BusFault_Handler+0x4>

08003b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b18:	bf00      	nop
 8003b1a:	e7fd      	b.n	8003b18 <UsageFault_Handler+0x4>

08003b1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b20:	bf00      	nop
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr

08003b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b44:	f000 f940 	bl	8003dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b50:	4802      	ldr	r0, [pc, #8]	@ (8003b5c <USART2_IRQHandler+0x10>)
 8003b52:	f003 f98d 	bl	8006e70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000574 	.word	0x20000574

08003b60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return 1;
 8003b64:	2301      	movs	r3, #1
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <_kill>:

int _kill(int pid, int sig)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b78:	f005 f854 	bl	8008c24 <__errno>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2216      	movs	r2, #22
 8003b80:	601a      	str	r2, [r3, #0]
  return -1;
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <_exit>:

void _exit (int status)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b96:	f04f 31ff 	mov.w	r1, #4294967295
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff ffe7 	bl	8003b6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ba0:	bf00      	nop
 8003ba2:	e7fd      	b.n	8003ba0 <_exit+0x12>

08003ba4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e00a      	b.n	8003bcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bb6:	f3af 8000 	nop.w
 8003bba:	4601      	mov	r1, r0
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	60ba      	str	r2, [r7, #8]
 8003bc2:	b2ca      	uxtb	r2, r1
 8003bc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	dbf0      	blt.n	8003bb6 <_read+0x12>
  }

  return len;
 8003bd4:	687b      	ldr	r3, [r7, #4]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b086      	sub	sp, #24
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	e009      	b.n	8003c04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	60ba      	str	r2, [r7, #8]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	3301      	adds	r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	dbf1      	blt.n	8003bf0 <_write+0x12>
  }
  return len;
 8003c0c:	687b      	ldr	r3, [r7, #4]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <_close>:

int _close(int file)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c3c:	605a      	str	r2, [r3, #4]
  return 0;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <_isatty>:

int _isatty(int file)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c52:	2301      	movs	r3, #1
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr

08003c5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
	...

08003c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c80:	4a14      	ldr	r2, [pc, #80]	@ (8003cd4 <_sbrk+0x5c>)
 8003c82:	4b15      	ldr	r3, [pc, #84]	@ (8003cd8 <_sbrk+0x60>)
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c8c:	4b13      	ldr	r3, [pc, #76]	@ (8003cdc <_sbrk+0x64>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c94:	4b11      	ldr	r3, [pc, #68]	@ (8003cdc <_sbrk+0x64>)
 8003c96:	4a12      	ldr	r2, [pc, #72]	@ (8003ce0 <_sbrk+0x68>)
 8003c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c9a:	4b10      	ldr	r3, [pc, #64]	@ (8003cdc <_sbrk+0x64>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d207      	bcs.n	8003cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca8:	f004 ffbc 	bl	8008c24 <__errno>
 8003cac:	4603      	mov	r3, r0
 8003cae:	220c      	movs	r2, #12
 8003cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	e009      	b.n	8003ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb8:	4b08      	ldr	r3, [pc, #32]	@ (8003cdc <_sbrk+0x64>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cbe:	4b07      	ldr	r3, [pc, #28]	@ (8003cdc <_sbrk+0x64>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	4a05      	ldr	r2, [pc, #20]	@ (8003cdc <_sbrk+0x64>)
 8003cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cca:	68fb      	ldr	r3, [r7, #12]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20005000 	.word	0x20005000
 8003cd8:	00000400 	.word	0x00000400
 8003cdc:	20000690 	.word	0x20000690
 8003ce0:	200007e8 	.word	0x200007e8

08003ce4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr

08003cf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003cf0:	f7ff fff8 	bl	8003ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cf4:	480b      	ldr	r0, [pc, #44]	@ (8003d24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003cf6:	490c      	ldr	r1, [pc, #48]	@ (8003d28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8003d2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8003cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cfc:	e002      	b.n	8003d04 <LoopCopyDataInit>

08003cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d02:	3304      	adds	r3, #4

08003d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d08:	d3f9      	bcc.n	8003cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d0a:	4a09      	ldr	r2, [pc, #36]	@ (8003d30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003d0c:	4c09      	ldr	r4, [pc, #36]	@ (8003d34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d10:	e001      	b.n	8003d16 <LoopFillZerobss>

08003d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d14:	3204      	adds	r2, #4

08003d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d18:	d3fb      	bcc.n	8003d12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d1a:	f004 ff89 	bl	8008c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003d1e:	f7ff f95f 	bl	8002fe0 <main>
  bx lr
 8003d22:	4770      	bx	lr
  ldr r0, =_sdata
 8003d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d28:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003d2c:	0800c798 	.word	0x0800c798
  ldr r2, =_sbss
 8003d30:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003d34:	200007e4 	.word	0x200007e4

08003d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d38:	e7fe      	b.n	8003d38 <ADC1_2_IRQHandler>
	...

08003d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d40:	4b08      	ldr	r3, [pc, #32]	@ (8003d64 <HAL_Init+0x28>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a07      	ldr	r2, [pc, #28]	@ (8003d64 <HAL_Init+0x28>)
 8003d46:	f043 0310 	orr.w	r3, r3, #16
 8003d4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d4c:	2003      	movs	r0, #3
 8003d4e:	f000 f947 	bl	8003fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d52:	200f      	movs	r0, #15
 8003d54:	f000 f808 	bl	8003d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d58:	f7ff fd9c 	bl	8003894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40022000 	.word	0x40022000

08003d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d70:	4b12      	ldr	r3, [pc, #72]	@ (8003dbc <HAL_InitTick+0x54>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b12      	ldr	r3, [pc, #72]	@ (8003dc0 <HAL_InitTick+0x58>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f95f 	bl	800404a <HAL_SYSTICK_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e00e      	b.n	8003db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b0f      	cmp	r3, #15
 8003d9a:	d80a      	bhi.n	8003db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	f000 f927 	bl	8003ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003da8:	4a06      	ldr	r2, [pc, #24]	@ (8003dc4 <HAL_InitTick+0x5c>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	e000      	b.n	8003db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	2000003c 	.word	0x2000003c
 8003dc0:	20000044 	.word	0x20000044
 8003dc4:	20000040 	.word	0x20000040

08003dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dcc:	4b05      	ldr	r3, [pc, #20]	@ (8003de4 <HAL_IncTick+0x1c>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <HAL_IncTick+0x20>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	4a03      	ldr	r2, [pc, #12]	@ (8003de8 <HAL_IncTick+0x20>)
 8003dda:	6013      	str	r3, [r2, #0]
}
 8003ddc:	bf00      	nop
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	20000044 	.word	0x20000044
 8003de8:	20000694 	.word	0x20000694

08003dec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return uwTick;
 8003df0:	4b02      	ldr	r3, [pc, #8]	@ (8003dfc <HAL_GetTick+0x10>)
 8003df2:	681b      	ldr	r3, [r3, #0]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr
 8003dfc:	20000694 	.word	0x20000694

08003e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e08:	f7ff fff0 	bl	8003dec <HAL_GetTick>
 8003e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d005      	beq.n	8003e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <HAL_Delay+0x44>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e26:	bf00      	nop
 8003e28:	f7ff ffe0 	bl	8003dec <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d8f7      	bhi.n	8003e28 <HAL_Delay+0x28>
  {
  }
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000044 	.word	0x20000044

08003e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e58:	4b0c      	ldr	r3, [pc, #48]	@ (8003e8c <__NVIC_SetPriorityGrouping+0x44>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e64:	4013      	ands	r3, r2
 8003e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e7a:	4a04      	ldr	r2, [pc, #16]	@ (8003e8c <__NVIC_SetPriorityGrouping+0x44>)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	60d3      	str	r3, [r2, #12]
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e94:	4b04      	ldr	r3, [pc, #16]	@ (8003ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	f003 0307 	and.w	r3, r3, #7
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	db0b      	blt.n	8003ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	f003 021f 	and.w	r2, r3, #31
 8003ec4:	4906      	ldr	r1, [pc, #24]	@ (8003ee0 <__NVIC_EnableIRQ+0x34>)
 8003ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	2001      	movs	r0, #1
 8003ece:	fa00 f202 	lsl.w	r2, r0, r2
 8003ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	e000e100 	.word	0xe000e100

08003ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	db0a      	blt.n	8003f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	490c      	ldr	r1, [pc, #48]	@ (8003f30 <__NVIC_SetPriority+0x4c>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	0112      	lsls	r2, r2, #4
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	440b      	add	r3, r1
 8003f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f0c:	e00a      	b.n	8003f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4908      	ldr	r1, [pc, #32]	@ (8003f34 <__NVIC_SetPriority+0x50>)
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	3b04      	subs	r3, #4
 8003f1c:	0112      	lsls	r2, r2, #4
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	440b      	add	r3, r1
 8003f22:	761a      	strb	r2, [r3, #24]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000e100 	.word	0xe000e100
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b089      	sub	sp, #36	@ 0x24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f1c3 0307 	rsb	r3, r3, #7
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	bf28      	it	cs
 8003f56:	2304      	movcs	r3, #4
 8003f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2b06      	cmp	r3, #6
 8003f60:	d902      	bls.n	8003f68 <NVIC_EncodePriority+0x30>
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3b03      	subs	r3, #3
 8003f66:	e000      	b.n	8003f6a <NVIC_EncodePriority+0x32>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43da      	mvns	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f80:	f04f 31ff 	mov.w	r1, #4294967295
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	43d9      	mvns	r1, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f90:	4313      	orrs	r3, r2
         );
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3724      	adds	r7, #36	@ 0x24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fac:	d301      	bcc.n	8003fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e00f      	b.n	8003fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003fdc <SysTick_Config+0x40>)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fba:	210f      	movs	r1, #15
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc0:	f7ff ff90 	bl	8003ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fc4:	4b05      	ldr	r3, [pc, #20]	@ (8003fdc <SysTick_Config+0x40>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fca:	4b04      	ldr	r3, [pc, #16]	@ (8003fdc <SysTick_Config+0x40>)
 8003fcc:	2207      	movs	r2, #7
 8003fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	e000e010 	.word	0xe000e010

08003fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ff2d 	bl	8003e48 <__NVIC_SetPriorityGrouping>
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b086      	sub	sp, #24
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
 8004002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004008:	f7ff ff42 	bl	8003e90 <__NVIC_GetPriorityGrouping>
 800400c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f7ff ff90 	bl	8003f38 <NVIC_EncodePriority>
 8004018:	4602      	mov	r2, r0
 800401a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff5f 	bl	8003ee4 <__NVIC_SetPriority>
}
 8004026:	bf00      	nop
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff ff35 	bl	8003eac <__NVIC_EnableIRQ>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff ffa2 	bl	8003f9c <SysTick_Config>
 8004058:	4603      	mov	r3, r0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d008      	beq.n	800408c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2204      	movs	r2, #4
 800407e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e020      	b.n	80040ce <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 020e 	bic.w	r2, r2, #14
 800409a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b4:	2101      	movs	r1, #1
 80040b6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ba:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d005      	beq.n	80040fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2204      	movs	r2, #4
 80040f4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
 80040fa:	e051      	b.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 020e 	bic.w	r2, r2, #14
 800410a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a22      	ldr	r2, [pc, #136]	@ (80041ac <HAL_DMA_Abort_IT+0xd4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d029      	beq.n	800417a <HAL_DMA_Abort_IT+0xa2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a21      	ldr	r2, [pc, #132]	@ (80041b0 <HAL_DMA_Abort_IT+0xd8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <HAL_DMA_Abort_IT+0x9e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1f      	ldr	r2, [pc, #124]	@ (80041b4 <HAL_DMA_Abort_IT+0xdc>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01a      	beq.n	8004170 <HAL_DMA_Abort_IT+0x98>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1e      	ldr	r2, [pc, #120]	@ (80041b8 <HAL_DMA_Abort_IT+0xe0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d012      	beq.n	800416a <HAL_DMA_Abort_IT+0x92>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1c      	ldr	r2, [pc, #112]	@ (80041bc <HAL_DMA_Abort_IT+0xe4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00a      	beq.n	8004164 <HAL_DMA_Abort_IT+0x8c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1b      	ldr	r2, [pc, #108]	@ (80041c0 <HAL_DMA_Abort_IT+0xe8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d102      	bne.n	800415e <HAL_DMA_Abort_IT+0x86>
 8004158:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800415c:	e00e      	b.n	800417c <HAL_DMA_Abort_IT+0xa4>
 800415e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004162:	e00b      	b.n	800417c <HAL_DMA_Abort_IT+0xa4>
 8004164:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004168:	e008      	b.n	800417c <HAL_DMA_Abort_IT+0xa4>
 800416a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800416e:	e005      	b.n	800417c <HAL_DMA_Abort_IT+0xa4>
 8004170:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004174:	e002      	b.n	800417c <HAL_DMA_Abort_IT+0xa4>
 8004176:	2310      	movs	r3, #16
 8004178:	e000      	b.n	800417c <HAL_DMA_Abort_IT+0xa4>
 800417a:	2301      	movs	r3, #1
 800417c:	4a11      	ldr	r2, [pc, #68]	@ (80041c4 <HAL_DMA_Abort_IT+0xec>)
 800417e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
    } 
  }
  return status;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40020008 	.word	0x40020008
 80041b0:	4002001c 	.word	0x4002001c
 80041b4:	40020030 	.word	0x40020030
 80041b8:	40020044 	.word	0x40020044
 80041bc:	40020058 	.word	0x40020058
 80041c0:	4002006c 	.word	0x4002006c
 80041c4:	40020000 	.word	0x40020000

080041c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b08b      	sub	sp, #44	@ 0x2c
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041d2:	2300      	movs	r3, #0
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80041d6:	2300      	movs	r3, #0
 80041d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041da:	e169      	b.n	80044b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80041dc:	2201      	movs	r2, #1
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	f040 8158 	bne.w	80044aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4a9a      	ldr	r2, [pc, #616]	@ (8004468 <HAL_GPIO_Init+0x2a0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d05e      	beq.n	80042c2 <HAL_GPIO_Init+0xfa>
 8004204:	4a98      	ldr	r2, [pc, #608]	@ (8004468 <HAL_GPIO_Init+0x2a0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d875      	bhi.n	80042f6 <HAL_GPIO_Init+0x12e>
 800420a:	4a98      	ldr	r2, [pc, #608]	@ (800446c <HAL_GPIO_Init+0x2a4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d058      	beq.n	80042c2 <HAL_GPIO_Init+0xfa>
 8004210:	4a96      	ldr	r2, [pc, #600]	@ (800446c <HAL_GPIO_Init+0x2a4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d86f      	bhi.n	80042f6 <HAL_GPIO_Init+0x12e>
 8004216:	4a96      	ldr	r2, [pc, #600]	@ (8004470 <HAL_GPIO_Init+0x2a8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d052      	beq.n	80042c2 <HAL_GPIO_Init+0xfa>
 800421c:	4a94      	ldr	r2, [pc, #592]	@ (8004470 <HAL_GPIO_Init+0x2a8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d869      	bhi.n	80042f6 <HAL_GPIO_Init+0x12e>
 8004222:	4a94      	ldr	r2, [pc, #592]	@ (8004474 <HAL_GPIO_Init+0x2ac>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d04c      	beq.n	80042c2 <HAL_GPIO_Init+0xfa>
 8004228:	4a92      	ldr	r2, [pc, #584]	@ (8004474 <HAL_GPIO_Init+0x2ac>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d863      	bhi.n	80042f6 <HAL_GPIO_Init+0x12e>
 800422e:	4a92      	ldr	r2, [pc, #584]	@ (8004478 <HAL_GPIO_Init+0x2b0>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d046      	beq.n	80042c2 <HAL_GPIO_Init+0xfa>
 8004234:	4a90      	ldr	r2, [pc, #576]	@ (8004478 <HAL_GPIO_Init+0x2b0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d85d      	bhi.n	80042f6 <HAL_GPIO_Init+0x12e>
 800423a:	2b12      	cmp	r3, #18
 800423c:	d82a      	bhi.n	8004294 <HAL_GPIO_Init+0xcc>
 800423e:	2b12      	cmp	r3, #18
 8004240:	d859      	bhi.n	80042f6 <HAL_GPIO_Init+0x12e>
 8004242:	a201      	add	r2, pc, #4	@ (adr r2, 8004248 <HAL_GPIO_Init+0x80>)
 8004244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004248:	080042c3 	.word	0x080042c3
 800424c:	0800429d 	.word	0x0800429d
 8004250:	080042af 	.word	0x080042af
 8004254:	080042f1 	.word	0x080042f1
 8004258:	080042f7 	.word	0x080042f7
 800425c:	080042f7 	.word	0x080042f7
 8004260:	080042f7 	.word	0x080042f7
 8004264:	080042f7 	.word	0x080042f7
 8004268:	080042f7 	.word	0x080042f7
 800426c:	080042f7 	.word	0x080042f7
 8004270:	080042f7 	.word	0x080042f7
 8004274:	080042f7 	.word	0x080042f7
 8004278:	080042f7 	.word	0x080042f7
 800427c:	080042f7 	.word	0x080042f7
 8004280:	080042f7 	.word	0x080042f7
 8004284:	080042f7 	.word	0x080042f7
 8004288:	080042f7 	.word	0x080042f7
 800428c:	080042a5 	.word	0x080042a5
 8004290:	080042b9 	.word	0x080042b9
 8004294:	4a79      	ldr	r2, [pc, #484]	@ (800447c <HAL_GPIO_Init+0x2b4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800429a:	e02c      	b.n	80042f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	623b      	str	r3, [r7, #32]
          break;
 80042a2:	e029      	b.n	80042f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	3304      	adds	r3, #4
 80042aa:	623b      	str	r3, [r7, #32]
          break;
 80042ac:	e024      	b.n	80042f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	3308      	adds	r3, #8
 80042b4:	623b      	str	r3, [r7, #32]
          break;
 80042b6:	e01f      	b.n	80042f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	330c      	adds	r3, #12
 80042be:	623b      	str	r3, [r7, #32]
          break;
 80042c0:	e01a      	b.n	80042f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d102      	bne.n	80042d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80042ca:	2304      	movs	r3, #4
 80042cc:	623b      	str	r3, [r7, #32]
          break;
 80042ce:	e013      	b.n	80042f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042d8:	2308      	movs	r3, #8
 80042da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	611a      	str	r2, [r3, #16]
          break;
 80042e2:	e009      	b.n	80042f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042e4:	2308      	movs	r3, #8
 80042e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	615a      	str	r2, [r3, #20]
          break;
 80042ee:	e003      	b.n	80042f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80042f0:	2300      	movs	r3, #0
 80042f2:	623b      	str	r3, [r7, #32]
          break;
 80042f4:	e000      	b.n	80042f8 <HAL_GPIO_Init+0x130>
          break;
 80042f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2bff      	cmp	r3, #255	@ 0xff
 80042fc:	d801      	bhi.n	8004302 <HAL_GPIO_Init+0x13a>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	e001      	b.n	8004306 <HAL_GPIO_Init+0x13e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3304      	adds	r3, #4
 8004306:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2bff      	cmp	r3, #255	@ 0xff
 800430c:	d802      	bhi.n	8004314 <HAL_GPIO_Init+0x14c>
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	e002      	b.n	800431a <HAL_GPIO_Init+0x152>
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	3b08      	subs	r3, #8
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	210f      	movs	r1, #15
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	fa01 f303 	lsl.w	r3, r1, r3
 8004328:	43db      	mvns	r3, r3
 800432a:	401a      	ands	r2, r3
 800432c:	6a39      	ldr	r1, [r7, #32]
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	431a      	orrs	r2, r3
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80b1 	beq.w	80044aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004348:	4b4d      	ldr	r3, [pc, #308]	@ (8004480 <HAL_GPIO_Init+0x2b8>)
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	4a4c      	ldr	r2, [pc, #304]	@ (8004480 <HAL_GPIO_Init+0x2b8>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	6193      	str	r3, [r2, #24]
 8004354:	4b4a      	ldr	r3, [pc, #296]	@ (8004480 <HAL_GPIO_Init+0x2b8>)
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004360:	4a48      	ldr	r2, [pc, #288]	@ (8004484 <HAL_GPIO_Init+0x2bc>)
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	089b      	lsrs	r3, r3, #2
 8004366:	3302      	adds	r3, #2
 8004368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	220f      	movs	r2, #15
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4013      	ands	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a40      	ldr	r2, [pc, #256]	@ (8004488 <HAL_GPIO_Init+0x2c0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <HAL_GPIO_Init+0x1ec>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a3f      	ldr	r2, [pc, #252]	@ (800448c <HAL_GPIO_Init+0x2c4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d00d      	beq.n	80043b0 <HAL_GPIO_Init+0x1e8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a3e      	ldr	r2, [pc, #248]	@ (8004490 <HAL_GPIO_Init+0x2c8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d007      	beq.n	80043ac <HAL_GPIO_Init+0x1e4>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a3d      	ldr	r2, [pc, #244]	@ (8004494 <HAL_GPIO_Init+0x2cc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d101      	bne.n	80043a8 <HAL_GPIO_Init+0x1e0>
 80043a4:	2303      	movs	r3, #3
 80043a6:	e006      	b.n	80043b6 <HAL_GPIO_Init+0x1ee>
 80043a8:	2304      	movs	r3, #4
 80043aa:	e004      	b.n	80043b6 <HAL_GPIO_Init+0x1ee>
 80043ac:	2302      	movs	r3, #2
 80043ae:	e002      	b.n	80043b6 <HAL_GPIO_Init+0x1ee>
 80043b0:	2301      	movs	r3, #1
 80043b2:	e000      	b.n	80043b6 <HAL_GPIO_Init+0x1ee>
 80043b4:	2300      	movs	r3, #0
 80043b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b8:	f002 0203 	and.w	r2, r2, #3
 80043bc:	0092      	lsls	r2, r2, #2
 80043be:	4093      	lsls	r3, r2
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80043c6:	492f      	ldr	r1, [pc, #188]	@ (8004484 <HAL_GPIO_Init+0x2bc>)
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	089b      	lsrs	r3, r3, #2
 80043cc:	3302      	adds	r3, #2
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d006      	beq.n	80043ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80043e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	492c      	ldr	r1, [pc, #176]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]
 80043ec:	e006      	b.n	80043fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80043ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	4928      	ldr	r1, [pc, #160]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d006      	beq.n	8004416 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004408:	4b23      	ldr	r3, [pc, #140]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	4922      	ldr	r1, [pc, #136]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	4313      	orrs	r3, r2
 8004412:	60cb      	str	r3, [r1, #12]
 8004414:	e006      	b.n	8004424 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004416:	4b20      	ldr	r3, [pc, #128]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	43db      	mvns	r3, r3
 800441e:	491e      	ldr	r1, [pc, #120]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 8004420:	4013      	ands	r3, r2
 8004422:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d006      	beq.n	800443e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004430:	4b19      	ldr	r3, [pc, #100]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	4918      	ldr	r1, [pc, #96]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]
 800443c:	e006      	b.n	800444c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800443e:	4b16      	ldr	r3, [pc, #88]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	43db      	mvns	r3, r3
 8004446:	4914      	ldr	r1, [pc, #80]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 8004448:	4013      	ands	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d021      	beq.n	800449c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004458:	4b0f      	ldr	r3, [pc, #60]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	490e      	ldr	r1, [pc, #56]	@ (8004498 <HAL_GPIO_Init+0x2d0>)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]
 8004464:	e021      	b.n	80044aa <HAL_GPIO_Init+0x2e2>
 8004466:	bf00      	nop
 8004468:	10320000 	.word	0x10320000
 800446c:	10310000 	.word	0x10310000
 8004470:	10220000 	.word	0x10220000
 8004474:	10210000 	.word	0x10210000
 8004478:	10120000 	.word	0x10120000
 800447c:	10110000 	.word	0x10110000
 8004480:	40021000 	.word	0x40021000
 8004484:	40010000 	.word	0x40010000
 8004488:	40010800 	.word	0x40010800
 800448c:	40010c00 	.word	0x40010c00
 8004490:	40011000 	.word	0x40011000
 8004494:	40011400 	.word	0x40011400
 8004498:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800449c:	4b0b      	ldr	r3, [pc, #44]	@ (80044cc <HAL_GPIO_Init+0x304>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	4909      	ldr	r1, [pc, #36]	@ (80044cc <HAL_GPIO_Init+0x304>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	3301      	adds	r3, #1
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f47f ae8e 	bne.w	80041dc <HAL_GPIO_Init+0x14>
  }
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	372c      	adds	r7, #44	@ 0x2c
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	40010400 	.word	0x40010400

080044d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	807b      	strh	r3, [r7, #2]
 80044dc:	4613      	mov	r3, r2
 80044de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044e0:	787b      	ldrb	r3, [r7, #1]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044e6:	887a      	ldrh	r2, [r7, #2]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80044ec:	e003      	b.n	80044f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044ee:	887b      	ldrh	r3, [r7, #2]
 80044f0:	041a      	lsls	r2, r3, #16
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	611a      	str	r2, [r3, #16]
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e12b      	b.n	800476a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff f9e6 	bl	80038f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2224      	movs	r2, #36	@ 0x24
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004552:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004562:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004564:	f001 fd70 	bl	8006048 <HAL_RCC_GetPCLK1Freq>
 8004568:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4a81      	ldr	r2, [pc, #516]	@ (8004774 <HAL_I2C_Init+0x274>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d807      	bhi.n	8004584 <HAL_I2C_Init+0x84>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4a80      	ldr	r2, [pc, #512]	@ (8004778 <HAL_I2C_Init+0x278>)
 8004578:	4293      	cmp	r3, r2
 800457a:	bf94      	ite	ls
 800457c:	2301      	movls	r3, #1
 800457e:	2300      	movhi	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	e006      	b.n	8004592 <HAL_I2C_Init+0x92>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a7d      	ldr	r2, [pc, #500]	@ (800477c <HAL_I2C_Init+0x27c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	bf94      	ite	ls
 800458c:	2301      	movls	r3, #1
 800458e:	2300      	movhi	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e0e7      	b.n	800476a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a78      	ldr	r2, [pc, #480]	@ (8004780 <HAL_I2C_Init+0x280>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	0c9b      	lsrs	r3, r3, #18
 80045a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	4a6a      	ldr	r2, [pc, #424]	@ (8004774 <HAL_I2C_Init+0x274>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d802      	bhi.n	80045d4 <HAL_I2C_Init+0xd4>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	3301      	adds	r3, #1
 80045d2:	e009      	b.n	80045e8 <HAL_I2C_Init+0xe8>
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	4a69      	ldr	r2, [pc, #420]	@ (8004784 <HAL_I2C_Init+0x284>)
 80045e0:	fba2 2303 	umull	r2, r3, r2, r3
 80045e4:	099b      	lsrs	r3, r3, #6
 80045e6:	3301      	adds	r3, #1
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	495c      	ldr	r1, [pc, #368]	@ (8004774 <HAL_I2C_Init+0x274>)
 8004604:	428b      	cmp	r3, r1
 8004606:	d819      	bhi.n	800463c <HAL_I2C_Init+0x13c>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1e59      	subs	r1, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	fbb1 f3f3 	udiv	r3, r1, r3
 8004616:	1c59      	adds	r1, r3, #1
 8004618:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800461c:	400b      	ands	r3, r1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <HAL_I2C_Init+0x138>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1e59      	subs	r1, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004630:	3301      	adds	r3, #1
 8004632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004636:	e051      	b.n	80046dc <HAL_I2C_Init+0x1dc>
 8004638:	2304      	movs	r3, #4
 800463a:	e04f      	b.n	80046dc <HAL_I2C_Init+0x1dc>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d111      	bne.n	8004668 <HAL_I2C_Init+0x168>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1e58      	subs	r0, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	440b      	add	r3, r1
 8004652:	fbb0 f3f3 	udiv	r3, r0, r3
 8004656:	3301      	adds	r3, #1
 8004658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e012      	b.n	800468e <HAL_I2C_Init+0x18e>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1e58      	subs	r0, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	0099      	lsls	r1, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	fbb0 f3f3 	udiv	r3, r0, r3
 800467e:	3301      	adds	r3, #1
 8004680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004684:	2b00      	cmp	r3, #0
 8004686:	bf0c      	ite	eq
 8004688:	2301      	moveq	r3, #1
 800468a:	2300      	movne	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_I2C_Init+0x196>
 8004692:	2301      	movs	r3, #1
 8004694:	e022      	b.n	80046dc <HAL_I2C_Init+0x1dc>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10e      	bne.n	80046bc <HAL_I2C_Init+0x1bc>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1e58      	subs	r0, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6859      	ldr	r1, [r3, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	440b      	add	r3, r1
 80046ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b0:	3301      	adds	r3, #1
 80046b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ba:	e00f      	b.n	80046dc <HAL_I2C_Init+0x1dc>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1e58      	subs	r0, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6859      	ldr	r1, [r3, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	0099      	lsls	r1, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d2:	3301      	adds	r3, #1
 80046d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	6809      	ldr	r1, [r1, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69da      	ldr	r2, [r3, #28]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800470a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6911      	ldr	r1, [r2, #16]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	68d2      	ldr	r2, [r2, #12]
 8004716:	4311      	orrs	r1, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	430b      	orrs	r3, r1
 800471e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695a      	ldr	r2, [r3, #20]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	000186a0 	.word	0x000186a0
 8004778:	001e847f 	.word	0x001e847f
 800477c:	003d08ff 	.word	0x003d08ff
 8004780:	431bde83 	.word	0x431bde83
 8004784:	10624dd3 	.word	0x10624dd3

08004788 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b088      	sub	sp, #32
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	461a      	mov	r2, r3
 8004794:	460b      	mov	r3, r1
 8004796:	817b      	strh	r3, [r7, #10]
 8004798:	4613      	mov	r3, r2
 800479a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800479c:	f7ff fb26 	bl	8003dec <HAL_GetTick>
 80047a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	f040 80e0 	bne.w	8004970 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2319      	movs	r3, #25
 80047b6:	2201      	movs	r2, #1
 80047b8:	4970      	ldr	r1, [pc, #448]	@ (800497c <HAL_I2C_Master_Transmit+0x1f4>)
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fe44 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0d3      	b.n	8004972 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_I2C_Master_Transmit+0x50>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e0cc      	b.n	8004972 <HAL_I2C_Master_Transmit+0x1ea>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d007      	beq.n	80047fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800480c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2221      	movs	r2, #33	@ 0x21
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2210      	movs	r2, #16
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	893a      	ldrh	r2, [r7, #8]
 800482e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4a50      	ldr	r2, [pc, #320]	@ (8004980 <HAL_I2C_Master_Transmit+0x1f8>)
 800483e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004840:	8979      	ldrh	r1, [r7, #10]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	6a3a      	ldr	r2, [r7, #32]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fbfe 	bl	8005048 <I2C_MasterRequestWrite>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e08d      	b.n	8004972 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800486c:	e066      	b.n	800493c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	6a39      	ldr	r1, [r7, #32]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 ff02 	bl	800567c <I2C_WaitOnTXEFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004882:	2b04      	cmp	r3, #4
 8004884:	d107      	bne.n	8004896 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004894:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e06b      	b.n	8004972 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	781a      	ldrb	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d11b      	bne.n	8004910 <HAL_I2C_Master_Transmit+0x188>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d017      	beq.n	8004910 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	6a39      	ldr	r1, [r7, #32]
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 fef9 	bl	800570c <I2C_WaitOnBTFFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00d      	beq.n	800493c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004924:	2b04      	cmp	r3, #4
 8004926:	d107      	bne.n	8004938 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004936:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e01a      	b.n	8004972 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004940:	2b00      	cmp	r3, #0
 8004942:	d194      	bne.n	800486e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	e000      	b.n	8004972 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004970:	2302      	movs	r3, #2
  }
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	00100002 	.word	0x00100002
 8004980:	ffff0000 	.word	0xffff0000

08004984 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	4608      	mov	r0, r1
 800498e:	4611      	mov	r1, r2
 8004990:	461a      	mov	r2, r3
 8004992:	4603      	mov	r3, r0
 8004994:	817b      	strh	r3, [r7, #10]
 8004996:	460b      	mov	r3, r1
 8004998:	813b      	strh	r3, [r7, #8]
 800499a:	4613      	mov	r3, r2
 800499c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800499e:	f7ff fa25 	bl	8003dec <HAL_GetTick>
 80049a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	f040 80d9 	bne.w	8004b64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	2319      	movs	r3, #25
 80049b8:	2201      	movs	r2, #1
 80049ba:	496d      	ldr	r1, [pc, #436]	@ (8004b70 <HAL_I2C_Mem_Write+0x1ec>)
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fd43 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80049c8:	2302      	movs	r3, #2
 80049ca:	e0cc      	b.n	8004b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_I2C_Mem_Write+0x56>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e0c5      	b.n	8004b66 <HAL_I2C_Mem_Write+0x1e2>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d007      	beq.n	8004a00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2221      	movs	r2, #33	@ 0x21
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2240      	movs	r2, #64	@ 0x40
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6a3a      	ldr	r2, [r7, #32]
 8004a2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004a30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4a4d      	ldr	r2, [pc, #308]	@ (8004b74 <HAL_I2C_Mem_Write+0x1f0>)
 8004a40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a42:	88f8      	ldrh	r0, [r7, #6]
 8004a44:	893a      	ldrh	r2, [r7, #8]
 8004a46:	8979      	ldrh	r1, [r7, #10]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	9301      	str	r3, [sp, #4]
 8004a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	4603      	mov	r3, r0
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 fb7a 	bl	800514c <I2C_RequestMemoryWrite>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d052      	beq.n	8004b04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e081      	b.n	8004b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f000 fe08 	bl	800567c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00d      	beq.n	8004a8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d107      	bne.n	8004a8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e06b      	b.n	8004b66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a92:	781a      	ldrb	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d11b      	bne.n	8004b04 <HAL_I2C_Mem_Write+0x180>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d017      	beq.n	8004b04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	1c5a      	adds	r2, r3, #1
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1aa      	bne.n	8004a62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fdfb 	bl	800570c <I2C_WaitOnBTFFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00d      	beq.n	8004b38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d107      	bne.n	8004b34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e016      	b.n	8004b66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e000      	b.n	8004b66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	00100002 	.word	0x00100002
 8004b74:	ffff0000 	.word	0xffff0000

08004b78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08c      	sub	sp, #48	@ 0x30
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	4608      	mov	r0, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	461a      	mov	r2, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	817b      	strh	r3, [r7, #10]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	813b      	strh	r3, [r7, #8]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b96:	f7ff f929 	bl	8003dec <HAL_GetTick>
 8004b9a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	f040 8244 	bne.w	8005032 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	2319      	movs	r3, #25
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	4982      	ldr	r1, [pc, #520]	@ (8004dbc <HAL_I2C_Mem_Read+0x244>)
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 fc47 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e237      	b.n	8005034 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_I2C_Mem_Read+0x5a>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e230      	b.n	8005034 <HAL_I2C_Mem_Read+0x4bc>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d007      	beq.n	8004bf8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2222      	movs	r2, #34	@ 0x22
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2240      	movs	r2, #64	@ 0x40
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004c28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4a62      	ldr	r2, [pc, #392]	@ (8004dc0 <HAL_I2C_Mem_Read+0x248>)
 8004c38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c3a:	88f8      	ldrh	r0, [r7, #6]
 8004c3c:	893a      	ldrh	r2, [r7, #8]
 8004c3e:	8979      	ldrh	r1, [r7, #10]
 8004c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c42:	9301      	str	r3, [sp, #4]
 8004c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	4603      	mov	r3, r0
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fb14 	bl	8005278 <I2C_RequestMemoryRead>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e1ec      	b.n	8005034 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d113      	bne.n	8004c8a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c62:	2300      	movs	r3, #0
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	61fb      	str	r3, [r7, #28]
 8004c76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	e1c0      	b.n	800500c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d11e      	bne.n	8004cd0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ca0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ca2:	b672      	cpsid	i
}
 8004ca4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ccc:	b662      	cpsie	i
}
 8004cce:	e035      	b.n	8004d3c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d11e      	bne.n	8004d16 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ce6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ce8:	b672      	cpsid	i
}
 8004cea:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d12:	b662      	cpsie	i
}
 8004d14:	e012      	b.n	8004d3c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d24:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004d3c:	e166      	b.n	800500c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	f200 811f 	bhi.w	8004f86 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d123      	bne.n	8004d98 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 fd21 	bl	800579c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e167      	b.n	8005034 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d96:	e139      	b.n	800500c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d152      	bne.n	8004e46 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da6:	2200      	movs	r2, #0
 8004da8:	4906      	ldr	r1, [pc, #24]	@ (8004dc4 <HAL_I2C_Mem_Read+0x24c>)
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fb4c 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d008      	beq.n	8004dc8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e13c      	b.n	8005034 <HAL_I2C_Mem_Read+0x4bc>
 8004dba:	bf00      	nop
 8004dbc:	00100002 	.word	0x00100002
 8004dc0:	ffff0000 	.word	0xffff0000
 8004dc4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004dc8:	b672      	cpsid	i
}
 8004dca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691a      	ldr	r2, [r3, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e0e:	b662      	cpsie	i
}
 8004e10:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e44:	e0e2      	b.n	800500c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	497b      	ldr	r1, [pc, #492]	@ (800503c <HAL_I2C_Mem_Read+0x4c4>)
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 faf9 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0e9      	b.n	8005034 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e70:	b672      	cpsid	i
}
 8004e72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691a      	ldr	r2, [r3, #16]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ea6:	4b66      	ldr	r3, [pc, #408]	@ (8005040 <HAL_I2C_Mem_Read+0x4c8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	08db      	lsrs	r3, r3, #3
 8004eac:	4a65      	ldr	r2, [pc, #404]	@ (8005044 <HAL_I2C_Mem_Read+0x4cc>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	0a1a      	lsrs	r2, r3, #8
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	00da      	lsls	r2, r3, #3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d118      	bne.n	8004efe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	f043 0220 	orr.w	r2, r3, #32
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004eee:	b662      	cpsie	i
}
 8004ef0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e09a      	b.n	8005034 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d1d9      	bne.n	8004ec0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004f4e:	b662      	cpsie	i
}
 8004f50:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f84:	e042      	b.n	800500c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fc06 	bl	800579c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e04c      	b.n	8005034 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d118      	bne.n	800500c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005010:	2b00      	cmp	r3, #0
 8005012:	f47f ae94 	bne.w	8004d3e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e000      	b.n	8005034 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005032:	2302      	movs	r3, #2
  }
}
 8005034:	4618      	mov	r0, r3
 8005036:	3728      	adds	r7, #40	@ 0x28
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	00010004 	.word	0x00010004
 8005040:	2000003c 	.word	0x2000003c
 8005044:	14f8b589 	.word	0x14f8b589

08005048 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	460b      	mov	r3, r1
 8005056:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b08      	cmp	r3, #8
 8005062:	d006      	beq.n	8005072 <I2C_MasterRequestWrite+0x2a>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d003      	beq.n	8005072 <I2C_MasterRequestWrite+0x2a>
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005070:	d108      	bne.n	8005084 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e00b      	b.n	800509c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005088:	2b12      	cmp	r3, #18
 800508a:	d107      	bne.n	800509c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800509a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f9cd 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00d      	beq.n	80050d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c2:	d103      	bne.n	80050cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e035      	b.n	800513c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050d8:	d108      	bne.n	80050ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050da:	897b      	ldrh	r3, [r7, #10]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050e8:	611a      	str	r2, [r3, #16]
 80050ea:	e01b      	b.n	8005124 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050ec:	897b      	ldrh	r3, [r7, #10]
 80050ee:	11db      	asrs	r3, r3, #7
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	f003 0306 	and.w	r3, r3, #6
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f063 030f 	orn	r3, r3, #15
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	490e      	ldr	r1, [pc, #56]	@ (8005144 <I2C_MasterRequestWrite+0xfc>)
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 fa16 	bl	800553c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e010      	b.n	800513c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800511a:	897b      	ldrh	r3, [r7, #10]
 800511c:	b2da      	uxtb	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	4907      	ldr	r1, [pc, #28]	@ (8005148 <I2C_MasterRequestWrite+0x100>)
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fa06 	bl	800553c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	00010008 	.word	0x00010008
 8005148:	00010002 	.word	0x00010002

0800514c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af02      	add	r7, sp, #8
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	4608      	mov	r0, r1
 8005156:	4611      	mov	r1, r2
 8005158:	461a      	mov	r2, r3
 800515a:	4603      	mov	r3, r0
 800515c:	817b      	strh	r3, [r7, #10]
 800515e:	460b      	mov	r3, r1
 8005160:	813b      	strh	r3, [r7, #8]
 8005162:	4613      	mov	r3, r2
 8005164:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005174:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	2200      	movs	r2, #0
 800517e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f960 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00d      	beq.n	80051aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005198:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519c:	d103      	bne.n	80051a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e05f      	b.n	800526a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051aa:	897b      	ldrh	r3, [r7, #10]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	461a      	mov	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	6a3a      	ldr	r2, [r7, #32]
 80051be:	492d      	ldr	r1, [pc, #180]	@ (8005274 <I2C_RequestMemoryWrite+0x128>)
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f9bb 	bl	800553c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e04c      	b.n	800526a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e8:	6a39      	ldr	r1, [r7, #32]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fa46 	bl	800567c <I2C_WaitOnTXEFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00d      	beq.n	8005212 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d107      	bne.n	800520e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800520c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e02b      	b.n	800526a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d105      	bne.n	8005224 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005218:	893b      	ldrh	r3, [r7, #8]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	611a      	str	r2, [r3, #16]
 8005222:	e021      	b.n	8005268 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005224:	893b      	ldrh	r3, [r7, #8]
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	b29b      	uxth	r3, r3
 800522a:	b2da      	uxtb	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005234:	6a39      	ldr	r1, [r7, #32]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 fa20 	bl	800567c <I2C_WaitOnTXEFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00d      	beq.n	800525e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	2b04      	cmp	r3, #4
 8005248:	d107      	bne.n	800525a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005258:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e005      	b.n	800526a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800525e:	893b      	ldrh	r3, [r7, #8]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	00010002 	.word	0x00010002

08005278 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	4608      	mov	r0, r1
 8005282:	4611      	mov	r1, r2
 8005284:	461a      	mov	r2, r3
 8005286:	4603      	mov	r3, r0
 8005288:	817b      	strh	r3, [r7, #10]
 800528a:	460b      	mov	r3, r1
 800528c:	813b      	strh	r3, [r7, #8]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f8c2 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00d      	beq.n	80052e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052d8:	d103      	bne.n	80052e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e0aa      	b.n	800543c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052e6:	897b      	ldrh	r3, [r7, #10]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	6a3a      	ldr	r2, [r7, #32]
 80052fa:	4952      	ldr	r1, [pc, #328]	@ (8005444 <I2C_RequestMemoryRead+0x1cc>)
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f91d 	bl	800553c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e097      	b.n	800543c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005324:	6a39      	ldr	r1, [r7, #32]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f9a8 	bl	800567c <I2C_WaitOnTXEFlagUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00d      	beq.n	800534e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005336:	2b04      	cmp	r3, #4
 8005338:	d107      	bne.n	800534a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005348:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e076      	b.n	800543c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800534e:	88fb      	ldrh	r3, [r7, #6]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d105      	bne.n	8005360 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005354:	893b      	ldrh	r3, [r7, #8]
 8005356:	b2da      	uxtb	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	611a      	str	r2, [r3, #16]
 800535e:	e021      	b.n	80053a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005360:	893b      	ldrh	r3, [r7, #8]
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	b29b      	uxth	r3, r3
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800536e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005370:	6a39      	ldr	r1, [r7, #32]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f982 	bl	800567c <I2C_WaitOnTXEFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	2b04      	cmp	r3, #4
 8005384:	d107      	bne.n	8005396 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005394:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e050      	b.n	800543c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800539a:	893b      	ldrh	r3, [r7, #8]
 800539c:	b2da      	uxtb	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a6:	6a39      	ldr	r1, [r7, #32]
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f967 	bl	800567c <I2C_WaitOnTXEFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00d      	beq.n	80053d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d107      	bne.n	80053cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e035      	b.n	800543c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f82b 	bl	8005448 <I2C_WaitOnFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00d      	beq.n	8005414 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005406:	d103      	bne.n	8005410 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800540e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e013      	b.n	800543c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005414:	897b      	ldrh	r3, [r7, #10]
 8005416:	b2db      	uxtb	r3, r3
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	b2da      	uxtb	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	6a3a      	ldr	r2, [r7, #32]
 8005428:	4906      	ldr	r1, [pc, #24]	@ (8005444 <I2C_RequestMemoryRead+0x1cc>)
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f886 	bl	800553c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	00010002 	.word	0x00010002

08005448 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	4613      	mov	r3, r2
 8005456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005458:	e048      	b.n	80054ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d044      	beq.n	80054ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005462:	f7fe fcc3 	bl	8003dec <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	683a      	ldr	r2, [r7, #0]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d139      	bne.n	80054ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	0c1b      	lsrs	r3, r3, #16
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b01      	cmp	r3, #1
 8005480:	d10d      	bne.n	800549e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	43da      	mvns	r2, r3
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4013      	ands	r3, r2
 800548e:	b29b      	uxth	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	e00c      	b.n	80054b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	43da      	mvns	r2, r3
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4013      	ands	r3, r2
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	bf0c      	ite	eq
 80054b0:	2301      	moveq	r3, #1
 80054b2:	2300      	movne	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	461a      	mov	r2, r3
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d116      	bne.n	80054ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d8:	f043 0220 	orr.w	r2, r3, #32
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e023      	b.n	8005534 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	0c1b      	lsrs	r3, r3, #16
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d10d      	bne.n	8005512 <I2C_WaitOnFlagUntilTimeout+0xca>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	43da      	mvns	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4013      	ands	r3, r2
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf0c      	ite	eq
 8005508:	2301      	moveq	r3, #1
 800550a:	2300      	movne	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	461a      	mov	r2, r3
 8005510:	e00c      	b.n	800552c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	43da      	mvns	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	4013      	ands	r3, r2
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	bf0c      	ite	eq
 8005524:	2301      	moveq	r3, #1
 8005526:	2300      	movne	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	429a      	cmp	r2, r3
 8005530:	d093      	beq.n	800545a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800554a:	e071      	b.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800555a:	d123      	bne.n	80055a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800556a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005574:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005590:	f043 0204 	orr.w	r2, r3, #4
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e067      	b.n	8005674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055aa:	d041      	beq.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ac:	f7fe fc1e 	bl	8003dec <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d302      	bcc.n	80055c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d136      	bne.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	0c1b      	lsrs	r3, r3, #16
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d10c      	bne.n	80055e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	43da      	mvns	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4013      	ands	r3, r2
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bf14      	ite	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	2300      	moveq	r3, #0
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	e00b      	b.n	80055fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	43da      	mvns	r2, r3
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4013      	ands	r3, r2
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf14      	ite	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	2300      	moveq	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d016      	beq.n	8005630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561c:	f043 0220 	orr.w	r2, r3, #32
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e021      	b.n	8005674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	0c1b      	lsrs	r3, r3, #16
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b01      	cmp	r3, #1
 8005638:	d10c      	bne.n	8005654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	43da      	mvns	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4013      	ands	r3, r2
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	bf14      	ite	ne
 800564c:	2301      	movne	r3, #1
 800564e:	2300      	moveq	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	e00b      	b.n	800566c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	43da      	mvns	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4013      	ands	r3, r2
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	bf14      	ite	ne
 8005666:	2301      	movne	r3, #1
 8005668:	2300      	moveq	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	f47f af6d 	bne.w	800554c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005688:	e034      	b.n	80056f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 f8e3 	bl	8005856 <I2C_IsAcknowledgeFailed>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e034      	b.n	8005704 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d028      	beq.n	80056f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a2:	f7fe fba3 	bl	8003dec <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d302      	bcc.n	80056b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d11d      	bne.n	80056f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c2:	2b80      	cmp	r3, #128	@ 0x80
 80056c4:	d016      	beq.n	80056f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e0:	f043 0220 	orr.w	r2, r3, #32
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e007      	b.n	8005704 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fe:	2b80      	cmp	r3, #128	@ 0x80
 8005700:	d1c3      	bne.n	800568a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005718:	e034      	b.n	8005784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 f89b 	bl	8005856 <I2C_IsAcknowledgeFailed>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e034      	b.n	8005794 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d028      	beq.n	8005784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005732:	f7fe fb5b 	bl	8003dec <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	429a      	cmp	r2, r3
 8005740:	d302      	bcc.n	8005748 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d11d      	bne.n	8005784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b04      	cmp	r3, #4
 8005754:	d016      	beq.n	8005784 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005770:	f043 0220 	orr.w	r2, r3, #32
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e007      	b.n	8005794 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b04      	cmp	r3, #4
 8005790:	d1c3      	bne.n	800571a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057a8:	e049      	b.n	800583e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	f003 0310 	and.w	r3, r3, #16
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d119      	bne.n	80057ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0210 	mvn.w	r2, #16
 80057c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e030      	b.n	800584e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ec:	f7fe fafe 	bl	8003dec <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d11d      	bne.n	800583e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	2b40      	cmp	r3, #64	@ 0x40
 800580e:	d016      	beq.n	800583e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582a:	f043 0220 	orr.w	r2, r3, #32
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e007      	b.n	800584e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005848:	2b40      	cmp	r3, #64	@ 0x40
 800584a:	d1ae      	bne.n	80057aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005856:	b480      	push	{r7}
 8005858:	b083      	sub	sp, #12
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005868:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800586c:	d11b      	bne.n	80058a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005876:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2220      	movs	r2, #32
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	f043 0204 	orr.w	r2, r3, #4
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr
	...

080058b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e272      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 8087 	beq.w	80059e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058d4:	4b92      	ldr	r3, [pc, #584]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f003 030c 	and.w	r3, r3, #12
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d00c      	beq.n	80058fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80058e0:	4b8f      	ldr	r3, [pc, #572]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f003 030c 	and.w	r3, r3, #12
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d112      	bne.n	8005912 <HAL_RCC_OscConfig+0x5e>
 80058ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058f8:	d10b      	bne.n	8005912 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058fa:	4b89      	ldr	r3, [pc, #548]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d06c      	beq.n	80059e0 <HAL_RCC_OscConfig+0x12c>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d168      	bne.n	80059e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e24c      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800591a:	d106      	bne.n	800592a <HAL_RCC_OscConfig+0x76>
 800591c:	4b80      	ldr	r3, [pc, #512]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a7f      	ldr	r2, [pc, #508]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	e02e      	b.n	8005988 <HAL_RCC_OscConfig+0xd4>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10c      	bne.n	800594c <HAL_RCC_OscConfig+0x98>
 8005932:	4b7b      	ldr	r3, [pc, #492]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a7a      	ldr	r2, [pc, #488]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	4b78      	ldr	r3, [pc, #480]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a77      	ldr	r2, [pc, #476]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005944:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e01d      	b.n	8005988 <HAL_RCC_OscConfig+0xd4>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005954:	d10c      	bne.n	8005970 <HAL_RCC_OscConfig+0xbc>
 8005956:	4b72      	ldr	r3, [pc, #456]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a71      	ldr	r2, [pc, #452]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 800595c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	4b6f      	ldr	r3, [pc, #444]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a6e      	ldr	r2, [pc, #440]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	e00b      	b.n	8005988 <HAL_RCC_OscConfig+0xd4>
 8005970:	4b6b      	ldr	r3, [pc, #428]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a6a      	ldr	r2, [pc, #424]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	4b68      	ldr	r3, [pc, #416]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a67      	ldr	r2, [pc, #412]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005986:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d013      	beq.n	80059b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005990:	f7fe fa2c 	bl	8003dec <HAL_GetTick>
 8005994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005998:	f7fe fa28 	bl	8003dec <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b64      	cmp	r3, #100	@ 0x64
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e200      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059aa:	4b5d      	ldr	r3, [pc, #372]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0f0      	beq.n	8005998 <HAL_RCC_OscConfig+0xe4>
 80059b6:	e014      	b.n	80059e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b8:	f7fe fa18 	bl	8003dec <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059be:	e008      	b.n	80059d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c0:	f7fe fa14 	bl	8003dec <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b64      	cmp	r3, #100	@ 0x64
 80059cc:	d901      	bls.n	80059d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e1ec      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059d2:	4b53      	ldr	r3, [pc, #332]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1f0      	bne.n	80059c0 <HAL_RCC_OscConfig+0x10c>
 80059de:	e000      	b.n	80059e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d063      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80059fa:	4b49      	ldr	r3, [pc, #292]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f003 030c 	and.w	r3, r3, #12
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d11c      	bne.n	8005a40 <HAL_RCC_OscConfig+0x18c>
 8005a06:	4b46      	ldr	r3, [pc, #280]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d116      	bne.n	8005a40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a12:	4b43      	ldr	r3, [pc, #268]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d005      	beq.n	8005a2a <HAL_RCC_OscConfig+0x176>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d001      	beq.n	8005a2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e1c0      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	4939      	ldr	r1, [pc, #228]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a3e:	e03a      	b.n	8005ab6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d020      	beq.n	8005a8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a48:	4b36      	ldr	r3, [pc, #216]	@ (8005b24 <HAL_RCC_OscConfig+0x270>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4e:	f7fe f9cd 	bl	8003dec <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a56:	f7fe f9c9 	bl	8003dec <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e1a1      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a68:	4b2d      	ldr	r3, [pc, #180]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0f0      	beq.n	8005a56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a74:	4b2a      	ldr	r3, [pc, #168]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	4927      	ldr	r1, [pc, #156]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	600b      	str	r3, [r1, #0]
 8005a88:	e015      	b.n	8005ab6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a8a:	4b26      	ldr	r3, [pc, #152]	@ (8005b24 <HAL_RCC_OscConfig+0x270>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a90:	f7fe f9ac 	bl	8003dec <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a96:	e008      	b.n	8005aaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a98:	f7fe f9a8 	bl	8003dec <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e180      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1f0      	bne.n	8005a98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d03a      	beq.n	8005b38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d019      	beq.n	8005afe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005aca:	4b17      	ldr	r3, [pc, #92]	@ (8005b28 <HAL_RCC_OscConfig+0x274>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad0:	f7fe f98c 	bl	8003dec <HAL_GetTick>
 8005ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ad8:	f7fe f988 	bl	8003dec <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e160      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aea:	4b0d      	ldr	r3, [pc, #52]	@ (8005b20 <HAL_RCC_OscConfig+0x26c>)
 8005aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005af6:	2001      	movs	r0, #1
 8005af8:	f000 face 	bl	8006098 <RCC_Delay>
 8005afc:	e01c      	b.n	8005b38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005afe:	4b0a      	ldr	r3, [pc, #40]	@ (8005b28 <HAL_RCC_OscConfig+0x274>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b04:	f7fe f972 	bl	8003dec <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b0a:	e00f      	b.n	8005b2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b0c:	f7fe f96e 	bl	8003dec <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d908      	bls.n	8005b2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e146      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
 8005b1e:	bf00      	nop
 8005b20:	40021000 	.word	0x40021000
 8005b24:	42420000 	.word	0x42420000
 8005b28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b2c:	4b92      	ldr	r3, [pc, #584]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e9      	bne.n	8005b0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80a6 	beq.w	8005c92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b46:	2300      	movs	r3, #0
 8005b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b4a:	4b8b      	ldr	r3, [pc, #556]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10d      	bne.n	8005b72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b56:	4b88      	ldr	r3, [pc, #544]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	4a87      	ldr	r2, [pc, #540]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b60:	61d3      	str	r3, [r2, #28]
 8005b62:	4b85      	ldr	r3, [pc, #532]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b6a:	60bb      	str	r3, [r7, #8]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b72:	4b82      	ldr	r3, [pc, #520]	@ (8005d7c <HAL_RCC_OscConfig+0x4c8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d118      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b7e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d7c <HAL_RCC_OscConfig+0x4c8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a7e      	ldr	r2, [pc, #504]	@ (8005d7c <HAL_RCC_OscConfig+0x4c8>)
 8005b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b8a:	f7fe f92f 	bl	8003dec <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b90:	e008      	b.n	8005ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b92:	f7fe f92b 	bl	8003dec <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	2b64      	cmp	r3, #100	@ 0x64
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e103      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba4:	4b75      	ldr	r3, [pc, #468]	@ (8005d7c <HAL_RCC_OscConfig+0x4c8>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0f0      	beq.n	8005b92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d106      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x312>
 8005bb8:	4b6f      	ldr	r3, [pc, #444]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	4a6e      	ldr	r2, [pc, #440]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005bbe:	f043 0301 	orr.w	r3, r3, #1
 8005bc2:	6213      	str	r3, [r2, #32]
 8005bc4:	e02d      	b.n	8005c22 <HAL_RCC_OscConfig+0x36e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10c      	bne.n	8005be8 <HAL_RCC_OscConfig+0x334>
 8005bce:	4b6a      	ldr	r3, [pc, #424]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	4a69      	ldr	r2, [pc, #420]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005bd4:	f023 0301 	bic.w	r3, r3, #1
 8005bd8:	6213      	str	r3, [r2, #32]
 8005bda:	4b67      	ldr	r3, [pc, #412]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	4a66      	ldr	r2, [pc, #408]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005be0:	f023 0304 	bic.w	r3, r3, #4
 8005be4:	6213      	str	r3, [r2, #32]
 8005be6:	e01c      	b.n	8005c22 <HAL_RCC_OscConfig+0x36e>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	2b05      	cmp	r3, #5
 8005bee:	d10c      	bne.n	8005c0a <HAL_RCC_OscConfig+0x356>
 8005bf0:	4b61      	ldr	r3, [pc, #388]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	4a60      	ldr	r2, [pc, #384]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005bf6:	f043 0304 	orr.w	r3, r3, #4
 8005bfa:	6213      	str	r3, [r2, #32]
 8005bfc:	4b5e      	ldr	r3, [pc, #376]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	4a5d      	ldr	r2, [pc, #372]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	6213      	str	r3, [r2, #32]
 8005c08:	e00b      	b.n	8005c22 <HAL_RCC_OscConfig+0x36e>
 8005c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	4a5a      	ldr	r2, [pc, #360]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005c10:	f023 0301 	bic.w	r3, r3, #1
 8005c14:	6213      	str	r3, [r2, #32]
 8005c16:	4b58      	ldr	r3, [pc, #352]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	4a57      	ldr	r2, [pc, #348]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005c1c:	f023 0304 	bic.w	r3, r3, #4
 8005c20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d015      	beq.n	8005c56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c2a:	f7fe f8df 	bl	8003dec <HAL_GetTick>
 8005c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c30:	e00a      	b.n	8005c48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c32:	f7fe f8db 	bl	8003dec <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e0b1      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c48:	4b4b      	ldr	r3, [pc, #300]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0ee      	beq.n	8005c32 <HAL_RCC_OscConfig+0x37e>
 8005c54:	e014      	b.n	8005c80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c56:	f7fe f8c9 	bl	8003dec <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c5c:	e00a      	b.n	8005c74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5e:	f7fe f8c5 	bl	8003dec <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e09b      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c74:	4b40      	ldr	r3, [pc, #256]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1ee      	bne.n	8005c5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c80:	7dfb      	ldrb	r3, [r7, #23]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d105      	bne.n	8005c92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c86:	4b3c      	ldr	r3, [pc, #240]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	4a3b      	ldr	r2, [pc, #236]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005c8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 8087 	beq.w	8005daa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c9c:	4b36      	ldr	r3, [pc, #216]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f003 030c 	and.w	r3, r3, #12
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d061      	beq.n	8005d6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d146      	bne.n	8005d3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb0:	4b33      	ldr	r3, [pc, #204]	@ (8005d80 <HAL_RCC_OscConfig+0x4cc>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb6:	f7fe f899 	bl	8003dec <HAL_GetTick>
 8005cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cbe:	f7fe f895 	bl	8003dec <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e06d      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cd0:	4b29      	ldr	r3, [pc, #164]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1f0      	bne.n	8005cbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ce4:	d108      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ce6:	4b24      	ldr	r3, [pc, #144]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	4921      	ldr	r1, [pc, #132]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a19      	ldr	r1, [r3, #32]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	491b      	ldr	r1, [pc, #108]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d10:	4b1b      	ldr	r3, [pc, #108]	@ (8005d80 <HAL_RCC_OscConfig+0x4cc>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d16:	f7fe f869 	bl	8003dec <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1e:	f7fe f865 	bl	8003dec <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e03d      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d30:	4b11      	ldr	r3, [pc, #68]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0f0      	beq.n	8005d1e <HAL_RCC_OscConfig+0x46a>
 8005d3c:	e035      	b.n	8005daa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3e:	4b10      	ldr	r3, [pc, #64]	@ (8005d80 <HAL_RCC_OscConfig+0x4cc>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d44:	f7fe f852 	bl	8003dec <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fe f84e 	bl	8003dec <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e026      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d5e:	4b06      	ldr	r3, [pc, #24]	@ (8005d78 <HAL_RCC_OscConfig+0x4c4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0x498>
 8005d6a:	e01e      	b.n	8005daa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d107      	bne.n	8005d84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e019      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	40007000 	.word	0x40007000
 8005d80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d84:	4b0b      	ldr	r3, [pc, #44]	@ (8005db4 <HAL_RCC_OscConfig+0x500>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d106      	bne.n	8005da6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d001      	beq.n	8005daa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40021000 	.word	0x40021000

08005db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0d0      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8005f78 <HAL_RCC_ClockConfig+0x1c0>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d910      	bls.n	8005dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dda:	4b67      	ldr	r3, [pc, #412]	@ (8005f78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f023 0207 	bic.w	r2, r3, #7
 8005de2:	4965      	ldr	r1, [pc, #404]	@ (8005f78 <HAL_RCC_ClockConfig+0x1c0>)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dea:	4b63      	ldr	r3, [pc, #396]	@ (8005f78 <HAL_RCC_ClockConfig+0x1c0>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d001      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0b8      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d020      	beq.n	8005e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e14:	4b59      	ldr	r3, [pc, #356]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4a58      	ldr	r2, [pc, #352]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0308 	and.w	r3, r3, #8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e2c:	4b53      	ldr	r3, [pc, #332]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	4a52      	ldr	r2, [pc, #328]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e38:	4b50      	ldr	r3, [pc, #320]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	494d      	ldr	r1, [pc, #308]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d040      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d107      	bne.n	8005e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e5e:	4b47      	ldr	r3, [pc, #284]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d115      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e07f      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d107      	bne.n	8005e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e76:	4b41      	ldr	r3, [pc, #260]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d109      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e073      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e86:	4b3d      	ldr	r3, [pc, #244]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e06b      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e96:	4b39      	ldr	r3, [pc, #228]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f023 0203 	bic.w	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	4936      	ldr	r1, [pc, #216]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ea8:	f7fd ffa0 	bl	8003dec <HAL_GetTick>
 8005eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eae:	e00a      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb0:	f7fd ff9c 	bl	8003dec <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e053      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f003 020c 	and.w	r2, r3, #12
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d1eb      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ed8:	4b27      	ldr	r3, [pc, #156]	@ (8005f78 <HAL_RCC_ClockConfig+0x1c0>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d210      	bcs.n	8005f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ee6:	4b24      	ldr	r3, [pc, #144]	@ (8005f78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f023 0207 	bic.w	r2, r3, #7
 8005eee:	4922      	ldr	r1, [pc, #136]	@ (8005f78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef6:	4b20      	ldr	r3, [pc, #128]	@ (8005f78 <HAL_RCC_ClockConfig+0x1c0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d001      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e032      	b.n	8005f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d008      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f14:	4b19      	ldr	r3, [pc, #100]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4916      	ldr	r1, [pc, #88]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0308 	and.w	r3, r3, #8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f32:	4b12      	ldr	r3, [pc, #72]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	490e      	ldr	r1, [pc, #56]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f46:	f000 f821 	bl	8005f8c <HAL_RCC_GetSysClockFreq>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f7c <HAL_RCC_ClockConfig+0x1c4>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	091b      	lsrs	r3, r3, #4
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	490a      	ldr	r1, [pc, #40]	@ (8005f80 <HAL_RCC_ClockConfig+0x1c8>)
 8005f58:	5ccb      	ldrb	r3, [r1, r3]
 8005f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5e:	4a09      	ldr	r2, [pc, #36]	@ (8005f84 <HAL_RCC_ClockConfig+0x1cc>)
 8005f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f62:	4b09      	ldr	r3, [pc, #36]	@ (8005f88 <HAL_RCC_ClockConfig+0x1d0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fd fefe 	bl	8003d68 <HAL_InitTick>

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	40022000 	.word	0x40022000
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	0800c2a4 	.word	0x0800c2a4
 8005f84:	2000003c 	.word	0x2000003c
 8005f88:	20000040 	.word	0x20000040

08005f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	2300      	movs	r3, #0
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x94>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d002      	beq.n	8005fbc <HAL_RCC_GetSysClockFreq+0x30>
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d003      	beq.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x36>
 8005fba:	e027      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005fbc:	4b19      	ldr	r3, [pc, #100]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x98>)
 8005fbe:	613b      	str	r3, [r7, #16]
      break;
 8005fc0:	e027      	b.n	8006012 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	0c9b      	lsrs	r3, r3, #18
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	4a17      	ldr	r2, [pc, #92]	@ (8006028 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005fcc:	5cd3      	ldrb	r3, [r2, r3]
 8005fce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d010      	beq.n	8005ffc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005fda:	4b11      	ldr	r3, [pc, #68]	@ (8006020 <HAL_RCC_GetSysClockFreq+0x94>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	0c5b      	lsrs	r3, r3, #17
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	4a11      	ldr	r2, [pc, #68]	@ (800602c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005fe6:	5cd3      	ldrb	r3, [r2, r3]
 8005fe8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a0d      	ldr	r2, [pc, #52]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x98>)
 8005fee:	fb03 f202 	mul.w	r2, r3, r2
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	e004      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8006030 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006000:	fb02 f303 	mul.w	r3, r2, r3
 8006004:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	613b      	str	r3, [r7, #16]
      break;
 800600a:	e002      	b.n	8006012 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800600c:	4b05      	ldr	r3, [pc, #20]	@ (8006024 <HAL_RCC_GetSysClockFreq+0x98>)
 800600e:	613b      	str	r3, [r7, #16]
      break;
 8006010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006012:	693b      	ldr	r3, [r7, #16]
}
 8006014:	4618      	mov	r0, r3
 8006016:	371c      	adds	r7, #28
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40021000 	.word	0x40021000
 8006024:	007a1200 	.word	0x007a1200
 8006028:	0800c2bc 	.word	0x0800c2bc
 800602c:	0800c2cc 	.word	0x0800c2cc
 8006030:	003d0900 	.word	0x003d0900

08006034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006034:	b480      	push	{r7}
 8006036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006038:	4b02      	ldr	r3, [pc, #8]	@ (8006044 <HAL_RCC_GetHCLKFreq+0x10>)
 800603a:	681b      	ldr	r3, [r3, #0]
}
 800603c:	4618      	mov	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr
 8006044:	2000003c 	.word	0x2000003c

08006048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800604c:	f7ff fff2 	bl	8006034 <HAL_RCC_GetHCLKFreq>
 8006050:	4602      	mov	r2, r0
 8006052:	4b05      	ldr	r3, [pc, #20]	@ (8006068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	0a1b      	lsrs	r3, r3, #8
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	4903      	ldr	r1, [pc, #12]	@ (800606c <HAL_RCC_GetPCLK1Freq+0x24>)
 800605e:	5ccb      	ldrb	r3, [r1, r3]
 8006060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006064:	4618      	mov	r0, r3
 8006066:	bd80      	pop	{r7, pc}
 8006068:	40021000 	.word	0x40021000
 800606c:	0800c2b4 	.word	0x0800c2b4

08006070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006074:	f7ff ffde 	bl	8006034 <HAL_RCC_GetHCLKFreq>
 8006078:	4602      	mov	r2, r0
 800607a:	4b05      	ldr	r3, [pc, #20]	@ (8006090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	0adb      	lsrs	r3, r3, #11
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	4903      	ldr	r1, [pc, #12]	@ (8006094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006086:	5ccb      	ldrb	r3, [r1, r3]
 8006088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800608c:	4618      	mov	r0, r3
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40021000 	.word	0x40021000
 8006094:	0800c2b4 	.word	0x0800c2b4

08006098 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80060a0:	4b0a      	ldr	r3, [pc, #40]	@ (80060cc <RCC_Delay+0x34>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a0a      	ldr	r2, [pc, #40]	@ (80060d0 <RCC_Delay+0x38>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	0a5b      	lsrs	r3, r3, #9
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
 80060b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80060b4:	bf00      	nop
  }
  while (Delay --);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	1e5a      	subs	r2, r3, #1
 80060ba:	60fa      	str	r2, [r7, #12]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1f9      	bne.n	80060b4 <RCC_Delay+0x1c>
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr
 80060cc:	2000003c 	.word	0x2000003c
 80060d0:	10624dd3 	.word	0x10624dd3

080060d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e041      	b.n	800616a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fd fc68 	bl	80039d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f000 fa2c 	bl	8006570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b082      	sub	sp, #8
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e041      	b.n	8006208 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d106      	bne.n	800619e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f839 	bl	8006210 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2202      	movs	r2, #2
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3304      	adds	r3, #4
 80061ae:	4619      	mov	r1, r3
 80061b0:	4610      	mov	r0, r2
 80061b2:	f000 f9dd 	bl	8006570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr
	...

08006224 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d109      	bne.n	8006248 <HAL_TIM_PWM_Start+0x24>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e022      	b.n	800628e <HAL_TIM_PWM_Start+0x6a>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b04      	cmp	r3, #4
 800624c:	d109      	bne.n	8006262 <HAL_TIM_PWM_Start+0x3e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b01      	cmp	r3, #1
 8006258:	bf14      	ite	ne
 800625a:	2301      	movne	r3, #1
 800625c:	2300      	moveq	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e015      	b.n	800628e <HAL_TIM_PWM_Start+0x6a>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b08      	cmp	r3, #8
 8006266:	d109      	bne.n	800627c <HAL_TIM_PWM_Start+0x58>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	bf14      	ite	ne
 8006274:	2301      	movne	r3, #1
 8006276:	2300      	moveq	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	e008      	b.n	800628e <HAL_TIM_PWM_Start+0x6a>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	bf14      	ite	ne
 8006288:	2301      	movne	r3, #1
 800628a:	2300      	moveq	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e05e      	b.n	8006354 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d104      	bne.n	80062a6 <HAL_TIM_PWM_Start+0x82>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062a4:	e013      	b.n	80062ce <HAL_TIM_PWM_Start+0xaa>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d104      	bne.n	80062b6 <HAL_TIM_PWM_Start+0x92>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062b4:	e00b      	b.n	80062ce <HAL_TIM_PWM_Start+0xaa>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d104      	bne.n	80062c6 <HAL_TIM_PWM_Start+0xa2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062c4:	e003      	b.n	80062ce <HAL_TIM_PWM_Start+0xaa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2202      	movs	r2, #2
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2201      	movs	r2, #1
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fc41 	bl	8006b5e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a1e      	ldr	r2, [pc, #120]	@ (800635c <HAL_TIM_PWM_Start+0x138>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d107      	bne.n	80062f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a18      	ldr	r2, [pc, #96]	@ (800635c <HAL_TIM_PWM_Start+0x138>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00e      	beq.n	800631e <HAL_TIM_PWM_Start+0xfa>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006308:	d009      	beq.n	800631e <HAL_TIM_PWM_Start+0xfa>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a14      	ldr	r2, [pc, #80]	@ (8006360 <HAL_TIM_PWM_Start+0x13c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d004      	beq.n	800631e <HAL_TIM_PWM_Start+0xfa>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a12      	ldr	r2, [pc, #72]	@ (8006364 <HAL_TIM_PWM_Start+0x140>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d111      	bne.n	8006342 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b06      	cmp	r3, #6
 800632e:	d010      	beq.n	8006352 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006340:	e007      	b.n	8006352 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40012c00 	.word	0x40012c00
 8006360:	40000400 	.word	0x40000400
 8006364:	40000800 	.word	0x40000800

08006368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006382:	2302      	movs	r3, #2
 8006384:	e0ae      	b.n	80064e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b0c      	cmp	r3, #12
 8006392:	f200 809f 	bhi.w	80064d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006396:	a201      	add	r2, pc, #4	@ (adr r2, 800639c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063d1 	.word	0x080063d1
 80063a0:	080064d5 	.word	0x080064d5
 80063a4:	080064d5 	.word	0x080064d5
 80063a8:	080064d5 	.word	0x080064d5
 80063ac:	08006411 	.word	0x08006411
 80063b0:	080064d5 	.word	0x080064d5
 80063b4:	080064d5 	.word	0x080064d5
 80063b8:	080064d5 	.word	0x080064d5
 80063bc:	08006453 	.word	0x08006453
 80063c0:	080064d5 	.word	0x080064d5
 80063c4:	080064d5 	.word	0x080064d5
 80063c8:	080064d5 	.word	0x080064d5
 80063cc:	08006493 	.word	0x08006493
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 f92c 	bl	8006634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0208 	orr.w	r2, r2, #8
 80063ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0204 	bic.w	r2, r2, #4
 80063fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6999      	ldr	r1, [r3, #24]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	619a      	str	r2, [r3, #24]
      break;
 800640e:	e064      	b.n	80064da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68b9      	ldr	r1, [r7, #8]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 f972 	bl	8006700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	699a      	ldr	r2, [r3, #24]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800642a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800643a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6999      	ldr	r1, [r3, #24]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	021a      	lsls	r2, r3, #8
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	619a      	str	r2, [r3, #24]
      break;
 8006450:	e043      	b.n	80064da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	4618      	mov	r0, r3
 800645a:	f000 f9bb 	bl	80067d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0208 	orr.w	r2, r2, #8
 800646c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0204 	bic.w	r2, r2, #4
 800647c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69d9      	ldr	r1, [r3, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	61da      	str	r2, [r3, #28]
      break;
 8006490:	e023      	b.n	80064da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68b9      	ldr	r1, [r7, #8]
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fa05 	bl	80068a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	69da      	ldr	r2, [r3, #28]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	69d9      	ldr	r1, [r3, #28]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	021a      	lsls	r2, r3, #8
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	61da      	str	r2, [r3, #28]
      break;
 80064d2:	e002      	b.n	80064da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]
      break;
 80064d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006500:	2302      	movs	r3, #2
 8006502:	e031      	b.n	8006568 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fa14 	bl	8006944 <TIM_SlaveTimer_SetConfig>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d009      	beq.n	8006536 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e018      	b.n	8006568 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006544:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006554:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a29      	ldr	r2, [pc, #164]	@ (8006628 <TIM_Base_SetConfig+0xb8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00b      	beq.n	80065a0 <TIM_Base_SetConfig+0x30>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800658e:	d007      	beq.n	80065a0 <TIM_Base_SetConfig+0x30>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a26      	ldr	r2, [pc, #152]	@ (800662c <TIM_Base_SetConfig+0xbc>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_Base_SetConfig+0x30>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a25      	ldr	r2, [pc, #148]	@ (8006630 <TIM_Base_SetConfig+0xc0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d108      	bne.n	80065b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006628 <TIM_Base_SetConfig+0xb8>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00b      	beq.n	80065d2 <TIM_Base_SetConfig+0x62>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c0:	d007      	beq.n	80065d2 <TIM_Base_SetConfig+0x62>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a19      	ldr	r2, [pc, #100]	@ (800662c <TIM_Base_SetConfig+0xbc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d003      	beq.n	80065d2 <TIM_Base_SetConfig+0x62>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a18      	ldr	r2, [pc, #96]	@ (8006630 <TIM_Base_SetConfig+0xc0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d108      	bne.n	80065e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a07      	ldr	r2, [pc, #28]	@ (8006628 <TIM_Base_SetConfig+0xb8>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d103      	bne.n	8006618 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	615a      	str	r2, [r3, #20]
}
 800661e:	bf00      	nop
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr
 8006628:	40012c00 	.word	0x40012c00
 800662c:	40000400 	.word	0x40000400
 8006630:	40000800 	.word	0x40000800

08006634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f023 0201 	bic.w	r2, r3, #1
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0303 	bic.w	r3, r3, #3
 800666a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f023 0302 	bic.w	r3, r3, #2
 800667c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a1c      	ldr	r2, [pc, #112]	@ (80066fc <TIM_OC1_SetConfig+0xc8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d10c      	bne.n	80066aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f023 0308 	bic.w	r3, r3, #8
 8006696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f023 0304 	bic.w	r3, r3, #4
 80066a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a13      	ldr	r2, [pc, #76]	@ (80066fc <TIM_OC1_SetConfig+0xc8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d111      	bne.n	80066d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	621a      	str	r2, [r3, #32]
}
 80066f0:	bf00      	nop
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00

08006700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f023 0210 	bic.w	r2, r3, #16
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800672e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f023 0320 	bic.w	r3, r3, #32
 800674a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a1d      	ldr	r2, [pc, #116]	@ (80067d0 <TIM_OC2_SetConfig+0xd0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d10d      	bne.n	800677c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800677a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a14      	ldr	r2, [pc, #80]	@ (80067d0 <TIM_OC2_SetConfig+0xd0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d113      	bne.n	80067ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800678a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bc80      	pop	{r7}
 80067ce:	4770      	bx	lr
 80067d0:	40012c00 	.word	0x40012c00

080067d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800681c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a1d      	ldr	r2, [pc, #116]	@ (80068a4 <TIM_OC3_SetConfig+0xd0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d10d      	bne.n	800684e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	021b      	lsls	r3, r3, #8
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800684c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a14      	ldr	r2, [pc, #80]	@ (80068a4 <TIM_OC3_SetConfig+0xd0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d113      	bne.n	800687e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800685c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	621a      	str	r2, [r3, #32]
}
 8006898:	bf00      	nop
 800689a:	371c      	adds	r7, #28
 800689c:	46bd      	mov	sp, r7
 800689e:	bc80      	pop	{r7}
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40012c00 	.word	0x40012c00

080068a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	021b      	lsls	r3, r3, #8
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	031b      	lsls	r3, r3, #12
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a0f      	ldr	r2, [pc, #60]	@ (8006940 <TIM_OC4_SetConfig+0x98>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d109      	bne.n	800691c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800690e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	019b      	lsls	r3, r3, #6
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	bc80      	pop	{r7}
 800693e:	4770      	bx	lr
 8006940:	40012c00 	.word	0x40012c00

08006944 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b086      	sub	sp, #24
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006960:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f023 0307 	bic.w	r3, r3, #7
 8006972:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2b70      	cmp	r3, #112	@ 0x70
 800698c:	d01a      	beq.n	80069c4 <TIM_SlaveTimer_SetConfig+0x80>
 800698e:	2b70      	cmp	r3, #112	@ 0x70
 8006990:	d860      	bhi.n	8006a54 <TIM_SlaveTimer_SetConfig+0x110>
 8006992:	2b60      	cmp	r3, #96	@ 0x60
 8006994:	d054      	beq.n	8006a40 <TIM_SlaveTimer_SetConfig+0xfc>
 8006996:	2b60      	cmp	r3, #96	@ 0x60
 8006998:	d85c      	bhi.n	8006a54 <TIM_SlaveTimer_SetConfig+0x110>
 800699a:	2b50      	cmp	r3, #80	@ 0x50
 800699c:	d046      	beq.n	8006a2c <TIM_SlaveTimer_SetConfig+0xe8>
 800699e:	2b50      	cmp	r3, #80	@ 0x50
 80069a0:	d858      	bhi.n	8006a54 <TIM_SlaveTimer_SetConfig+0x110>
 80069a2:	2b40      	cmp	r3, #64	@ 0x40
 80069a4:	d019      	beq.n	80069da <TIM_SlaveTimer_SetConfig+0x96>
 80069a6:	2b40      	cmp	r3, #64	@ 0x40
 80069a8:	d854      	bhi.n	8006a54 <TIM_SlaveTimer_SetConfig+0x110>
 80069aa:	2b30      	cmp	r3, #48	@ 0x30
 80069ac:	d055      	beq.n	8006a5a <TIM_SlaveTimer_SetConfig+0x116>
 80069ae:	2b30      	cmp	r3, #48	@ 0x30
 80069b0:	d850      	bhi.n	8006a54 <TIM_SlaveTimer_SetConfig+0x110>
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	d051      	beq.n	8006a5a <TIM_SlaveTimer_SetConfig+0x116>
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	d84c      	bhi.n	8006a54 <TIM_SlaveTimer_SetConfig+0x110>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d04d      	beq.n	8006a5a <TIM_SlaveTimer_SetConfig+0x116>
 80069be:	2b10      	cmp	r3, #16
 80069c0:	d04b      	beq.n	8006a5a <TIM_SlaveTimer_SetConfig+0x116>
 80069c2:	e047      	b.n	8006a54 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80069d4:	f000 f8a4 	bl	8006b20 <TIM_ETR_SetConfig>
      break;
 80069d8:	e040      	b.n	8006a5c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b05      	cmp	r3, #5
 80069e0:	d101      	bne.n	80069e6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e03b      	b.n	8006a5e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6a1a      	ldr	r2, [r3, #32]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0201 	bic.w	r2, r2, #1
 80069fc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a0c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	621a      	str	r2, [r3, #32]
      break;
 8006a2a:	e017      	b.n	8006a5c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f000 f814 	bl	8006a66 <TIM_TI1_ConfigInputStage>
      break;
 8006a3e:	e00d      	b.n	8006a5c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f000 f838 	bl	8006ac2 <TIM_TI2_ConfigInputStage>
      break;
 8006a52:	e003      	b.n	8006a5c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	75fb      	strb	r3, [r7, #23]
      break;
 8006a58:	e000      	b.n	8006a5c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006a5a:	bf00      	nop
  }

  return status;
 8006a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b087      	sub	sp, #28
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	f023 0201 	bic.w	r2, r3, #1
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f023 030a 	bic.w	r3, r3, #10
 8006aa2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	621a      	str	r2, [r3, #32]
}
 8006ab8:	bf00      	nop
 8006aba:	371c      	adds	r7, #28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bc80      	pop	{r7}
 8006ac0:	4770      	bx	lr

08006ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b087      	sub	sp, #28
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	f023 0210 	bic.w	r2, r3, #16
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006aec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	031b      	lsls	r3, r3, #12
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006afe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	621a      	str	r2, [r3, #32]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr

08006b20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	021a      	lsls	r2, r3, #8
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	609a      	str	r2, [r3, #8]
}
 8006b54:	bf00      	nop
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b087      	sub	sp, #28
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f003 031f 	and.w	r3, r3, #31
 8006b70:	2201      	movs	r2, #1
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6a1a      	ldr	r2, [r3, #32]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	43db      	mvns	r3, r3
 8006b80:	401a      	ands	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a1a      	ldr	r2, [r3, #32]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	fa01 f303 	lsl.w	r3, r1, r3
 8006b96:	431a      	orrs	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	621a      	str	r2, [r3, #32]
}
 8006b9c:	bf00      	nop
 8006b9e:	371c      	adds	r7, #28
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr
	...

08006ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e046      	b.n	8006c4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a16      	ldr	r2, [pc, #88]	@ (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00e      	beq.n	8006c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c0c:	d009      	beq.n	8006c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a12      	ldr	r2, [pc, #72]	@ (8006c5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d004      	beq.n	8006c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a10      	ldr	r2, [pc, #64]	@ (8006c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d10c      	bne.n	8006c3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr
 8006c58:	40012c00 	.word	0x40012c00
 8006c5c:	40000400 	.word	0x40000400
 8006c60:	40000800 	.word	0x40000800

08006c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e04d      	b.n	8006d12 <HAL_UART_Init+0xae>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d111      	bne.n	8006ca6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fbd2 	bl	8007434 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a20      	ldr	r2, [pc, #128]	@ (8006d1c <HAL_UART_Init+0xb8>)
 8006c9c:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2224      	movs	r2, #36	@ 0x24
 8006caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cbc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fe34 	bl	800792c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691a      	ldr	r2, [r3, #16]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cd2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	695a      	ldr	r2, [r3, #20]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ce2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cf2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	08003a51 	.word	0x08003a51

08006d20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	@ 0x28
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d16d      	bne.n	8006e1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <HAL_UART_Transmit+0x2c>
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e066      	b.n	8006e1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2221      	movs	r2, #33	@ 0x21
 8006d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d5e:	f7fd f845 	bl	8003dec <HAL_GetTick>
 8006d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	88fa      	ldrh	r2, [r7, #6]
 8006d6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d78:	d108      	bne.n	8006d8c <HAL_UART_Transmit+0x6c>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d104      	bne.n	8006d8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	e003      	b.n	8006d94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d94:	e02a      	b.n	8006dec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2180      	movs	r1, #128	@ 0x80
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 fb7d 	bl	80074a0 <UART_WaitOnFlagUntilTimeout>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e036      	b.n	8006e1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10b      	bne.n	8006dce <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	3302      	adds	r3, #2
 8006dca:	61bb      	str	r3, [r7, #24]
 8006dcc:	e007      	b.n	8006dde <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	781a      	ldrb	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1cf      	bne.n	8006d96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2140      	movs	r1, #64	@ 0x40
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 fb4d 	bl	80074a0 <UART_WaitOnFlagUntilTimeout>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e006      	b.n	8006e1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	e000      	b.n	8006e1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006e1c:	2302      	movs	r3, #2
  }
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3720      	adds	r7, #32
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60f8      	str	r0, [r7, #12]
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	4613      	mov	r3, r2
 8006e32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b20      	cmp	r3, #32
 8006e3e:	d112      	bne.n	8006e66 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <HAL_UART_Receive_IT+0x26>
 8006e46:	88fb      	ldrh	r3, [r7, #6]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e00b      	b.n	8006e68 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	68b9      	ldr	r1, [r7, #8]
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 fb8d 	bl	800757c <UART_Start_Receive_IT>
 8006e62:	4603      	mov	r3, r0
 8006e64:	e000      	b.n	8006e68 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006e66:	2302      	movs	r3, #2
  }
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b0ba      	sub	sp, #232	@ 0xe8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006e96:	2300      	movs	r3, #0
 8006e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea6:	f003 030f 	and.w	r3, r3, #15
 8006eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10f      	bne.n	8006ed6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eba:	f003 0320 	and.w	r3, r3, #32
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x66>
 8006ec2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fc6c 	bl	80077ac <UART_Receive_IT>
      return;
 8006ed4:	e260      	b.n	8007398 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 80e1 	beq.w	80070a2 <HAL_UART_IRQHandler+0x232>
 8006ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d106      	bne.n	8006efa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ef0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 80d4 	beq.w	80070a2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00b      	beq.n	8006f1e <HAL_UART_IRQHandler+0xae>
 8006f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d005      	beq.n	8006f1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f16:	f043 0201 	orr.w	r2, r3, #1
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00b      	beq.n	8006f42 <HAL_UART_IRQHandler+0xd2>
 8006f2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d005      	beq.n	8006f42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3a:	f043 0202 	orr.w	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00b      	beq.n	8006f66 <HAL_UART_IRQHandler+0xf6>
 8006f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d005      	beq.n	8006f66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5e:	f043 0204 	orr.w	r2, r3, #4
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f6a:	f003 0308 	and.w	r3, r3, #8
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d011      	beq.n	8006f96 <HAL_UART_IRQHandler+0x126>
 8006f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d105      	bne.n	8006f8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d005      	beq.n	8006f96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f8e:	f043 0208 	orr.w	r2, r3, #8
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 81f7 	beq.w	800738e <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa4:	f003 0320 	and.w	r3, r3, #32
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d008      	beq.n	8006fbe <HAL_UART_IRQHandler+0x14e>
 8006fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fb0:	f003 0320 	and.w	r3, r3, #32
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d002      	beq.n	8006fbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fbf7 	bl	80077ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	bf14      	ite	ne
 8006fcc:	2301      	movne	r3, #1
 8006fce:	2300      	moveq	r3, #0
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d103      	bne.n	8006fea <HAL_UART_IRQHandler+0x17a>
 8006fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d051      	beq.n	800708e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 faff 	bl	80075ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d042      	beq.n	8007084 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3314      	adds	r3, #20
 8007004:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007014:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800701c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3314      	adds	r3, #20
 8007026:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800702a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800702e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007032:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007036:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007042:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1d9      	bne.n	8006ffe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704e:	2b00      	cmp	r3, #0
 8007050:	d013      	beq.n	800707a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007056:	4a80      	ldr	r2, [pc, #512]	@ (8007258 <HAL_UART_IRQHandler+0x3e8>)
 8007058:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800705e:	4618      	mov	r0, r3
 8007060:	f7fd f83a 	bl	80040d8 <HAL_DMA_Abort_IT>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d019      	beq.n	800709e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007074:	4610      	mov	r0, r2
 8007076:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007078:	e011      	b.n	800709e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007082:	e00c      	b.n	800709e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708c:	e007      	b.n	800709e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800709c:	e177      	b.n	800738e <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800709e:	bf00      	nop
    return;
 80070a0:	e175      	b.n	800738e <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	f040 8151 	bne.w	800734e <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070b0:	f003 0310 	and.w	r3, r3, #16
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 814a 	beq.w	800734e <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070be:	f003 0310 	and.w	r3, r3, #16
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 8143 	beq.w	800734e <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070c8:	2300      	movs	r3, #0
 80070ca:	60bb      	str	r3, [r7, #8]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60bb      	str	r3, [r7, #8]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	60bb      	str	r3, [r7, #8]
 80070dc:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 80b7 	beq.w	800725c <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 8147 	beq.w	8007392 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007108:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800710c:	429a      	cmp	r2, r3
 800710e:	f080 8140 	bcs.w	8007392 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007118:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	2b20      	cmp	r3, #32
 8007122:	f000 8088 	beq.w	8007236 <HAL_UART_IRQHandler+0x3c6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	330c      	adds	r3, #12
 800712c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007130:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800713c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007144:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	330c      	adds	r3, #12
 800714e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007152:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007156:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800715e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800716a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1d9      	bne.n	8007126 <HAL_UART_IRQHandler+0x2b6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3314      	adds	r3, #20
 8007178:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800717c:	e853 3f00 	ldrex	r3, [r3]
 8007180:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007182:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007184:	f023 0301 	bic.w	r3, r3, #1
 8007188:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3314      	adds	r3, #20
 8007192:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007196:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800719a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800719e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1e1      	bne.n	8007172 <HAL_UART_IRQHandler+0x302>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3314      	adds	r3, #20
 80071b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	3314      	adds	r3, #20
 80071ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80071d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e3      	bne.n	80071ae <HAL_UART_IRQHandler+0x33e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	330c      	adds	r3, #12
 80071fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071fe:	e853 3f00 	ldrex	r3, [r3]
 8007202:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007204:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007206:	f023 0310 	bic.w	r3, r3, #16
 800720a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	330c      	adds	r3, #12
 8007214:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007218:	65ba      	str	r2, [r7, #88]	@ 0x58
 800721a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800721e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e3      	bne.n	80071f4 <HAL_UART_IRQHandler+0x384>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007230:	4618      	mov	r0, r3
 8007232:	f7fc ff16 	bl	8004062 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2202      	movs	r2, #2
 800723a:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	8dd2      	ldrh	r2, [r2, #46]	@ 0x2e
 8007248:	b292      	uxth	r2, r2
 800724a:	1a8a      	subs	r2, r1, r2
 800724c:	b292      	uxth	r2, r2
 800724e:	4611      	mov	r1, r2
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007254:	e09d      	b.n	8007392 <HAL_UART_IRQHandler+0x522>
 8007256:	bf00      	nop
 8007258:	080076b3 	.word	0x080076b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007264:	b29b      	uxth	r3, r3
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007270:	b29b      	uxth	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 808f 	beq.w	8007396 <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 8007278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 808a 	beq.w	8007396 <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	330c      	adds	r3, #12
 8007288:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007294:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007298:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	330c      	adds	r3, #12
 80072a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80072a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80072a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072ae:	e841 2300 	strex	r3, r2, [r1]
 80072b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1e3      	bne.n	8007282 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3314      	adds	r3, #20
 80072c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c4:	e853 3f00 	ldrex	r3, [r3]
 80072c8:	623b      	str	r3, [r7, #32]
   return(result);
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3314      	adds	r3, #20
 80072da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072de:	633a      	str	r2, [r7, #48]	@ 0x30
 80072e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e3      	bne.n	80072ba <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	330c      	adds	r3, #12
 8007306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f023 0310 	bic.w	r3, r3, #16
 8007316:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	330c      	adds	r3, #12
 8007320:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007324:	61fa      	str	r2, [r7, #28]
 8007326:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	69b9      	ldr	r1, [r7, #24]
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	617b      	str	r3, [r7, #20]
   return(result);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e3      	bne.n	8007300 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	635a      	str	r2, [r3, #52]	@ 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007342:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8007346:	4611      	mov	r1, r2
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800734c:	e023      	b.n	8007396 <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800734e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007356:	2b00      	cmp	r3, #0
 8007358:	d009      	beq.n	800736e <HAL_UART_IRQHandler+0x4fe>
 800735a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800735e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f9b8 	bl	80076dc <UART_Transmit_IT>
    return;
 800736c:	e014      	b.n	8007398 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800736e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00e      	beq.n	8007398 <HAL_UART_IRQHandler+0x528>
 800737a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800737e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007382:	2b00      	cmp	r3, #0
 8007384:	d008      	beq.n	8007398 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f9f7 	bl	800777a <UART_EndTransmit_IT>
    return;
 800738c:	e004      	b.n	8007398 <HAL_UART_IRQHandler+0x528>
    return;
 800738e:	bf00      	nop
 8007390:	e002      	b.n	8007398 <HAL_UART_IRQHandler+0x528>
      return;
 8007392:	bf00      	nop
 8007394:	e000      	b.n	8007398 <HAL_UART_IRQHandler+0x528>
      return;
 8007396:	bf00      	nop
  }
}
 8007398:	37e8      	adds	r7, #232	@ 0xe8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop

080073a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bc80      	pop	{r7}
 80073b0:	4770      	bx	lr

080073b2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	bc80      	pop	{r7}
 80073c2:	4770      	bx	lr

080073c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr

080073d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr

080073e8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr

080073fa <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007402:	bf00      	nop
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	bc80      	pop	{r7}
 800740a:	4770      	bx	lr

0800740c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	bc80      	pop	{r7}
 800741c:	4770      	bx	lr

0800741e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	460b      	mov	r3, r1
 8007428:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	bc80      	pop	{r7}
 8007432:	4770      	bx	lr

08007434 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a0f      	ldr	r2, [pc, #60]	@ (800747c <UART_InitCallbacksToDefault+0x48>)
 8007440:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a0e      	ldr	r2, [pc, #56]	@ (8007480 <UART_InitCallbacksToDefault+0x4c>)
 8007446:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a0e      	ldr	r2, [pc, #56]	@ (8007484 <UART_InitCallbacksToDefault+0x50>)
 800744c:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a0d      	ldr	r2, [pc, #52]	@ (8007488 <UART_InitCallbacksToDefault+0x54>)
 8007452:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a0d      	ldr	r2, [pc, #52]	@ (800748c <UART_InitCallbacksToDefault+0x58>)
 8007458:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a0c      	ldr	r2, [pc, #48]	@ (8007490 <UART_InitCallbacksToDefault+0x5c>)
 800745e:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a0c      	ldr	r2, [pc, #48]	@ (8007494 <UART_InitCallbacksToDefault+0x60>)
 8007464:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a0b      	ldr	r2, [pc, #44]	@ (8007498 <UART_InitCallbacksToDefault+0x64>)
 800746a:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a0b      	ldr	r2, [pc, #44]	@ (800749c <UART_InitCallbacksToDefault+0x68>)
 8007470:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr
 800747c:	080073b3 	.word	0x080073b3
 8007480:	080073a1 	.word	0x080073a1
 8007484:	080073c5 	.word	0x080073c5
 8007488:	08003341 	.word	0x08003341
 800748c:	080073d7 	.word	0x080073d7
 8007490:	080073e9 	.word	0x080073e9
 8007494:	080073fb 	.word	0x080073fb
 8007498:	0800740d 	.word	0x0800740d
 800749c:	0800741f 	.word	0x0800741f

080074a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b090      	sub	sp, #64	@ 0x40
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	4613      	mov	r3, r2
 80074ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074b0:	e050      	b.n	8007554 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b8:	d04c      	beq.n	8007554 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80074ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d007      	beq.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80074c0:	f7fc fc94 	bl	8003dec <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d241      	bcs.n	8007554 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	330c      	adds	r3, #12
 80074d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80074e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	330c      	adds	r3, #12
 80074ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80074f0:	637a      	str	r2, [r7, #52]	@ 0x34
 80074f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80074fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e5      	bne.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3314      	adds	r3, #20
 800750a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	613b      	str	r3, [r7, #16]
   return(result);
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f023 0301 	bic.w	r3, r3, #1
 800751a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3314      	adds	r3, #20
 8007522:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007524:	623a      	str	r2, [r7, #32]
 8007526:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	69f9      	ldr	r1, [r7, #28]
 800752a:	6a3a      	ldr	r2, [r7, #32]
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	61bb      	str	r3, [r7, #24]
   return(result);
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e5      	bne.n	8007504 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e00f      	b.n	8007574 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	4013      	ands	r3, r2
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	429a      	cmp	r2, r3
 8007562:	bf0c      	ite	eq
 8007564:	2301      	moveq	r3, #1
 8007566:	2300      	movne	r3, #0
 8007568:	b2db      	uxtb	r3, r3
 800756a:	461a      	mov	r2, r3
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	429a      	cmp	r2, r3
 8007570:	d09f      	beq.n	80074b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3740      	adds	r7, #64	@ 0x40
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	4613      	mov	r3, r2
 8007588:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	88fa      	ldrh	r2, [r7, #6]
 8007594:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	88fa      	ldrh	r2, [r7, #6]
 800759a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2222      	movs	r2, #34	@ 0x22
 80075a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	695a      	ldr	r2, [r3, #20]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f042 0201 	orr.w	r2, r2, #1
 80075d0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f042 0220 	orr.w	r2, r2, #32
 80075e0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr

080075ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b095      	sub	sp, #84	@ 0x54
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	330c      	adds	r3, #12
 80075fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800760c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	330c      	adds	r3, #12
 8007614:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007616:	643a      	str	r2, [r7, #64]	@ 0x40
 8007618:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800761c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e5      	bne.n	80075f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3314      	adds	r3, #20
 8007630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	61fb      	str	r3, [r7, #28]
   return(result);
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	f023 0301 	bic.w	r3, r3, #1
 8007640:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3314      	adds	r3, #20
 8007648:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800764a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800764c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e5      	bne.n	800762a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007662:	2b01      	cmp	r3, #1
 8007664:	d119      	bne.n	800769a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	330c      	adds	r3, #12
 800766c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	60bb      	str	r3, [r7, #8]
   return(result);
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f023 0310 	bic.w	r3, r3, #16
 800767c:	647b      	str	r3, [r7, #68]	@ 0x44
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	330c      	adds	r3, #12
 8007684:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007686:	61ba      	str	r2, [r7, #24]
 8007688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6979      	ldr	r1, [r7, #20]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	613b      	str	r3, [r7, #16]
   return(result);
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e5      	bne.n	8007666 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2220      	movs	r2, #32
 800769e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80076a8:	bf00      	nop
 80076aa:	3754      	adds	r7, #84	@ 0x54
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr

080076b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b084      	sub	sp, #16
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	84da      	strh	r2, [r3, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076d4:	bf00      	nop
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b21      	cmp	r3, #33	@ 0x21
 80076ee:	d13e      	bne.n	800776e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076f8:	d114      	bne.n	8007724 <UART_Transmit_IT+0x48>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d110      	bne.n	8007724 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007716:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	1c9a      	adds	r2, r3, #2
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	621a      	str	r2, [r3, #32]
 8007722:	e008      	b.n	8007736 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a1b      	ldr	r3, [r3, #32]
 8007728:	1c59      	adds	r1, r3, #1
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	6211      	str	r1, [r2, #32]
 800772e:	781a      	ldrb	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800773a:	b29b      	uxth	r3, r3
 800773c:	3b01      	subs	r3, #1
 800773e:	b29b      	uxth	r3, r3
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	4619      	mov	r1, r3
 8007744:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10f      	bne.n	800776a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007758:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007768:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	e000      	b.n	8007770 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800776e:	2302      	movs	r3, #2
  }
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	bc80      	pop	{r7}
 8007778:	4770      	bx	lr

0800777a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b082      	sub	sp, #8
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007790:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08c      	sub	sp, #48	@ 0x30
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b22      	cmp	r3, #34	@ 0x22
 80077be:	f040 80b0 	bne.w	8007922 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ca:	d117      	bne.n	80077fc <UART_Receive_IT+0x50>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d113      	bne.n	80077fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f4:	1c9a      	adds	r2, r3, #2
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80077fa:	e026      	b.n	800784a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007800:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800780e:	d007      	beq.n	8007820 <UART_Receive_IT+0x74>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10a      	bne.n	800782e <UART_Receive_IT+0x82>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d106      	bne.n	800782e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	b2da      	uxtb	r2, r3
 8007828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	e008      	b.n	8007840 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800783a:	b2da      	uxtb	r2, r3
 800783c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b01      	subs	r3, #1
 8007852:	b29b      	uxth	r3, r3
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4619      	mov	r1, r3
 8007858:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800785a:	2b00      	cmp	r3, #0
 800785c:	d15f      	bne.n	800791e <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68da      	ldr	r2, [r3, #12]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0220 	bic.w	r2, r2, #32
 800786c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68da      	ldr	r2, [r3, #12]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800787c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	695a      	ldr	r2, [r3, #20]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0201 	bic.w	r2, r2, #1
 800788c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2220      	movs	r2, #32
 8007892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d136      	bne.n	8007912 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	330c      	adds	r3, #12
 80078b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	613b      	str	r3, [r7, #16]
   return(result);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f023 0310 	bic.w	r3, r3, #16
 80078c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078ca:	623a      	str	r2, [r7, #32]
 80078cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	69f9      	ldr	r1, [r7, #28]
 80078d0:	6a3a      	ldr	r2, [r7, #32]
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e5      	bne.n	80078aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0310 	and.w	r3, r3, #16
 80078e8:	2b10      	cmp	r3, #16
 80078ea:	d10a      	bne.n	8007902 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078ec:	2300      	movs	r3, #0
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800790a:	4611      	mov	r1, r2
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	4798      	blx	r3
 8007910:	e003      	b.n	800791a <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	e002      	b.n	8007924 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	e000      	b.n	8007924 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8007922:	2302      	movs	r3, #2
  }
}
 8007924:	4618      	mov	r0, r3
 8007926:	3730      	adds	r7, #48	@ 0x30
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689a      	ldr	r2, [r3, #8]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	4313      	orrs	r3, r2
 800795a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007966:	f023 030c 	bic.w	r3, r3, #12
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6812      	ldr	r2, [r2, #0]
 800796e:	68b9      	ldr	r1, [r7, #8]
 8007970:	430b      	orrs	r3, r1
 8007972:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a2c      	ldr	r2, [pc, #176]	@ (8007a40 <UART_SetConfig+0x114>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d103      	bne.n	800799c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007994:	f7fe fb6c 	bl	8006070 <HAL_RCC_GetPCLK2Freq>
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	e002      	b.n	80079a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800799c:	f7fe fb54 	bl	8006048 <HAL_RCC_GetPCLK1Freq>
 80079a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4613      	mov	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	009a      	lsls	r2, r3, #2
 80079ac:	441a      	add	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b8:	4a22      	ldr	r2, [pc, #136]	@ (8007a44 <UART_SetConfig+0x118>)
 80079ba:	fba2 2303 	umull	r2, r3, r2, r3
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	0119      	lsls	r1, r3, #4
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	009a      	lsls	r2, r3, #2
 80079cc:	441a      	add	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80079d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007a44 <UART_SetConfig+0x118>)
 80079da:	fba3 0302 	umull	r0, r3, r3, r2
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	2064      	movs	r0, #100	@ 0x64
 80079e2:	fb00 f303 	mul.w	r3, r0, r3
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	011b      	lsls	r3, r3, #4
 80079ea:	3332      	adds	r3, #50	@ 0x32
 80079ec:	4a15      	ldr	r2, [pc, #84]	@ (8007a44 <UART_SetConfig+0x118>)
 80079ee:	fba2 2303 	umull	r2, r3, r2, r3
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80079f8:	4419      	add	r1, r3
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	009a      	lsls	r2, r3, #2
 8007a04:	441a      	add	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a10:	4b0c      	ldr	r3, [pc, #48]	@ (8007a44 <UART_SetConfig+0x118>)
 8007a12:	fba3 0302 	umull	r0, r3, r3, r2
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	2064      	movs	r0, #100	@ 0x64
 8007a1a:	fb00 f303 	mul.w	r3, r0, r3
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	3332      	adds	r3, #50	@ 0x32
 8007a24:	4a07      	ldr	r2, [pc, #28]	@ (8007a44 <UART_SetConfig+0x118>)
 8007a26:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2a:	095b      	lsrs	r3, r3, #5
 8007a2c:	f003 020f 	and.w	r2, r3, #15
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	440a      	add	r2, r1
 8007a36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	40013800 	.word	0x40013800
 8007a44:	51eb851f 	.word	0x51eb851f

08007a48 <sulp>:
 8007a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4c:	460f      	mov	r7, r1
 8007a4e:	4690      	mov	r8, r2
 8007a50:	f002 f908 	bl	8009c64 <__ulp>
 8007a54:	4604      	mov	r4, r0
 8007a56:	460d      	mov	r5, r1
 8007a58:	f1b8 0f00 	cmp.w	r8, #0
 8007a5c:	d011      	beq.n	8007a82 <sulp+0x3a>
 8007a5e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007a62:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	dd0b      	ble.n	8007a82 <sulp+0x3a>
 8007a6a:	2400      	movs	r4, #0
 8007a6c:	051b      	lsls	r3, r3, #20
 8007a6e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007a72:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007a76:	4622      	mov	r2, r4
 8007a78:	462b      	mov	r3, r5
 8007a7a:	f7f8 fd2f 	bl	80004dc <__aeabi_dmul>
 8007a7e:	4604      	mov	r4, r0
 8007a80:	460d      	mov	r5, r1
 8007a82:	4620      	mov	r0, r4
 8007a84:	4629      	mov	r1, r5
 8007a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a8a:	0000      	movs	r0, r0
 8007a8c:	0000      	movs	r0, r0
	...

08007a90 <_strtod_l>:
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	b09f      	sub	sp, #124	@ 0x7c
 8007a96:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007a98:	2200      	movs	r2, #0
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007a9e:	f04f 0a00 	mov.w	sl, #0
 8007aa2:	f04f 0b00 	mov.w	fp, #0
 8007aa6:	460a      	mov	r2, r1
 8007aa8:	9005      	str	r0, [sp, #20]
 8007aaa:	9219      	str	r2, [sp, #100]	@ 0x64
 8007aac:	7811      	ldrb	r1, [r2, #0]
 8007aae:	292b      	cmp	r1, #43	@ 0x2b
 8007ab0:	d048      	beq.n	8007b44 <_strtod_l+0xb4>
 8007ab2:	d836      	bhi.n	8007b22 <_strtod_l+0x92>
 8007ab4:	290d      	cmp	r1, #13
 8007ab6:	d830      	bhi.n	8007b1a <_strtod_l+0x8a>
 8007ab8:	2908      	cmp	r1, #8
 8007aba:	d830      	bhi.n	8007b1e <_strtod_l+0x8e>
 8007abc:	2900      	cmp	r1, #0
 8007abe:	d039      	beq.n	8007b34 <_strtod_l+0xa4>
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007ac4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007ac6:	782a      	ldrb	r2, [r5, #0]
 8007ac8:	2a30      	cmp	r2, #48	@ 0x30
 8007aca:	f040 80b1 	bne.w	8007c30 <_strtod_l+0x1a0>
 8007ace:	786a      	ldrb	r2, [r5, #1]
 8007ad0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ad4:	2a58      	cmp	r2, #88	@ 0x58
 8007ad6:	d16c      	bne.n	8007bb2 <_strtod_l+0x122>
 8007ad8:	9302      	str	r3, [sp, #8]
 8007ada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007adc:	4a8e      	ldr	r2, [pc, #568]	@ (8007d18 <_strtod_l+0x288>)
 8007ade:	9301      	str	r3, [sp, #4]
 8007ae0:	ab1a      	add	r3, sp, #104	@ 0x68
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	9805      	ldr	r0, [sp, #20]
 8007ae6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ae8:	a919      	add	r1, sp, #100	@ 0x64
 8007aea:	f001 f9af 	bl	8008e4c <__gethex>
 8007aee:	f010 060f 	ands.w	r6, r0, #15
 8007af2:	4604      	mov	r4, r0
 8007af4:	d005      	beq.n	8007b02 <_strtod_l+0x72>
 8007af6:	2e06      	cmp	r6, #6
 8007af8:	d126      	bne.n	8007b48 <_strtod_l+0xb8>
 8007afa:	2300      	movs	r3, #0
 8007afc:	3501      	adds	r5, #1
 8007afe:	9519      	str	r5, [sp, #100]	@ 0x64
 8007b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f040 8584 	bne.w	8008612 <_strtod_l+0xb82>
 8007b0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b0c:	b1bb      	cbz	r3, 8007b3e <_strtod_l+0xae>
 8007b0e:	4650      	mov	r0, sl
 8007b10:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007b14:	b01f      	add	sp, #124	@ 0x7c
 8007b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1a:	2920      	cmp	r1, #32
 8007b1c:	d1d0      	bne.n	8007ac0 <_strtod_l+0x30>
 8007b1e:	3201      	adds	r2, #1
 8007b20:	e7c3      	b.n	8007aaa <_strtod_l+0x1a>
 8007b22:	292d      	cmp	r1, #45	@ 0x2d
 8007b24:	d1cc      	bne.n	8007ac0 <_strtod_l+0x30>
 8007b26:	2101      	movs	r1, #1
 8007b28:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007b2a:	1c51      	adds	r1, r2, #1
 8007b2c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b2e:	7852      	ldrb	r2, [r2, #1]
 8007b30:	2a00      	cmp	r2, #0
 8007b32:	d1c7      	bne.n	8007ac4 <_strtod_l+0x34>
 8007b34:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b36:	9419      	str	r4, [sp, #100]	@ 0x64
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f040 8568 	bne.w	800860e <_strtod_l+0xb7e>
 8007b3e:	4650      	mov	r0, sl
 8007b40:	4659      	mov	r1, fp
 8007b42:	e7e7      	b.n	8007b14 <_strtod_l+0x84>
 8007b44:	2100      	movs	r1, #0
 8007b46:	e7ef      	b.n	8007b28 <_strtod_l+0x98>
 8007b48:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b4a:	b13a      	cbz	r2, 8007b5c <_strtod_l+0xcc>
 8007b4c:	2135      	movs	r1, #53	@ 0x35
 8007b4e:	a81c      	add	r0, sp, #112	@ 0x70
 8007b50:	f002 f978 	bl	8009e44 <__copybits>
 8007b54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b56:	9805      	ldr	r0, [sp, #20]
 8007b58:	f001 fd52 	bl	8009600 <_Bfree>
 8007b5c:	3e01      	subs	r6, #1
 8007b5e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007b60:	2e04      	cmp	r6, #4
 8007b62:	d806      	bhi.n	8007b72 <_strtod_l+0xe2>
 8007b64:	e8df f006 	tbb	[pc, r6]
 8007b68:	201d0314 	.word	0x201d0314
 8007b6c:	14          	.byte	0x14
 8007b6d:	00          	.byte	0x00
 8007b6e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007b72:	05e1      	lsls	r1, r4, #23
 8007b74:	bf48      	it	mi
 8007b76:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007b7a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b7e:	0d1b      	lsrs	r3, r3, #20
 8007b80:	051b      	lsls	r3, r3, #20
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1bd      	bne.n	8007b02 <_strtod_l+0x72>
 8007b86:	f001 f84d 	bl	8008c24 <__errno>
 8007b8a:	2322      	movs	r3, #34	@ 0x22
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	e7b8      	b.n	8007b02 <_strtod_l+0x72>
 8007b90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007b94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007b98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007b9c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007ba0:	e7e7      	b.n	8007b72 <_strtod_l+0xe2>
 8007ba2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8007d1c <_strtod_l+0x28c>
 8007ba6:	e7e4      	b.n	8007b72 <_strtod_l+0xe2>
 8007ba8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007bac:	f04f 3aff 	mov.w	sl, #4294967295
 8007bb0:	e7df      	b.n	8007b72 <_strtod_l+0xe2>
 8007bb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	9219      	str	r2, [sp, #100]	@ 0x64
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	2b30      	cmp	r3, #48	@ 0x30
 8007bbc:	d0f9      	beq.n	8007bb2 <_strtod_l+0x122>
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d09f      	beq.n	8007b02 <_strtod_l+0x72>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bc8:	220a      	movs	r2, #10
 8007bca:	930c      	str	r3, [sp, #48]	@ 0x30
 8007bcc:	2300      	movs	r3, #0
 8007bce:	461f      	mov	r7, r3
 8007bd0:	9308      	str	r3, [sp, #32]
 8007bd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bd4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007bd6:	7805      	ldrb	r5, [r0, #0]
 8007bd8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007bdc:	b2d9      	uxtb	r1, r3
 8007bde:	2909      	cmp	r1, #9
 8007be0:	d928      	bls.n	8007c34 <_strtod_l+0x1a4>
 8007be2:	2201      	movs	r2, #1
 8007be4:	494e      	ldr	r1, [pc, #312]	@ (8007d20 <_strtod_l+0x290>)
 8007be6:	f000 ff68 	bl	8008aba <strncmp>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d032      	beq.n	8007c54 <_strtod_l+0x1c4>
 8007bee:	2000      	movs	r0, #0
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	4681      	mov	r9, r0
 8007bf4:	463d      	mov	r5, r7
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2a65      	cmp	r2, #101	@ 0x65
 8007bfa:	d001      	beq.n	8007c00 <_strtod_l+0x170>
 8007bfc:	2a45      	cmp	r2, #69	@ 0x45
 8007bfe:	d114      	bne.n	8007c2a <_strtod_l+0x19a>
 8007c00:	b91d      	cbnz	r5, 8007c0a <_strtod_l+0x17a>
 8007c02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c04:	4302      	orrs	r2, r0
 8007c06:	d095      	beq.n	8007b34 <_strtod_l+0xa4>
 8007c08:	2500      	movs	r5, #0
 8007c0a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007c0c:	1c62      	adds	r2, r4, #1
 8007c0e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c10:	7862      	ldrb	r2, [r4, #1]
 8007c12:	2a2b      	cmp	r2, #43	@ 0x2b
 8007c14:	d077      	beq.n	8007d06 <_strtod_l+0x276>
 8007c16:	2a2d      	cmp	r2, #45	@ 0x2d
 8007c18:	d07b      	beq.n	8007d12 <_strtod_l+0x282>
 8007c1a:	f04f 0c00 	mov.w	ip, #0
 8007c1e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007c22:	2909      	cmp	r1, #9
 8007c24:	f240 8082 	bls.w	8007d2c <_strtod_l+0x29c>
 8007c28:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	e0a2      	b.n	8007d76 <_strtod_l+0x2e6>
 8007c30:	2300      	movs	r3, #0
 8007c32:	e7c7      	b.n	8007bc4 <_strtod_l+0x134>
 8007c34:	2f08      	cmp	r7, #8
 8007c36:	bfd5      	itete	le
 8007c38:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007c3a:	9908      	ldrgt	r1, [sp, #32]
 8007c3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c40:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007c44:	f100 0001 	add.w	r0, r0, #1
 8007c48:	bfd4      	ite	le
 8007c4a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007c4c:	9308      	strgt	r3, [sp, #32]
 8007c4e:	3701      	adds	r7, #1
 8007c50:	9019      	str	r0, [sp, #100]	@ 0x64
 8007c52:	e7bf      	b.n	8007bd4 <_strtod_l+0x144>
 8007c54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c5a:	785a      	ldrb	r2, [r3, #1]
 8007c5c:	b37f      	cbz	r7, 8007cbe <_strtod_l+0x22e>
 8007c5e:	4681      	mov	r9, r0
 8007c60:	463d      	mov	r5, r7
 8007c62:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007c66:	2b09      	cmp	r3, #9
 8007c68:	d912      	bls.n	8007c90 <_strtod_l+0x200>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e7c4      	b.n	8007bf8 <_strtod_l+0x168>
 8007c6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c70:	3001      	adds	r0, #1
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c76:	785a      	ldrb	r2, [r3, #1]
 8007c78:	2a30      	cmp	r2, #48	@ 0x30
 8007c7a:	d0f8      	beq.n	8007c6e <_strtod_l+0x1de>
 8007c7c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	f200 84cb 	bhi.w	800861c <_strtod_l+0xb8c>
 8007c86:	4681      	mov	r9, r0
 8007c88:	2000      	movs	r0, #0
 8007c8a:	4605      	mov	r5, r0
 8007c8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c8e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c90:	3a30      	subs	r2, #48	@ 0x30
 8007c92:	f100 0301 	add.w	r3, r0, #1
 8007c96:	d02a      	beq.n	8007cee <_strtod_l+0x25e>
 8007c98:	4499      	add	r9, r3
 8007c9a:	210a      	movs	r1, #10
 8007c9c:	462b      	mov	r3, r5
 8007c9e:	eb00 0c05 	add.w	ip, r0, r5
 8007ca2:	4563      	cmp	r3, ip
 8007ca4:	d10d      	bne.n	8007cc2 <_strtod_l+0x232>
 8007ca6:	1c69      	adds	r1, r5, #1
 8007ca8:	4401      	add	r1, r0
 8007caa:	4428      	add	r0, r5
 8007cac:	2808      	cmp	r0, #8
 8007cae:	dc16      	bgt.n	8007cde <_strtod_l+0x24e>
 8007cb0:	230a      	movs	r3, #10
 8007cb2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007cb4:	fb03 2300 	mla	r3, r3, r0, r2
 8007cb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e018      	b.n	8007cf0 <_strtod_l+0x260>
 8007cbe:	4638      	mov	r0, r7
 8007cc0:	e7da      	b.n	8007c78 <_strtod_l+0x1e8>
 8007cc2:	2b08      	cmp	r3, #8
 8007cc4:	f103 0301 	add.w	r3, r3, #1
 8007cc8:	dc03      	bgt.n	8007cd2 <_strtod_l+0x242>
 8007cca:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007ccc:	434e      	muls	r6, r1
 8007cce:	960a      	str	r6, [sp, #40]	@ 0x28
 8007cd0:	e7e7      	b.n	8007ca2 <_strtod_l+0x212>
 8007cd2:	2b10      	cmp	r3, #16
 8007cd4:	bfde      	ittt	le
 8007cd6:	9e08      	ldrle	r6, [sp, #32]
 8007cd8:	434e      	mulle	r6, r1
 8007cda:	9608      	strle	r6, [sp, #32]
 8007cdc:	e7e1      	b.n	8007ca2 <_strtod_l+0x212>
 8007cde:	280f      	cmp	r0, #15
 8007ce0:	dceb      	bgt.n	8007cba <_strtod_l+0x22a>
 8007ce2:	230a      	movs	r3, #10
 8007ce4:	9808      	ldr	r0, [sp, #32]
 8007ce6:	fb03 2300 	mla	r3, r3, r0, r2
 8007cea:	9308      	str	r3, [sp, #32]
 8007cec:	e7e5      	b.n	8007cba <_strtod_l+0x22a>
 8007cee:	4629      	mov	r1, r5
 8007cf0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007cf2:	460d      	mov	r5, r1
 8007cf4:	1c50      	adds	r0, r2, #1
 8007cf6:	9019      	str	r0, [sp, #100]	@ 0x64
 8007cf8:	7852      	ldrb	r2, [r2, #1]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	e7b1      	b.n	8007c62 <_strtod_l+0x1d2>
 8007cfe:	f04f 0900 	mov.w	r9, #0
 8007d02:	2301      	movs	r3, #1
 8007d04:	e77d      	b.n	8007c02 <_strtod_l+0x172>
 8007d06:	f04f 0c00 	mov.w	ip, #0
 8007d0a:	1ca2      	adds	r2, r4, #2
 8007d0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007d0e:	78a2      	ldrb	r2, [r4, #2]
 8007d10:	e785      	b.n	8007c1e <_strtod_l+0x18e>
 8007d12:	f04f 0c01 	mov.w	ip, #1
 8007d16:	e7f8      	b.n	8007d0a <_strtod_l+0x27a>
 8007d18:	0800c2f0 	.word	0x0800c2f0
 8007d1c:	7ff00000 	.word	0x7ff00000
 8007d20:	0800c2ce 	.word	0x0800c2ce
 8007d24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d26:	1c51      	adds	r1, r2, #1
 8007d28:	9119      	str	r1, [sp, #100]	@ 0x64
 8007d2a:	7852      	ldrb	r2, [r2, #1]
 8007d2c:	2a30      	cmp	r2, #48	@ 0x30
 8007d2e:	d0f9      	beq.n	8007d24 <_strtod_l+0x294>
 8007d30:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007d34:	2908      	cmp	r1, #8
 8007d36:	f63f af78 	bhi.w	8007c2a <_strtod_l+0x19a>
 8007d3a:	f04f 080a 	mov.w	r8, #10
 8007d3e:	3a30      	subs	r2, #48	@ 0x30
 8007d40:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d44:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007d46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d48:	1c56      	adds	r6, r2, #1
 8007d4a:	9619      	str	r6, [sp, #100]	@ 0x64
 8007d4c:	7852      	ldrb	r2, [r2, #1]
 8007d4e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007d52:	f1be 0f09 	cmp.w	lr, #9
 8007d56:	d939      	bls.n	8007dcc <_strtod_l+0x33c>
 8007d58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007d5a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007d5e:	1a76      	subs	r6, r6, r1
 8007d60:	2e08      	cmp	r6, #8
 8007d62:	dc03      	bgt.n	8007d6c <_strtod_l+0x2dc>
 8007d64:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007d66:	4588      	cmp	r8, r1
 8007d68:	bfa8      	it	ge
 8007d6a:	4688      	movge	r8, r1
 8007d6c:	f1bc 0f00 	cmp.w	ip, #0
 8007d70:	d001      	beq.n	8007d76 <_strtod_l+0x2e6>
 8007d72:	f1c8 0800 	rsb	r8, r8, #0
 8007d76:	2d00      	cmp	r5, #0
 8007d78:	d14e      	bne.n	8007e18 <_strtod_l+0x388>
 8007d7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d7c:	4308      	orrs	r0, r1
 8007d7e:	f47f aec0 	bne.w	8007b02 <_strtod_l+0x72>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f47f aed6 	bne.w	8007b34 <_strtod_l+0xa4>
 8007d88:	2a69      	cmp	r2, #105	@ 0x69
 8007d8a:	d028      	beq.n	8007dde <_strtod_l+0x34e>
 8007d8c:	dc25      	bgt.n	8007dda <_strtod_l+0x34a>
 8007d8e:	2a49      	cmp	r2, #73	@ 0x49
 8007d90:	d025      	beq.n	8007dde <_strtod_l+0x34e>
 8007d92:	2a4e      	cmp	r2, #78	@ 0x4e
 8007d94:	f47f aece 	bne.w	8007b34 <_strtod_l+0xa4>
 8007d98:	499a      	ldr	r1, [pc, #616]	@ (8008004 <_strtod_l+0x574>)
 8007d9a:	a819      	add	r0, sp, #100	@ 0x64
 8007d9c:	f001 fa78 	bl	8009290 <__match>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	f43f aec7 	beq.w	8007b34 <_strtod_l+0xa4>
 8007da6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2b28      	cmp	r3, #40	@ 0x28
 8007dac:	d12e      	bne.n	8007e0c <_strtod_l+0x37c>
 8007dae:	4996      	ldr	r1, [pc, #600]	@ (8008008 <_strtod_l+0x578>)
 8007db0:	aa1c      	add	r2, sp, #112	@ 0x70
 8007db2:	a819      	add	r0, sp, #100	@ 0x64
 8007db4:	f001 fa80 	bl	80092b8 <__hexnan>
 8007db8:	2805      	cmp	r0, #5
 8007dba:	d127      	bne.n	8007e0c <_strtod_l+0x37c>
 8007dbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007dbe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007dc2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007dc6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007dca:	e69a      	b.n	8007b02 <_strtod_l+0x72>
 8007dcc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007dce:	fb08 2101 	mla	r1, r8, r1, r2
 8007dd2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007dd6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007dd8:	e7b5      	b.n	8007d46 <_strtod_l+0x2b6>
 8007dda:	2a6e      	cmp	r2, #110	@ 0x6e
 8007ddc:	e7da      	b.n	8007d94 <_strtod_l+0x304>
 8007dde:	498b      	ldr	r1, [pc, #556]	@ (800800c <_strtod_l+0x57c>)
 8007de0:	a819      	add	r0, sp, #100	@ 0x64
 8007de2:	f001 fa55 	bl	8009290 <__match>
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f43f aea4 	beq.w	8007b34 <_strtod_l+0xa4>
 8007dec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dee:	4988      	ldr	r1, [pc, #544]	@ (8008010 <_strtod_l+0x580>)
 8007df0:	3b01      	subs	r3, #1
 8007df2:	a819      	add	r0, sp, #100	@ 0x64
 8007df4:	9319      	str	r3, [sp, #100]	@ 0x64
 8007df6:	f001 fa4b 	bl	8009290 <__match>
 8007dfa:	b910      	cbnz	r0, 8007e02 <_strtod_l+0x372>
 8007dfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dfe:	3301      	adds	r3, #1
 8007e00:	9319      	str	r3, [sp, #100]	@ 0x64
 8007e02:	f04f 0a00 	mov.w	sl, #0
 8007e06:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008014 <_strtod_l+0x584>
 8007e0a:	e67a      	b.n	8007b02 <_strtod_l+0x72>
 8007e0c:	4882      	ldr	r0, [pc, #520]	@ (8008018 <_strtod_l+0x588>)
 8007e0e:	f000 ff45 	bl	8008c9c <nan>
 8007e12:	4682      	mov	sl, r0
 8007e14:	468b      	mov	fp, r1
 8007e16:	e674      	b.n	8007b02 <_strtod_l+0x72>
 8007e18:	eba8 0309 	sub.w	r3, r8, r9
 8007e1c:	2f00      	cmp	r7, #0
 8007e1e:	bf08      	it	eq
 8007e20:	462f      	moveq	r7, r5
 8007e22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e24:	2d10      	cmp	r5, #16
 8007e26:	462c      	mov	r4, r5
 8007e28:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e2a:	bfa8      	it	ge
 8007e2c:	2410      	movge	r4, #16
 8007e2e:	f7f8 fadb 	bl	80003e8 <__aeabi_ui2d>
 8007e32:	2d09      	cmp	r5, #9
 8007e34:	4682      	mov	sl, r0
 8007e36:	468b      	mov	fp, r1
 8007e38:	dc11      	bgt.n	8007e5e <_strtod_l+0x3ce>
 8007e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f43f ae60 	beq.w	8007b02 <_strtod_l+0x72>
 8007e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e44:	dd76      	ble.n	8007f34 <_strtod_l+0x4a4>
 8007e46:	2b16      	cmp	r3, #22
 8007e48:	dc5d      	bgt.n	8007f06 <_strtod_l+0x476>
 8007e4a:	4974      	ldr	r1, [pc, #464]	@ (800801c <_strtod_l+0x58c>)
 8007e4c:	4652      	mov	r2, sl
 8007e4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e52:	465b      	mov	r3, fp
 8007e54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e58:	f7f8 fb40 	bl	80004dc <__aeabi_dmul>
 8007e5c:	e7d9      	b.n	8007e12 <_strtod_l+0x382>
 8007e5e:	4b6f      	ldr	r3, [pc, #444]	@ (800801c <_strtod_l+0x58c>)
 8007e60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007e68:	f7f8 fb38 	bl	80004dc <__aeabi_dmul>
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	9808      	ldr	r0, [sp, #32]
 8007e70:	468b      	mov	fp, r1
 8007e72:	f7f8 fab9 	bl	80003e8 <__aeabi_ui2d>
 8007e76:	4602      	mov	r2, r0
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4650      	mov	r0, sl
 8007e7c:	4659      	mov	r1, fp
 8007e7e:	f7f8 f977 	bl	8000170 <__adddf3>
 8007e82:	2d0f      	cmp	r5, #15
 8007e84:	4682      	mov	sl, r0
 8007e86:	468b      	mov	fp, r1
 8007e88:	ddd7      	ble.n	8007e3a <_strtod_l+0x3aa>
 8007e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e8c:	1b2c      	subs	r4, r5, r4
 8007e8e:	441c      	add	r4, r3
 8007e90:	2c00      	cmp	r4, #0
 8007e92:	f340 8096 	ble.w	8007fc2 <_strtod_l+0x532>
 8007e96:	f014 030f 	ands.w	r3, r4, #15
 8007e9a:	d00a      	beq.n	8007eb2 <_strtod_l+0x422>
 8007e9c:	495f      	ldr	r1, [pc, #380]	@ (800801c <_strtod_l+0x58c>)
 8007e9e:	4652      	mov	r2, sl
 8007ea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ea8:	465b      	mov	r3, fp
 8007eaa:	f7f8 fb17 	bl	80004dc <__aeabi_dmul>
 8007eae:	4682      	mov	sl, r0
 8007eb0:	468b      	mov	fp, r1
 8007eb2:	f034 040f 	bics.w	r4, r4, #15
 8007eb6:	d073      	beq.n	8007fa0 <_strtod_l+0x510>
 8007eb8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007ebc:	dd48      	ble.n	8007f50 <_strtod_l+0x4c0>
 8007ebe:	2400      	movs	r4, #0
 8007ec0:	46a0      	mov	r8, r4
 8007ec2:	46a1      	mov	r9, r4
 8007ec4:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ec6:	2322      	movs	r3, #34	@ 0x22
 8007ec8:	f04f 0a00 	mov.w	sl, #0
 8007ecc:	9a05      	ldr	r2, [sp, #20]
 8007ece:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008014 <_strtod_l+0x584>
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f43f ae13 	beq.w	8007b02 <_strtod_l+0x72>
 8007edc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ede:	9805      	ldr	r0, [sp, #20]
 8007ee0:	f001 fb8e 	bl	8009600 <_Bfree>
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	9805      	ldr	r0, [sp, #20]
 8007ee8:	f001 fb8a 	bl	8009600 <_Bfree>
 8007eec:	4641      	mov	r1, r8
 8007eee:	9805      	ldr	r0, [sp, #20]
 8007ef0:	f001 fb86 	bl	8009600 <_Bfree>
 8007ef4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ef6:	9805      	ldr	r0, [sp, #20]
 8007ef8:	f001 fb82 	bl	8009600 <_Bfree>
 8007efc:	4621      	mov	r1, r4
 8007efe:	9805      	ldr	r0, [sp, #20]
 8007f00:	f001 fb7e 	bl	8009600 <_Bfree>
 8007f04:	e5fd      	b.n	8007b02 <_strtod_l+0x72>
 8007f06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	dbbc      	blt.n	8007e8a <_strtod_l+0x3fa>
 8007f10:	4c42      	ldr	r4, [pc, #264]	@ (800801c <_strtod_l+0x58c>)
 8007f12:	f1c5 050f 	rsb	r5, r5, #15
 8007f16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f1a:	4652      	mov	r2, sl
 8007f1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f20:	465b      	mov	r3, fp
 8007f22:	f7f8 fadb 	bl	80004dc <__aeabi_dmul>
 8007f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f28:	1b5d      	subs	r5, r3, r5
 8007f2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007f2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f32:	e791      	b.n	8007e58 <_strtod_l+0x3c8>
 8007f34:	3316      	adds	r3, #22
 8007f36:	dba8      	blt.n	8007e8a <_strtod_l+0x3fa>
 8007f38:	4b38      	ldr	r3, [pc, #224]	@ (800801c <_strtod_l+0x58c>)
 8007f3a:	eba9 0808 	sub.w	r8, r9, r8
 8007f3e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007f42:	4650      	mov	r0, sl
 8007f44:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007f48:	4659      	mov	r1, fp
 8007f4a:	f7f8 fbf1 	bl	8000730 <__aeabi_ddiv>
 8007f4e:	e760      	b.n	8007e12 <_strtod_l+0x382>
 8007f50:	4b33      	ldr	r3, [pc, #204]	@ (8008020 <_strtod_l+0x590>)
 8007f52:	4650      	mov	r0, sl
 8007f54:	9308      	str	r3, [sp, #32]
 8007f56:	2300      	movs	r3, #0
 8007f58:	4659      	mov	r1, fp
 8007f5a:	461e      	mov	r6, r3
 8007f5c:	1124      	asrs	r4, r4, #4
 8007f5e:	2c01      	cmp	r4, #1
 8007f60:	dc21      	bgt.n	8007fa6 <_strtod_l+0x516>
 8007f62:	b10b      	cbz	r3, 8007f68 <_strtod_l+0x4d8>
 8007f64:	4682      	mov	sl, r0
 8007f66:	468b      	mov	fp, r1
 8007f68:	492d      	ldr	r1, [pc, #180]	@ (8008020 <_strtod_l+0x590>)
 8007f6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007f6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007f72:	4652      	mov	r2, sl
 8007f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f78:	465b      	mov	r3, fp
 8007f7a:	f7f8 faaf 	bl	80004dc <__aeabi_dmul>
 8007f7e:	4b25      	ldr	r3, [pc, #148]	@ (8008014 <_strtod_l+0x584>)
 8007f80:	460a      	mov	r2, r1
 8007f82:	400b      	ands	r3, r1
 8007f84:	4927      	ldr	r1, [pc, #156]	@ (8008024 <_strtod_l+0x594>)
 8007f86:	4682      	mov	sl, r0
 8007f88:	428b      	cmp	r3, r1
 8007f8a:	d898      	bhi.n	8007ebe <_strtod_l+0x42e>
 8007f8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007f90:	428b      	cmp	r3, r1
 8007f92:	bf86      	itte	hi
 8007f94:	f04f 3aff 	movhi.w	sl, #4294967295
 8007f98:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008028 <_strtod_l+0x598>
 8007f9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	9308      	str	r3, [sp, #32]
 8007fa4:	e07a      	b.n	800809c <_strtod_l+0x60c>
 8007fa6:	07e2      	lsls	r2, r4, #31
 8007fa8:	d505      	bpl.n	8007fb6 <_strtod_l+0x526>
 8007faa:	9b08      	ldr	r3, [sp, #32]
 8007fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb0:	f7f8 fa94 	bl	80004dc <__aeabi_dmul>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	9a08      	ldr	r2, [sp, #32]
 8007fb8:	3601      	adds	r6, #1
 8007fba:	3208      	adds	r2, #8
 8007fbc:	1064      	asrs	r4, r4, #1
 8007fbe:	9208      	str	r2, [sp, #32]
 8007fc0:	e7cd      	b.n	8007f5e <_strtod_l+0x4ce>
 8007fc2:	d0ed      	beq.n	8007fa0 <_strtod_l+0x510>
 8007fc4:	4264      	negs	r4, r4
 8007fc6:	f014 020f 	ands.w	r2, r4, #15
 8007fca:	d00a      	beq.n	8007fe2 <_strtod_l+0x552>
 8007fcc:	4b13      	ldr	r3, [pc, #76]	@ (800801c <_strtod_l+0x58c>)
 8007fce:	4650      	mov	r0, sl
 8007fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fd4:	4659      	mov	r1, fp
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	f7f8 fba9 	bl	8000730 <__aeabi_ddiv>
 8007fde:	4682      	mov	sl, r0
 8007fe0:	468b      	mov	fp, r1
 8007fe2:	1124      	asrs	r4, r4, #4
 8007fe4:	d0dc      	beq.n	8007fa0 <_strtod_l+0x510>
 8007fe6:	2c1f      	cmp	r4, #31
 8007fe8:	dd20      	ble.n	800802c <_strtod_l+0x59c>
 8007fea:	2400      	movs	r4, #0
 8007fec:	46a0      	mov	r8, r4
 8007fee:	46a1      	mov	r9, r4
 8007ff0:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ff2:	2322      	movs	r3, #34	@ 0x22
 8007ff4:	9a05      	ldr	r2, [sp, #20]
 8007ff6:	f04f 0a00 	mov.w	sl, #0
 8007ffa:	f04f 0b00 	mov.w	fp, #0
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	e768      	b.n	8007ed4 <_strtod_l+0x444>
 8008002:	bf00      	nop
 8008004:	0800c2d9 	.word	0x0800c2d9
 8008008:	0800c2dc 	.word	0x0800c2dc
 800800c:	0800c2d0 	.word	0x0800c2d0
 8008010:	0800c2d3 	.word	0x0800c2d3
 8008014:	7ff00000 	.word	0x7ff00000
 8008018:	0800c4e5 	.word	0x0800c4e5
 800801c:	0800c5e8 	.word	0x0800c5e8
 8008020:	0800c5c0 	.word	0x0800c5c0
 8008024:	7ca00000 	.word	0x7ca00000
 8008028:	7fefffff 	.word	0x7fefffff
 800802c:	f014 0310 	ands.w	r3, r4, #16
 8008030:	bf18      	it	ne
 8008032:	236a      	movne	r3, #106	@ 0x6a
 8008034:	4650      	mov	r0, sl
 8008036:	9308      	str	r3, [sp, #32]
 8008038:	4659      	mov	r1, fp
 800803a:	2300      	movs	r3, #0
 800803c:	4ea9      	ldr	r6, [pc, #676]	@ (80082e4 <_strtod_l+0x854>)
 800803e:	07e2      	lsls	r2, r4, #31
 8008040:	d504      	bpl.n	800804c <_strtod_l+0x5bc>
 8008042:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008046:	f7f8 fa49 	bl	80004dc <__aeabi_dmul>
 800804a:	2301      	movs	r3, #1
 800804c:	1064      	asrs	r4, r4, #1
 800804e:	f106 0608 	add.w	r6, r6, #8
 8008052:	d1f4      	bne.n	800803e <_strtod_l+0x5ae>
 8008054:	b10b      	cbz	r3, 800805a <_strtod_l+0x5ca>
 8008056:	4682      	mov	sl, r0
 8008058:	468b      	mov	fp, r1
 800805a:	9b08      	ldr	r3, [sp, #32]
 800805c:	b1b3      	cbz	r3, 800808c <_strtod_l+0x5fc>
 800805e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008062:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008066:	2b00      	cmp	r3, #0
 8008068:	4659      	mov	r1, fp
 800806a:	dd0f      	ble.n	800808c <_strtod_l+0x5fc>
 800806c:	2b1f      	cmp	r3, #31
 800806e:	dd57      	ble.n	8008120 <_strtod_l+0x690>
 8008070:	2b34      	cmp	r3, #52	@ 0x34
 8008072:	bfd8      	it	le
 8008074:	f04f 33ff 	movle.w	r3, #4294967295
 8008078:	f04f 0a00 	mov.w	sl, #0
 800807c:	bfcf      	iteee	gt
 800807e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008082:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008086:	4093      	lslle	r3, r2
 8008088:	ea03 0b01 	andle.w	fp, r3, r1
 800808c:	2200      	movs	r2, #0
 800808e:	2300      	movs	r3, #0
 8008090:	4650      	mov	r0, sl
 8008092:	4659      	mov	r1, fp
 8008094:	f7f8 fc8a 	bl	80009ac <__aeabi_dcmpeq>
 8008098:	2800      	cmp	r0, #0
 800809a:	d1a6      	bne.n	8007fea <_strtod_l+0x55a>
 800809c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800809e:	463a      	mov	r2, r7
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80080a4:	462b      	mov	r3, r5
 80080a6:	9805      	ldr	r0, [sp, #20]
 80080a8:	f001 fb12 	bl	80096d0 <__s2b>
 80080ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f43f af05 	beq.w	8007ebe <_strtod_l+0x42e>
 80080b4:	2400      	movs	r4, #0
 80080b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080b8:	eba9 0308 	sub.w	r3, r9, r8
 80080bc:	2a00      	cmp	r2, #0
 80080be:	bfa8      	it	ge
 80080c0:	2300      	movge	r3, #0
 80080c2:	46a0      	mov	r8, r4
 80080c4:	9312      	str	r3, [sp, #72]	@ 0x48
 80080c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80080ca:	9316      	str	r3, [sp, #88]	@ 0x58
 80080cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080ce:	9805      	ldr	r0, [sp, #20]
 80080d0:	6859      	ldr	r1, [r3, #4]
 80080d2:	f001 fa55 	bl	8009580 <_Balloc>
 80080d6:	4681      	mov	r9, r0
 80080d8:	2800      	cmp	r0, #0
 80080da:	f43f aef4 	beq.w	8007ec6 <_strtod_l+0x436>
 80080de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080e0:	300c      	adds	r0, #12
 80080e2:	691a      	ldr	r2, [r3, #16]
 80080e4:	f103 010c 	add.w	r1, r3, #12
 80080e8:	3202      	adds	r2, #2
 80080ea:	0092      	lsls	r2, r2, #2
 80080ec:	f000 fdc7 	bl	8008c7e <memcpy>
 80080f0:	ab1c      	add	r3, sp, #112	@ 0x70
 80080f2:	9301      	str	r3, [sp, #4]
 80080f4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	4652      	mov	r2, sl
 80080fa:	465b      	mov	r3, fp
 80080fc:	9805      	ldr	r0, [sp, #20]
 80080fe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008102:	f001 fe17 	bl	8009d34 <__d2b>
 8008106:	901a      	str	r0, [sp, #104]	@ 0x68
 8008108:	2800      	cmp	r0, #0
 800810a:	f43f aedc 	beq.w	8007ec6 <_strtod_l+0x436>
 800810e:	2101      	movs	r1, #1
 8008110:	9805      	ldr	r0, [sp, #20]
 8008112:	f001 fb73 	bl	80097fc <__i2b>
 8008116:	4680      	mov	r8, r0
 8008118:	b948      	cbnz	r0, 800812e <_strtod_l+0x69e>
 800811a:	f04f 0800 	mov.w	r8, #0
 800811e:	e6d2      	b.n	8007ec6 <_strtod_l+0x436>
 8008120:	f04f 32ff 	mov.w	r2, #4294967295
 8008124:	fa02 f303 	lsl.w	r3, r2, r3
 8008128:	ea03 0a0a 	and.w	sl, r3, sl
 800812c:	e7ae      	b.n	800808c <_strtod_l+0x5fc>
 800812e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008130:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008132:	2d00      	cmp	r5, #0
 8008134:	bfab      	itete	ge
 8008136:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008138:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800813a:	18ef      	addge	r7, r5, r3
 800813c:	1b5e      	sublt	r6, r3, r5
 800813e:	9b08      	ldr	r3, [sp, #32]
 8008140:	bfa8      	it	ge
 8008142:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008144:	eba5 0503 	sub.w	r5, r5, r3
 8008148:	4415      	add	r5, r2
 800814a:	4b67      	ldr	r3, [pc, #412]	@ (80082e8 <_strtod_l+0x858>)
 800814c:	f105 35ff 	add.w	r5, r5, #4294967295
 8008150:	bfb8      	it	lt
 8008152:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008154:	429d      	cmp	r5, r3
 8008156:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800815a:	da50      	bge.n	80081fe <_strtod_l+0x76e>
 800815c:	1b5b      	subs	r3, r3, r5
 800815e:	2b1f      	cmp	r3, #31
 8008160:	f04f 0101 	mov.w	r1, #1
 8008164:	eba2 0203 	sub.w	r2, r2, r3
 8008168:	dc3d      	bgt.n	80081e6 <_strtod_l+0x756>
 800816a:	fa01 f303 	lsl.w	r3, r1, r3
 800816e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008170:	2300      	movs	r3, #0
 8008172:	9310      	str	r3, [sp, #64]	@ 0x40
 8008174:	18bd      	adds	r5, r7, r2
 8008176:	9b08      	ldr	r3, [sp, #32]
 8008178:	42af      	cmp	r7, r5
 800817a:	4416      	add	r6, r2
 800817c:	441e      	add	r6, r3
 800817e:	463b      	mov	r3, r7
 8008180:	bfa8      	it	ge
 8008182:	462b      	movge	r3, r5
 8008184:	42b3      	cmp	r3, r6
 8008186:	bfa8      	it	ge
 8008188:	4633      	movge	r3, r6
 800818a:	2b00      	cmp	r3, #0
 800818c:	bfc2      	ittt	gt
 800818e:	1aed      	subgt	r5, r5, r3
 8008190:	1af6      	subgt	r6, r6, r3
 8008192:	1aff      	subgt	r7, r7, r3
 8008194:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008196:	2b00      	cmp	r3, #0
 8008198:	dd16      	ble.n	80081c8 <_strtod_l+0x738>
 800819a:	4641      	mov	r1, r8
 800819c:	461a      	mov	r2, r3
 800819e:	9805      	ldr	r0, [sp, #20]
 80081a0:	f001 fbea 	bl	8009978 <__pow5mult>
 80081a4:	4680      	mov	r8, r0
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d0b7      	beq.n	800811a <_strtod_l+0x68a>
 80081aa:	4601      	mov	r1, r0
 80081ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80081ae:	9805      	ldr	r0, [sp, #20]
 80081b0:	f001 fb3a 	bl	8009828 <__multiply>
 80081b4:	900e      	str	r0, [sp, #56]	@ 0x38
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f43f ae85 	beq.w	8007ec6 <_strtod_l+0x436>
 80081bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081be:	9805      	ldr	r0, [sp, #20]
 80081c0:	f001 fa1e 	bl	8009600 <_Bfree>
 80081c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	dc1d      	bgt.n	8008208 <_strtod_l+0x778>
 80081cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	dd23      	ble.n	800821a <_strtod_l+0x78a>
 80081d2:	4649      	mov	r1, r9
 80081d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80081d6:	9805      	ldr	r0, [sp, #20]
 80081d8:	f001 fbce 	bl	8009978 <__pow5mult>
 80081dc:	4681      	mov	r9, r0
 80081de:	b9e0      	cbnz	r0, 800821a <_strtod_l+0x78a>
 80081e0:	f04f 0900 	mov.w	r9, #0
 80081e4:	e66f      	b.n	8007ec6 <_strtod_l+0x436>
 80081e6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80081ea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80081ee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80081f2:	35e2      	adds	r5, #226	@ 0xe2
 80081f4:	fa01 f305 	lsl.w	r3, r1, r5
 80081f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80081fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80081fc:	e7ba      	b.n	8008174 <_strtod_l+0x6e4>
 80081fe:	2300      	movs	r3, #0
 8008200:	9310      	str	r3, [sp, #64]	@ 0x40
 8008202:	2301      	movs	r3, #1
 8008204:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008206:	e7b5      	b.n	8008174 <_strtod_l+0x6e4>
 8008208:	462a      	mov	r2, r5
 800820a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800820c:	9805      	ldr	r0, [sp, #20]
 800820e:	f001 fc0d 	bl	8009a2c <__lshift>
 8008212:	901a      	str	r0, [sp, #104]	@ 0x68
 8008214:	2800      	cmp	r0, #0
 8008216:	d1d9      	bne.n	80081cc <_strtod_l+0x73c>
 8008218:	e655      	b.n	8007ec6 <_strtod_l+0x436>
 800821a:	2e00      	cmp	r6, #0
 800821c:	dd07      	ble.n	800822e <_strtod_l+0x79e>
 800821e:	4649      	mov	r1, r9
 8008220:	4632      	mov	r2, r6
 8008222:	9805      	ldr	r0, [sp, #20]
 8008224:	f001 fc02 	bl	8009a2c <__lshift>
 8008228:	4681      	mov	r9, r0
 800822a:	2800      	cmp	r0, #0
 800822c:	d0d8      	beq.n	80081e0 <_strtod_l+0x750>
 800822e:	2f00      	cmp	r7, #0
 8008230:	dd08      	ble.n	8008244 <_strtod_l+0x7b4>
 8008232:	4641      	mov	r1, r8
 8008234:	463a      	mov	r2, r7
 8008236:	9805      	ldr	r0, [sp, #20]
 8008238:	f001 fbf8 	bl	8009a2c <__lshift>
 800823c:	4680      	mov	r8, r0
 800823e:	2800      	cmp	r0, #0
 8008240:	f43f ae41 	beq.w	8007ec6 <_strtod_l+0x436>
 8008244:	464a      	mov	r2, r9
 8008246:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008248:	9805      	ldr	r0, [sp, #20]
 800824a:	f001 fc77 	bl	8009b3c <__mdiff>
 800824e:	4604      	mov	r4, r0
 8008250:	2800      	cmp	r0, #0
 8008252:	f43f ae38 	beq.w	8007ec6 <_strtod_l+0x436>
 8008256:	68c3      	ldr	r3, [r0, #12]
 8008258:	4641      	mov	r1, r8
 800825a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800825c:	2300      	movs	r3, #0
 800825e:	60c3      	str	r3, [r0, #12]
 8008260:	f001 fc50 	bl	8009b04 <__mcmp>
 8008264:	2800      	cmp	r0, #0
 8008266:	da45      	bge.n	80082f4 <_strtod_l+0x864>
 8008268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800826a:	ea53 030a 	orrs.w	r3, r3, sl
 800826e:	d16b      	bne.n	8008348 <_strtod_l+0x8b8>
 8008270:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008274:	2b00      	cmp	r3, #0
 8008276:	d167      	bne.n	8008348 <_strtod_l+0x8b8>
 8008278:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800827c:	0d1b      	lsrs	r3, r3, #20
 800827e:	051b      	lsls	r3, r3, #20
 8008280:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008284:	d960      	bls.n	8008348 <_strtod_l+0x8b8>
 8008286:	6963      	ldr	r3, [r4, #20]
 8008288:	b913      	cbnz	r3, 8008290 <_strtod_l+0x800>
 800828a:	6923      	ldr	r3, [r4, #16]
 800828c:	2b01      	cmp	r3, #1
 800828e:	dd5b      	ble.n	8008348 <_strtod_l+0x8b8>
 8008290:	4621      	mov	r1, r4
 8008292:	2201      	movs	r2, #1
 8008294:	9805      	ldr	r0, [sp, #20]
 8008296:	f001 fbc9 	bl	8009a2c <__lshift>
 800829a:	4641      	mov	r1, r8
 800829c:	4604      	mov	r4, r0
 800829e:	f001 fc31 	bl	8009b04 <__mcmp>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	dd50      	ble.n	8008348 <_strtod_l+0x8b8>
 80082a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082aa:	9a08      	ldr	r2, [sp, #32]
 80082ac:	0d1b      	lsrs	r3, r3, #20
 80082ae:	051b      	lsls	r3, r3, #20
 80082b0:	2a00      	cmp	r2, #0
 80082b2:	d06a      	beq.n	800838a <_strtod_l+0x8fa>
 80082b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80082b8:	d867      	bhi.n	800838a <_strtod_l+0x8fa>
 80082ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80082be:	f67f ae98 	bls.w	8007ff2 <_strtod_l+0x562>
 80082c2:	4650      	mov	r0, sl
 80082c4:	4659      	mov	r1, fp
 80082c6:	4b09      	ldr	r3, [pc, #36]	@ (80082ec <_strtod_l+0x85c>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	f7f8 f907 	bl	80004dc <__aeabi_dmul>
 80082ce:	4b08      	ldr	r3, [pc, #32]	@ (80082f0 <_strtod_l+0x860>)
 80082d0:	4682      	mov	sl, r0
 80082d2:	400b      	ands	r3, r1
 80082d4:	468b      	mov	fp, r1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f47f ae00 	bne.w	8007edc <_strtod_l+0x44c>
 80082dc:	2322      	movs	r3, #34	@ 0x22
 80082de:	9a05      	ldr	r2, [sp, #20]
 80082e0:	6013      	str	r3, [r2, #0]
 80082e2:	e5fb      	b.n	8007edc <_strtod_l+0x44c>
 80082e4:	0800c308 	.word	0x0800c308
 80082e8:	fffffc02 	.word	0xfffffc02
 80082ec:	39500000 	.word	0x39500000
 80082f0:	7ff00000 	.word	0x7ff00000
 80082f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80082f8:	d165      	bne.n	80083c6 <_strtod_l+0x936>
 80082fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80082fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008300:	b35a      	cbz	r2, 800835a <_strtod_l+0x8ca>
 8008302:	4a99      	ldr	r2, [pc, #612]	@ (8008568 <_strtod_l+0xad8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d12b      	bne.n	8008360 <_strtod_l+0x8d0>
 8008308:	9b08      	ldr	r3, [sp, #32]
 800830a:	4651      	mov	r1, sl
 800830c:	b303      	cbz	r3, 8008350 <_strtod_l+0x8c0>
 800830e:	465a      	mov	r2, fp
 8008310:	4b96      	ldr	r3, [pc, #600]	@ (800856c <_strtod_l+0xadc>)
 8008312:	4013      	ands	r3, r2
 8008314:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008318:	f04f 32ff 	mov.w	r2, #4294967295
 800831c:	d81b      	bhi.n	8008356 <_strtod_l+0x8c6>
 800831e:	0d1b      	lsrs	r3, r3, #20
 8008320:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008324:	fa02 f303 	lsl.w	r3, r2, r3
 8008328:	4299      	cmp	r1, r3
 800832a:	d119      	bne.n	8008360 <_strtod_l+0x8d0>
 800832c:	4b90      	ldr	r3, [pc, #576]	@ (8008570 <_strtod_l+0xae0>)
 800832e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008330:	429a      	cmp	r2, r3
 8008332:	d102      	bne.n	800833a <_strtod_l+0x8aa>
 8008334:	3101      	adds	r1, #1
 8008336:	f43f adc6 	beq.w	8007ec6 <_strtod_l+0x436>
 800833a:	f04f 0a00 	mov.w	sl, #0
 800833e:	4b8b      	ldr	r3, [pc, #556]	@ (800856c <_strtod_l+0xadc>)
 8008340:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008342:	401a      	ands	r2, r3
 8008344:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008348:	9b08      	ldr	r3, [sp, #32]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1b9      	bne.n	80082c2 <_strtod_l+0x832>
 800834e:	e5c5      	b.n	8007edc <_strtod_l+0x44c>
 8008350:	f04f 33ff 	mov.w	r3, #4294967295
 8008354:	e7e8      	b.n	8008328 <_strtod_l+0x898>
 8008356:	4613      	mov	r3, r2
 8008358:	e7e6      	b.n	8008328 <_strtod_l+0x898>
 800835a:	ea53 030a 	orrs.w	r3, r3, sl
 800835e:	d0a2      	beq.n	80082a6 <_strtod_l+0x816>
 8008360:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008362:	b1db      	cbz	r3, 800839c <_strtod_l+0x90c>
 8008364:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008366:	4213      	tst	r3, r2
 8008368:	d0ee      	beq.n	8008348 <_strtod_l+0x8b8>
 800836a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800836c:	4650      	mov	r0, sl
 800836e:	4659      	mov	r1, fp
 8008370:	9a08      	ldr	r2, [sp, #32]
 8008372:	b1bb      	cbz	r3, 80083a4 <_strtod_l+0x914>
 8008374:	f7ff fb68 	bl	8007a48 <sulp>
 8008378:	4602      	mov	r2, r0
 800837a:	460b      	mov	r3, r1
 800837c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008380:	f7f7 fef6 	bl	8000170 <__adddf3>
 8008384:	4682      	mov	sl, r0
 8008386:	468b      	mov	fp, r1
 8008388:	e7de      	b.n	8008348 <_strtod_l+0x8b8>
 800838a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800838e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008392:	f04f 3aff 	mov.w	sl, #4294967295
 8008396:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800839a:	e7d5      	b.n	8008348 <_strtod_l+0x8b8>
 800839c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800839e:	ea13 0f0a 	tst.w	r3, sl
 80083a2:	e7e1      	b.n	8008368 <_strtod_l+0x8d8>
 80083a4:	f7ff fb50 	bl	8007a48 <sulp>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083b0:	f7f7 fedc 	bl	800016c <__aeabi_dsub>
 80083b4:	2200      	movs	r2, #0
 80083b6:	2300      	movs	r3, #0
 80083b8:	4682      	mov	sl, r0
 80083ba:	468b      	mov	fp, r1
 80083bc:	f7f8 faf6 	bl	80009ac <__aeabi_dcmpeq>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d0c1      	beq.n	8008348 <_strtod_l+0x8b8>
 80083c4:	e615      	b.n	8007ff2 <_strtod_l+0x562>
 80083c6:	4641      	mov	r1, r8
 80083c8:	4620      	mov	r0, r4
 80083ca:	f001 fd0b 	bl	8009de4 <__ratio>
 80083ce:	2200      	movs	r2, #0
 80083d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80083d4:	4606      	mov	r6, r0
 80083d6:	460f      	mov	r7, r1
 80083d8:	f7f8 fafc 	bl	80009d4 <__aeabi_dcmple>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d06d      	beq.n	80084bc <_strtod_l+0xa2c>
 80083e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d178      	bne.n	80084d8 <_strtod_l+0xa48>
 80083e6:	f1ba 0f00 	cmp.w	sl, #0
 80083ea:	d156      	bne.n	800849a <_strtod_l+0xa0a>
 80083ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d158      	bne.n	80084a8 <_strtod_l+0xa18>
 80083f6:	2200      	movs	r2, #0
 80083f8:	4630      	mov	r0, r6
 80083fa:	4639      	mov	r1, r7
 80083fc:	4b5d      	ldr	r3, [pc, #372]	@ (8008574 <_strtod_l+0xae4>)
 80083fe:	f7f8 fadf 	bl	80009c0 <__aeabi_dcmplt>
 8008402:	2800      	cmp	r0, #0
 8008404:	d157      	bne.n	80084b6 <_strtod_l+0xa26>
 8008406:	4630      	mov	r0, r6
 8008408:	4639      	mov	r1, r7
 800840a:	2200      	movs	r2, #0
 800840c:	4b5a      	ldr	r3, [pc, #360]	@ (8008578 <_strtod_l+0xae8>)
 800840e:	f7f8 f865 	bl	80004dc <__aeabi_dmul>
 8008412:	4606      	mov	r6, r0
 8008414:	460f      	mov	r7, r1
 8008416:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800841a:	9606      	str	r6, [sp, #24]
 800841c:	9307      	str	r3, [sp, #28]
 800841e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008422:	4d52      	ldr	r5, [pc, #328]	@ (800856c <_strtod_l+0xadc>)
 8008424:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008428:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800842a:	401d      	ands	r5, r3
 800842c:	4b53      	ldr	r3, [pc, #332]	@ (800857c <_strtod_l+0xaec>)
 800842e:	429d      	cmp	r5, r3
 8008430:	f040 80aa 	bne.w	8008588 <_strtod_l+0xaf8>
 8008434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008436:	4650      	mov	r0, sl
 8008438:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800843c:	4659      	mov	r1, fp
 800843e:	f001 fc11 	bl	8009c64 <__ulp>
 8008442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008446:	f7f8 f849 	bl	80004dc <__aeabi_dmul>
 800844a:	4652      	mov	r2, sl
 800844c:	465b      	mov	r3, fp
 800844e:	f7f7 fe8f 	bl	8000170 <__adddf3>
 8008452:	460b      	mov	r3, r1
 8008454:	4945      	ldr	r1, [pc, #276]	@ (800856c <_strtod_l+0xadc>)
 8008456:	4a4a      	ldr	r2, [pc, #296]	@ (8008580 <_strtod_l+0xaf0>)
 8008458:	4019      	ands	r1, r3
 800845a:	4291      	cmp	r1, r2
 800845c:	4682      	mov	sl, r0
 800845e:	d942      	bls.n	80084e6 <_strtod_l+0xa56>
 8008460:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008462:	4b43      	ldr	r3, [pc, #268]	@ (8008570 <_strtod_l+0xae0>)
 8008464:	429a      	cmp	r2, r3
 8008466:	d103      	bne.n	8008470 <_strtod_l+0x9e0>
 8008468:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800846a:	3301      	adds	r3, #1
 800846c:	f43f ad2b 	beq.w	8007ec6 <_strtod_l+0x436>
 8008470:	f04f 3aff 	mov.w	sl, #4294967295
 8008474:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008570 <_strtod_l+0xae0>
 8008478:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800847a:	9805      	ldr	r0, [sp, #20]
 800847c:	f001 f8c0 	bl	8009600 <_Bfree>
 8008480:	4649      	mov	r1, r9
 8008482:	9805      	ldr	r0, [sp, #20]
 8008484:	f001 f8bc 	bl	8009600 <_Bfree>
 8008488:	4641      	mov	r1, r8
 800848a:	9805      	ldr	r0, [sp, #20]
 800848c:	f001 f8b8 	bl	8009600 <_Bfree>
 8008490:	4621      	mov	r1, r4
 8008492:	9805      	ldr	r0, [sp, #20]
 8008494:	f001 f8b4 	bl	8009600 <_Bfree>
 8008498:	e618      	b.n	80080cc <_strtod_l+0x63c>
 800849a:	f1ba 0f01 	cmp.w	sl, #1
 800849e:	d103      	bne.n	80084a8 <_strtod_l+0xa18>
 80084a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f43f ada5 	beq.w	8007ff2 <_strtod_l+0x562>
 80084a8:	2200      	movs	r2, #0
 80084aa:	4b36      	ldr	r3, [pc, #216]	@ (8008584 <_strtod_l+0xaf4>)
 80084ac:	2600      	movs	r6, #0
 80084ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084b2:	4f30      	ldr	r7, [pc, #192]	@ (8008574 <_strtod_l+0xae4>)
 80084b4:	e7b3      	b.n	800841e <_strtod_l+0x98e>
 80084b6:	2600      	movs	r6, #0
 80084b8:	4f2f      	ldr	r7, [pc, #188]	@ (8008578 <_strtod_l+0xae8>)
 80084ba:	e7ac      	b.n	8008416 <_strtod_l+0x986>
 80084bc:	4630      	mov	r0, r6
 80084be:	4639      	mov	r1, r7
 80084c0:	4b2d      	ldr	r3, [pc, #180]	@ (8008578 <_strtod_l+0xae8>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	f7f8 f80a 	bl	80004dc <__aeabi_dmul>
 80084c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084ca:	4606      	mov	r6, r0
 80084cc:	460f      	mov	r7, r1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0a1      	beq.n	8008416 <_strtod_l+0x986>
 80084d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80084d6:	e7a2      	b.n	800841e <_strtod_l+0x98e>
 80084d8:	2200      	movs	r2, #0
 80084da:	4b26      	ldr	r3, [pc, #152]	@ (8008574 <_strtod_l+0xae4>)
 80084dc:	4616      	mov	r6, r2
 80084de:	461f      	mov	r7, r3
 80084e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084e4:	e79b      	b.n	800841e <_strtod_l+0x98e>
 80084e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80084ea:	9b08      	ldr	r3, [sp, #32]
 80084ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1c1      	bne.n	8008478 <_strtod_l+0x9e8>
 80084f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084f8:	0d1b      	lsrs	r3, r3, #20
 80084fa:	051b      	lsls	r3, r3, #20
 80084fc:	429d      	cmp	r5, r3
 80084fe:	d1bb      	bne.n	8008478 <_strtod_l+0x9e8>
 8008500:	4630      	mov	r0, r6
 8008502:	4639      	mov	r1, r7
 8008504:	f7f8 fe92 	bl	800122c <__aeabi_d2lz>
 8008508:	f7f7 ffba 	bl	8000480 <__aeabi_l2d>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4630      	mov	r0, r6
 8008512:	4639      	mov	r1, r7
 8008514:	f7f7 fe2a 	bl	800016c <__aeabi_dsub>
 8008518:	460b      	mov	r3, r1
 800851a:	4602      	mov	r2, r0
 800851c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008520:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008526:	ea46 060a 	orr.w	r6, r6, sl
 800852a:	431e      	orrs	r6, r3
 800852c:	d069      	beq.n	8008602 <_strtod_l+0xb72>
 800852e:	a30a      	add	r3, pc, #40	@ (adr r3, 8008558 <_strtod_l+0xac8>)
 8008530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008534:	f7f8 fa44 	bl	80009c0 <__aeabi_dcmplt>
 8008538:	2800      	cmp	r0, #0
 800853a:	f47f accf 	bne.w	8007edc <_strtod_l+0x44c>
 800853e:	a308      	add	r3, pc, #32	@ (adr r3, 8008560 <_strtod_l+0xad0>)
 8008540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008544:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008548:	f7f8 fa58 	bl	80009fc <__aeabi_dcmpgt>
 800854c:	2800      	cmp	r0, #0
 800854e:	d093      	beq.n	8008478 <_strtod_l+0x9e8>
 8008550:	e4c4      	b.n	8007edc <_strtod_l+0x44c>
 8008552:	bf00      	nop
 8008554:	f3af 8000 	nop.w
 8008558:	94a03595 	.word	0x94a03595
 800855c:	3fdfffff 	.word	0x3fdfffff
 8008560:	35afe535 	.word	0x35afe535
 8008564:	3fe00000 	.word	0x3fe00000
 8008568:	000fffff 	.word	0x000fffff
 800856c:	7ff00000 	.word	0x7ff00000
 8008570:	7fefffff 	.word	0x7fefffff
 8008574:	3ff00000 	.word	0x3ff00000
 8008578:	3fe00000 	.word	0x3fe00000
 800857c:	7fe00000 	.word	0x7fe00000
 8008580:	7c9fffff 	.word	0x7c9fffff
 8008584:	bff00000 	.word	0xbff00000
 8008588:	9b08      	ldr	r3, [sp, #32]
 800858a:	b323      	cbz	r3, 80085d6 <_strtod_l+0xb46>
 800858c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008590:	d821      	bhi.n	80085d6 <_strtod_l+0xb46>
 8008592:	a327      	add	r3, pc, #156	@ (adr r3, 8008630 <_strtod_l+0xba0>)
 8008594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	f7f8 fa1a 	bl	80009d4 <__aeabi_dcmple>
 80085a0:	b1a0      	cbz	r0, 80085cc <_strtod_l+0xb3c>
 80085a2:	4639      	mov	r1, r7
 80085a4:	4630      	mov	r0, r6
 80085a6:	f7f8 fa71 	bl	8000a8c <__aeabi_d2uiz>
 80085aa:	2801      	cmp	r0, #1
 80085ac:	bf38      	it	cc
 80085ae:	2001      	movcc	r0, #1
 80085b0:	f7f7 ff1a 	bl	80003e8 <__aeabi_ui2d>
 80085b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085b6:	4606      	mov	r6, r0
 80085b8:	460f      	mov	r7, r1
 80085ba:	b9fb      	cbnz	r3, 80085fc <_strtod_l+0xb6c>
 80085bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085c0:	9014      	str	r0, [sp, #80]	@ 0x50
 80085c2:	9315      	str	r3, [sp, #84]	@ 0x54
 80085c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80085c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80085cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80085ce:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80085d2:	1b5b      	subs	r3, r3, r5
 80085d4:	9311      	str	r3, [sp, #68]	@ 0x44
 80085d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085da:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80085de:	f001 fb41 	bl	8009c64 <__ulp>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4650      	mov	r0, sl
 80085e8:	4659      	mov	r1, fp
 80085ea:	f7f7 ff77 	bl	80004dc <__aeabi_dmul>
 80085ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80085f2:	f7f7 fdbd 	bl	8000170 <__adddf3>
 80085f6:	4682      	mov	sl, r0
 80085f8:	468b      	mov	fp, r1
 80085fa:	e776      	b.n	80084ea <_strtod_l+0xa5a>
 80085fc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008600:	e7e0      	b.n	80085c4 <_strtod_l+0xb34>
 8008602:	a30d      	add	r3, pc, #52	@ (adr r3, 8008638 <_strtod_l+0xba8>)
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	f7f8 f9da 	bl	80009c0 <__aeabi_dcmplt>
 800860c:	e79e      	b.n	800854c <_strtod_l+0xabc>
 800860e:	2300      	movs	r3, #0
 8008610:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008612:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008614:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	f7ff ba77 	b.w	8007b0a <_strtod_l+0x7a>
 800861c:	2a65      	cmp	r2, #101	@ 0x65
 800861e:	f43f ab6e 	beq.w	8007cfe <_strtod_l+0x26e>
 8008622:	2a45      	cmp	r2, #69	@ 0x45
 8008624:	f43f ab6b 	beq.w	8007cfe <_strtod_l+0x26e>
 8008628:	2301      	movs	r3, #1
 800862a:	f7ff bba6 	b.w	8007d7a <_strtod_l+0x2ea>
 800862e:	bf00      	nop
 8008630:	ffc00000 	.word	0xffc00000
 8008634:	41dfffff 	.word	0x41dfffff
 8008638:	94a03595 	.word	0x94a03595
 800863c:	3fcfffff 	.word	0x3fcfffff

08008640 <strtof>:
 8008640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008644:	4d24      	ldr	r5, [pc, #144]	@ (80086d8 <strtof+0x98>)
 8008646:	460a      	mov	r2, r1
 8008648:	4b24      	ldr	r3, [pc, #144]	@ (80086dc <strtof+0x9c>)
 800864a:	4601      	mov	r1, r0
 800864c:	6828      	ldr	r0, [r5, #0]
 800864e:	f7ff fa1f 	bl	8007a90 <_strtod_l>
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	4606      	mov	r6, r0
 8008658:	460f      	mov	r7, r1
 800865a:	f7f8 f9d9 	bl	8000a10 <__aeabi_dcmpun>
 800865e:	b168      	cbz	r0, 800867c <strtof+0x3c>
 8008660:	2f00      	cmp	r7, #0
 8008662:	481f      	ldr	r0, [pc, #124]	@ (80086e0 <strtof+0xa0>)
 8008664:	da06      	bge.n	8008674 <strtof+0x34>
 8008666:	f000 fb1f 	bl	8008ca8 <nanf>
 800866a:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800866e:	4620      	mov	r0, r4
 8008670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008674:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008678:	f000 bb16 	b.w	8008ca8 <nanf>
 800867c:	4639      	mov	r1, r7
 800867e:	4630      	mov	r0, r6
 8008680:	f7f8 fa24 	bl	8000acc <__aeabi_d2f>
 8008684:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8008688:	4604      	mov	r4, r0
 800868a:	4916      	ldr	r1, [pc, #88]	@ (80086e4 <strtof+0xa4>)
 800868c:	4640      	mov	r0, r8
 800868e:	f7f8 fd41 	bl	8001114 <__aeabi_fcmpun>
 8008692:	b9b0      	cbnz	r0, 80086c2 <strtof+0x82>
 8008694:	4640      	mov	r0, r8
 8008696:	4913      	ldr	r1, [pc, #76]	@ (80086e4 <strtof+0xa4>)
 8008698:	f7f8 fd1e 	bl	80010d8 <__aeabi_fcmple>
 800869c:	b988      	cbnz	r0, 80086c2 <strtof+0x82>
 800869e:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 80086a2:	f04f 32ff 	mov.w	r2, #4294967295
 80086a6:	4630      	mov	r0, r6
 80086a8:	4649      	mov	r1, r9
 80086aa:	4b0f      	ldr	r3, [pc, #60]	@ (80086e8 <strtof+0xa8>)
 80086ac:	f7f8 f9b0 	bl	8000a10 <__aeabi_dcmpun>
 80086b0:	b970      	cbnz	r0, 80086d0 <strtof+0x90>
 80086b2:	f04f 32ff 	mov.w	r2, #4294967295
 80086b6:	4630      	mov	r0, r6
 80086b8:	4649      	mov	r1, r9
 80086ba:	4b0b      	ldr	r3, [pc, #44]	@ (80086e8 <strtof+0xa8>)
 80086bc:	f7f8 f98a 	bl	80009d4 <__aeabi_dcmple>
 80086c0:	b930      	cbnz	r0, 80086d0 <strtof+0x90>
 80086c2:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80086c6:	d1d2      	bne.n	800866e <strtof+0x2e>
 80086c8:	4b08      	ldr	r3, [pc, #32]	@ (80086ec <strtof+0xac>)
 80086ca:	403b      	ands	r3, r7
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0ce      	beq.n	800866e <strtof+0x2e>
 80086d0:	2222      	movs	r2, #34	@ 0x22
 80086d2:	682b      	ldr	r3, [r5, #0]
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	e7ca      	b.n	800866e <strtof+0x2e>
 80086d8:	200001c0 	.word	0x200001c0
 80086dc:	20000054 	.word	0x20000054
 80086e0:	0800c4e5 	.word	0x0800c4e5
 80086e4:	7f7fffff 	.word	0x7f7fffff
 80086e8:	7fefffff 	.word	0x7fefffff
 80086ec:	7ff00000 	.word	0x7ff00000

080086f0 <_strtol_l.constprop.0>:
 80086f0:	2b24      	cmp	r3, #36	@ 0x24
 80086f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f6:	4686      	mov	lr, r0
 80086f8:	4690      	mov	r8, r2
 80086fa:	d801      	bhi.n	8008700 <_strtol_l.constprop.0+0x10>
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d106      	bne.n	800870e <_strtol_l.constprop.0+0x1e>
 8008700:	f000 fa90 	bl	8008c24 <__errno>
 8008704:	2316      	movs	r3, #22
 8008706:	6003      	str	r3, [r0, #0]
 8008708:	2000      	movs	r0, #0
 800870a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870e:	460d      	mov	r5, r1
 8008710:	4833      	ldr	r0, [pc, #204]	@ (80087e0 <_strtol_l.constprop.0+0xf0>)
 8008712:	462a      	mov	r2, r5
 8008714:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008718:	5d06      	ldrb	r6, [r0, r4]
 800871a:	f016 0608 	ands.w	r6, r6, #8
 800871e:	d1f8      	bne.n	8008712 <_strtol_l.constprop.0+0x22>
 8008720:	2c2d      	cmp	r4, #45	@ 0x2d
 8008722:	d12d      	bne.n	8008780 <_strtol_l.constprop.0+0x90>
 8008724:	2601      	movs	r6, #1
 8008726:	782c      	ldrb	r4, [r5, #0]
 8008728:	1c95      	adds	r5, r2, #2
 800872a:	f033 0210 	bics.w	r2, r3, #16
 800872e:	d109      	bne.n	8008744 <_strtol_l.constprop.0+0x54>
 8008730:	2c30      	cmp	r4, #48	@ 0x30
 8008732:	d12a      	bne.n	800878a <_strtol_l.constprop.0+0x9a>
 8008734:	782a      	ldrb	r2, [r5, #0]
 8008736:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800873a:	2a58      	cmp	r2, #88	@ 0x58
 800873c:	d125      	bne.n	800878a <_strtol_l.constprop.0+0x9a>
 800873e:	2310      	movs	r3, #16
 8008740:	786c      	ldrb	r4, [r5, #1]
 8008742:	3502      	adds	r5, #2
 8008744:	2200      	movs	r2, #0
 8008746:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800874a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800874e:	fbbc f9f3 	udiv	r9, ip, r3
 8008752:	4610      	mov	r0, r2
 8008754:	fb03 ca19 	mls	sl, r3, r9, ip
 8008758:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800875c:	2f09      	cmp	r7, #9
 800875e:	d81b      	bhi.n	8008798 <_strtol_l.constprop.0+0xa8>
 8008760:	463c      	mov	r4, r7
 8008762:	42a3      	cmp	r3, r4
 8008764:	dd27      	ble.n	80087b6 <_strtol_l.constprop.0+0xc6>
 8008766:	1c57      	adds	r7, r2, #1
 8008768:	d007      	beq.n	800877a <_strtol_l.constprop.0+0x8a>
 800876a:	4581      	cmp	r9, r0
 800876c:	d320      	bcc.n	80087b0 <_strtol_l.constprop.0+0xc0>
 800876e:	d101      	bne.n	8008774 <_strtol_l.constprop.0+0x84>
 8008770:	45a2      	cmp	sl, r4
 8008772:	db1d      	blt.n	80087b0 <_strtol_l.constprop.0+0xc0>
 8008774:	2201      	movs	r2, #1
 8008776:	fb00 4003 	mla	r0, r0, r3, r4
 800877a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800877e:	e7eb      	b.n	8008758 <_strtol_l.constprop.0+0x68>
 8008780:	2c2b      	cmp	r4, #43	@ 0x2b
 8008782:	bf04      	itt	eq
 8008784:	782c      	ldrbeq	r4, [r5, #0]
 8008786:	1c95      	addeq	r5, r2, #2
 8008788:	e7cf      	b.n	800872a <_strtol_l.constprop.0+0x3a>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1da      	bne.n	8008744 <_strtol_l.constprop.0+0x54>
 800878e:	2c30      	cmp	r4, #48	@ 0x30
 8008790:	bf0c      	ite	eq
 8008792:	2308      	moveq	r3, #8
 8008794:	230a      	movne	r3, #10
 8008796:	e7d5      	b.n	8008744 <_strtol_l.constprop.0+0x54>
 8008798:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800879c:	2f19      	cmp	r7, #25
 800879e:	d801      	bhi.n	80087a4 <_strtol_l.constprop.0+0xb4>
 80087a0:	3c37      	subs	r4, #55	@ 0x37
 80087a2:	e7de      	b.n	8008762 <_strtol_l.constprop.0+0x72>
 80087a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80087a8:	2f19      	cmp	r7, #25
 80087aa:	d804      	bhi.n	80087b6 <_strtol_l.constprop.0+0xc6>
 80087ac:	3c57      	subs	r4, #87	@ 0x57
 80087ae:	e7d8      	b.n	8008762 <_strtol_l.constprop.0+0x72>
 80087b0:	f04f 32ff 	mov.w	r2, #4294967295
 80087b4:	e7e1      	b.n	800877a <_strtol_l.constprop.0+0x8a>
 80087b6:	1c53      	adds	r3, r2, #1
 80087b8:	d108      	bne.n	80087cc <_strtol_l.constprop.0+0xdc>
 80087ba:	2322      	movs	r3, #34	@ 0x22
 80087bc:	4660      	mov	r0, ip
 80087be:	f8ce 3000 	str.w	r3, [lr]
 80087c2:	f1b8 0f00 	cmp.w	r8, #0
 80087c6:	d0a0      	beq.n	800870a <_strtol_l.constprop.0+0x1a>
 80087c8:	1e69      	subs	r1, r5, #1
 80087ca:	e006      	b.n	80087da <_strtol_l.constprop.0+0xea>
 80087cc:	b106      	cbz	r6, 80087d0 <_strtol_l.constprop.0+0xe0>
 80087ce:	4240      	negs	r0, r0
 80087d0:	f1b8 0f00 	cmp.w	r8, #0
 80087d4:	d099      	beq.n	800870a <_strtol_l.constprop.0+0x1a>
 80087d6:	2a00      	cmp	r2, #0
 80087d8:	d1f6      	bne.n	80087c8 <_strtol_l.constprop.0+0xd8>
 80087da:	f8c8 1000 	str.w	r1, [r8]
 80087de:	e794      	b.n	800870a <_strtol_l.constprop.0+0x1a>
 80087e0:	0800c331 	.word	0x0800c331

080087e4 <strtol>:
 80087e4:	4613      	mov	r3, r2
 80087e6:	460a      	mov	r2, r1
 80087e8:	4601      	mov	r1, r0
 80087ea:	4802      	ldr	r0, [pc, #8]	@ (80087f4 <strtol+0x10>)
 80087ec:	6800      	ldr	r0, [r0, #0]
 80087ee:	f7ff bf7f 	b.w	80086f0 <_strtol_l.constprop.0>
 80087f2:	bf00      	nop
 80087f4:	200001c0 	.word	0x200001c0

080087f8 <std>:
 80087f8:	2300      	movs	r3, #0
 80087fa:	b510      	push	{r4, lr}
 80087fc:	4604      	mov	r4, r0
 80087fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008806:	6083      	str	r3, [r0, #8]
 8008808:	8181      	strh	r1, [r0, #12]
 800880a:	6643      	str	r3, [r0, #100]	@ 0x64
 800880c:	81c2      	strh	r2, [r0, #14]
 800880e:	6183      	str	r3, [r0, #24]
 8008810:	4619      	mov	r1, r3
 8008812:	2208      	movs	r2, #8
 8008814:	305c      	adds	r0, #92	@ 0x5c
 8008816:	f000 f948 	bl	8008aaa <memset>
 800881a:	4b0d      	ldr	r3, [pc, #52]	@ (8008850 <std+0x58>)
 800881c:	6224      	str	r4, [r4, #32]
 800881e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008820:	4b0c      	ldr	r3, [pc, #48]	@ (8008854 <std+0x5c>)
 8008822:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008824:	4b0c      	ldr	r3, [pc, #48]	@ (8008858 <std+0x60>)
 8008826:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008828:	4b0c      	ldr	r3, [pc, #48]	@ (800885c <std+0x64>)
 800882a:	6323      	str	r3, [r4, #48]	@ 0x30
 800882c:	4b0c      	ldr	r3, [pc, #48]	@ (8008860 <std+0x68>)
 800882e:	429c      	cmp	r4, r3
 8008830:	d006      	beq.n	8008840 <std+0x48>
 8008832:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008836:	4294      	cmp	r4, r2
 8008838:	d002      	beq.n	8008840 <std+0x48>
 800883a:	33d0      	adds	r3, #208	@ 0xd0
 800883c:	429c      	cmp	r4, r3
 800883e:	d105      	bne.n	800884c <std+0x54>
 8008840:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008848:	f000 ba16 	b.w	8008c78 <__retarget_lock_init_recursive>
 800884c:	bd10      	pop	{r4, pc}
 800884e:	bf00      	nop
 8008850:	08008a25 	.word	0x08008a25
 8008854:	08008a47 	.word	0x08008a47
 8008858:	08008a7f 	.word	0x08008a7f
 800885c:	08008aa3 	.word	0x08008aa3
 8008860:	20000698 	.word	0x20000698

08008864 <stdio_exit_handler>:
 8008864:	4a02      	ldr	r2, [pc, #8]	@ (8008870 <stdio_exit_handler+0xc>)
 8008866:	4903      	ldr	r1, [pc, #12]	@ (8008874 <stdio_exit_handler+0x10>)
 8008868:	4803      	ldr	r0, [pc, #12]	@ (8008878 <stdio_exit_handler+0x14>)
 800886a:	f000 b869 	b.w	8008940 <_fwalk_sglue>
 800886e:	bf00      	nop
 8008870:	20000048 	.word	0x20000048
 8008874:	0800a5b9 	.word	0x0800a5b9
 8008878:	200001c4 	.word	0x200001c4

0800887c <cleanup_stdio>:
 800887c:	6841      	ldr	r1, [r0, #4]
 800887e:	4b0c      	ldr	r3, [pc, #48]	@ (80088b0 <cleanup_stdio+0x34>)
 8008880:	b510      	push	{r4, lr}
 8008882:	4299      	cmp	r1, r3
 8008884:	4604      	mov	r4, r0
 8008886:	d001      	beq.n	800888c <cleanup_stdio+0x10>
 8008888:	f001 fe96 	bl	800a5b8 <_fflush_r>
 800888c:	68a1      	ldr	r1, [r4, #8]
 800888e:	4b09      	ldr	r3, [pc, #36]	@ (80088b4 <cleanup_stdio+0x38>)
 8008890:	4299      	cmp	r1, r3
 8008892:	d002      	beq.n	800889a <cleanup_stdio+0x1e>
 8008894:	4620      	mov	r0, r4
 8008896:	f001 fe8f 	bl	800a5b8 <_fflush_r>
 800889a:	68e1      	ldr	r1, [r4, #12]
 800889c:	4b06      	ldr	r3, [pc, #24]	@ (80088b8 <cleanup_stdio+0x3c>)
 800889e:	4299      	cmp	r1, r3
 80088a0:	d004      	beq.n	80088ac <cleanup_stdio+0x30>
 80088a2:	4620      	mov	r0, r4
 80088a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a8:	f001 be86 	b.w	800a5b8 <_fflush_r>
 80088ac:	bd10      	pop	{r4, pc}
 80088ae:	bf00      	nop
 80088b0:	20000698 	.word	0x20000698
 80088b4:	20000700 	.word	0x20000700
 80088b8:	20000768 	.word	0x20000768

080088bc <global_stdio_init.part.0>:
 80088bc:	b510      	push	{r4, lr}
 80088be:	4b0b      	ldr	r3, [pc, #44]	@ (80088ec <global_stdio_init.part.0+0x30>)
 80088c0:	4c0b      	ldr	r4, [pc, #44]	@ (80088f0 <global_stdio_init.part.0+0x34>)
 80088c2:	4a0c      	ldr	r2, [pc, #48]	@ (80088f4 <global_stdio_init.part.0+0x38>)
 80088c4:	4620      	mov	r0, r4
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	2104      	movs	r1, #4
 80088ca:	2200      	movs	r2, #0
 80088cc:	f7ff ff94 	bl	80087f8 <std>
 80088d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80088d4:	2201      	movs	r2, #1
 80088d6:	2109      	movs	r1, #9
 80088d8:	f7ff ff8e 	bl	80087f8 <std>
 80088dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80088e0:	2202      	movs	r2, #2
 80088e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088e6:	2112      	movs	r1, #18
 80088e8:	f7ff bf86 	b.w	80087f8 <std>
 80088ec:	200007d0 	.word	0x200007d0
 80088f0:	20000698 	.word	0x20000698
 80088f4:	08008865 	.word	0x08008865

080088f8 <__sfp_lock_acquire>:
 80088f8:	4801      	ldr	r0, [pc, #4]	@ (8008900 <__sfp_lock_acquire+0x8>)
 80088fa:	f000 b9be 	b.w	8008c7a <__retarget_lock_acquire_recursive>
 80088fe:	bf00      	nop
 8008900:	200007d9 	.word	0x200007d9

08008904 <__sfp_lock_release>:
 8008904:	4801      	ldr	r0, [pc, #4]	@ (800890c <__sfp_lock_release+0x8>)
 8008906:	f000 b9b9 	b.w	8008c7c <__retarget_lock_release_recursive>
 800890a:	bf00      	nop
 800890c:	200007d9 	.word	0x200007d9

08008910 <__sinit>:
 8008910:	b510      	push	{r4, lr}
 8008912:	4604      	mov	r4, r0
 8008914:	f7ff fff0 	bl	80088f8 <__sfp_lock_acquire>
 8008918:	6a23      	ldr	r3, [r4, #32]
 800891a:	b11b      	cbz	r3, 8008924 <__sinit+0x14>
 800891c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008920:	f7ff bff0 	b.w	8008904 <__sfp_lock_release>
 8008924:	4b04      	ldr	r3, [pc, #16]	@ (8008938 <__sinit+0x28>)
 8008926:	6223      	str	r3, [r4, #32]
 8008928:	4b04      	ldr	r3, [pc, #16]	@ (800893c <__sinit+0x2c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1f5      	bne.n	800891c <__sinit+0xc>
 8008930:	f7ff ffc4 	bl	80088bc <global_stdio_init.part.0>
 8008934:	e7f2      	b.n	800891c <__sinit+0xc>
 8008936:	bf00      	nop
 8008938:	0800887d 	.word	0x0800887d
 800893c:	200007d0 	.word	0x200007d0

08008940 <_fwalk_sglue>:
 8008940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008944:	4607      	mov	r7, r0
 8008946:	4688      	mov	r8, r1
 8008948:	4614      	mov	r4, r2
 800894a:	2600      	movs	r6, #0
 800894c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008950:	f1b9 0901 	subs.w	r9, r9, #1
 8008954:	d505      	bpl.n	8008962 <_fwalk_sglue+0x22>
 8008956:	6824      	ldr	r4, [r4, #0]
 8008958:	2c00      	cmp	r4, #0
 800895a:	d1f7      	bne.n	800894c <_fwalk_sglue+0xc>
 800895c:	4630      	mov	r0, r6
 800895e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008962:	89ab      	ldrh	r3, [r5, #12]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d907      	bls.n	8008978 <_fwalk_sglue+0x38>
 8008968:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800896c:	3301      	adds	r3, #1
 800896e:	d003      	beq.n	8008978 <_fwalk_sglue+0x38>
 8008970:	4629      	mov	r1, r5
 8008972:	4638      	mov	r0, r7
 8008974:	47c0      	blx	r8
 8008976:	4306      	orrs	r6, r0
 8008978:	3568      	adds	r5, #104	@ 0x68
 800897a:	e7e9      	b.n	8008950 <_fwalk_sglue+0x10>

0800897c <sniprintf>:
 800897c:	b40c      	push	{r2, r3}
 800897e:	b530      	push	{r4, r5, lr}
 8008980:	4b17      	ldr	r3, [pc, #92]	@ (80089e0 <sniprintf+0x64>)
 8008982:	1e0c      	subs	r4, r1, #0
 8008984:	681d      	ldr	r5, [r3, #0]
 8008986:	b09d      	sub	sp, #116	@ 0x74
 8008988:	da08      	bge.n	800899c <sniprintf+0x20>
 800898a:	238b      	movs	r3, #139	@ 0x8b
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	602b      	str	r3, [r5, #0]
 8008992:	b01d      	add	sp, #116	@ 0x74
 8008994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008998:	b002      	add	sp, #8
 800899a:	4770      	bx	lr
 800899c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80089a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80089a4:	bf0c      	ite	eq
 80089a6:	4623      	moveq	r3, r4
 80089a8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80089ac:	9304      	str	r3, [sp, #16]
 80089ae:	9307      	str	r3, [sp, #28]
 80089b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80089b4:	9002      	str	r0, [sp, #8]
 80089b6:	9006      	str	r0, [sp, #24]
 80089b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80089bc:	4628      	mov	r0, r5
 80089be:	ab21      	add	r3, sp, #132	@ 0x84
 80089c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80089c2:	a902      	add	r1, sp, #8
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	f001 fae9 	bl	8009f9c <_svfiprintf_r>
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	bfbc      	itt	lt
 80089ce:	238b      	movlt	r3, #139	@ 0x8b
 80089d0:	602b      	strlt	r3, [r5, #0]
 80089d2:	2c00      	cmp	r4, #0
 80089d4:	d0dd      	beq.n	8008992 <sniprintf+0x16>
 80089d6:	2200      	movs	r2, #0
 80089d8:	9b02      	ldr	r3, [sp, #8]
 80089da:	701a      	strb	r2, [r3, #0]
 80089dc:	e7d9      	b.n	8008992 <sniprintf+0x16>
 80089de:	bf00      	nop
 80089e0:	200001c0 	.word	0x200001c0

080089e4 <siprintf>:
 80089e4:	b40e      	push	{r1, r2, r3}
 80089e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80089ea:	b500      	push	{lr}
 80089ec:	b09c      	sub	sp, #112	@ 0x70
 80089ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80089f0:	9002      	str	r0, [sp, #8]
 80089f2:	9006      	str	r0, [sp, #24]
 80089f4:	9107      	str	r1, [sp, #28]
 80089f6:	9104      	str	r1, [sp, #16]
 80089f8:	4808      	ldr	r0, [pc, #32]	@ (8008a1c <siprintf+0x38>)
 80089fa:	4909      	ldr	r1, [pc, #36]	@ (8008a20 <siprintf+0x3c>)
 80089fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a00:	9105      	str	r1, [sp, #20]
 8008a02:	6800      	ldr	r0, [r0, #0]
 8008a04:	a902      	add	r1, sp, #8
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	f001 fac8 	bl	8009f9c <_svfiprintf_r>
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	9b02      	ldr	r3, [sp, #8]
 8008a10:	701a      	strb	r2, [r3, #0]
 8008a12:	b01c      	add	sp, #112	@ 0x70
 8008a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a18:	b003      	add	sp, #12
 8008a1a:	4770      	bx	lr
 8008a1c:	200001c0 	.word	0x200001c0
 8008a20:	ffff0208 	.word	0xffff0208

08008a24 <__sread>:
 8008a24:	b510      	push	{r4, lr}
 8008a26:	460c      	mov	r4, r1
 8008a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2c:	f000 f8d6 	bl	8008bdc <_read_r>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	bfab      	itete	ge
 8008a34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a36:	89a3      	ldrhlt	r3, [r4, #12]
 8008a38:	181b      	addge	r3, r3, r0
 8008a3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a3e:	bfac      	ite	ge
 8008a40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a42:	81a3      	strhlt	r3, [r4, #12]
 8008a44:	bd10      	pop	{r4, pc}

08008a46 <__swrite>:
 8008a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4a:	461f      	mov	r7, r3
 8008a4c:	898b      	ldrh	r3, [r1, #12]
 8008a4e:	4605      	mov	r5, r0
 8008a50:	05db      	lsls	r3, r3, #23
 8008a52:	460c      	mov	r4, r1
 8008a54:	4616      	mov	r6, r2
 8008a56:	d505      	bpl.n	8008a64 <__swrite+0x1e>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a60:	f000 f8aa 	bl	8008bb8 <_lseek_r>
 8008a64:	89a3      	ldrh	r3, [r4, #12]
 8008a66:	4632      	mov	r2, r6
 8008a68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a6c:	81a3      	strh	r3, [r4, #12]
 8008a6e:	4628      	mov	r0, r5
 8008a70:	463b      	mov	r3, r7
 8008a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7a:	f000 b8c1 	b.w	8008c00 <_write_r>

08008a7e <__sseek>:
 8008a7e:	b510      	push	{r4, lr}
 8008a80:	460c      	mov	r4, r1
 8008a82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a86:	f000 f897 	bl	8008bb8 <_lseek_r>
 8008a8a:	1c43      	adds	r3, r0, #1
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	bf15      	itete	ne
 8008a90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008a92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008a96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008a9a:	81a3      	strheq	r3, [r4, #12]
 8008a9c:	bf18      	it	ne
 8008a9e:	81a3      	strhne	r3, [r4, #12]
 8008aa0:	bd10      	pop	{r4, pc}

08008aa2 <__sclose>:
 8008aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa6:	f000 b877 	b.w	8008b98 <_close_r>

08008aaa <memset>:
 8008aaa:	4603      	mov	r3, r0
 8008aac:	4402      	add	r2, r0
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d100      	bne.n	8008ab4 <memset+0xa>
 8008ab2:	4770      	bx	lr
 8008ab4:	f803 1b01 	strb.w	r1, [r3], #1
 8008ab8:	e7f9      	b.n	8008aae <memset+0x4>

08008aba <strncmp>:
 8008aba:	b510      	push	{r4, lr}
 8008abc:	b16a      	cbz	r2, 8008ada <strncmp+0x20>
 8008abe:	3901      	subs	r1, #1
 8008ac0:	1884      	adds	r4, r0, r2
 8008ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ac6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d103      	bne.n	8008ad6 <strncmp+0x1c>
 8008ace:	42a0      	cmp	r0, r4
 8008ad0:	d001      	beq.n	8008ad6 <strncmp+0x1c>
 8008ad2:	2a00      	cmp	r2, #0
 8008ad4:	d1f5      	bne.n	8008ac2 <strncmp+0x8>
 8008ad6:	1ad0      	subs	r0, r2, r3
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	4610      	mov	r0, r2
 8008adc:	e7fc      	b.n	8008ad8 <strncmp+0x1e>
	...

08008ae0 <strtok>:
 8008ae0:	4b16      	ldr	r3, [pc, #88]	@ (8008b3c <strtok+0x5c>)
 8008ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae6:	681f      	ldr	r7, [r3, #0]
 8008ae8:	4605      	mov	r5, r0
 8008aea:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008aec:	460e      	mov	r6, r1
 8008aee:	b9ec      	cbnz	r4, 8008b2c <strtok+0x4c>
 8008af0:	2050      	movs	r0, #80	@ 0x50
 8008af2:	f000 fc7d 	bl	80093f0 <malloc>
 8008af6:	4602      	mov	r2, r0
 8008af8:	6478      	str	r0, [r7, #68]	@ 0x44
 8008afa:	b920      	cbnz	r0, 8008b06 <strtok+0x26>
 8008afc:	215b      	movs	r1, #91	@ 0x5b
 8008afe:	4b10      	ldr	r3, [pc, #64]	@ (8008b40 <strtok+0x60>)
 8008b00:	4810      	ldr	r0, [pc, #64]	@ (8008b44 <strtok+0x64>)
 8008b02:	f000 f8d5 	bl	8008cb0 <__assert_func>
 8008b06:	e9c0 4400 	strd	r4, r4, [r0]
 8008b0a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008b0e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008b12:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008b16:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008b1a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008b1e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008b22:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008b26:	6184      	str	r4, [r0, #24]
 8008b28:	7704      	strb	r4, [r0, #28]
 8008b2a:	6244      	str	r4, [r0, #36]	@ 0x24
 8008b2c:	4631      	mov	r1, r6
 8008b2e:	4628      	mov	r0, r5
 8008b30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b32:	2301      	movs	r3, #1
 8008b34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b38:	f000 b806 	b.w	8008b48 <__strtok_r>
 8008b3c:	200001c0 	.word	0x200001c0
 8008b40:	0800c431 	.word	0x0800c431
 8008b44:	0800c448 	.word	0x0800c448

08008b48 <__strtok_r>:
 8008b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	b908      	cbnz	r0, 8008b52 <__strtok_r+0xa>
 8008b4e:	6814      	ldr	r4, [r2, #0]
 8008b50:	b144      	cbz	r4, 8008b64 <__strtok_r+0x1c>
 8008b52:	460f      	mov	r7, r1
 8008b54:	4620      	mov	r0, r4
 8008b56:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008b5a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008b5e:	b91e      	cbnz	r6, 8008b68 <__strtok_r+0x20>
 8008b60:	b965      	cbnz	r5, 8008b7c <__strtok_r+0x34>
 8008b62:	6015      	str	r5, [r2, #0]
 8008b64:	2000      	movs	r0, #0
 8008b66:	e005      	b.n	8008b74 <__strtok_r+0x2c>
 8008b68:	42b5      	cmp	r5, r6
 8008b6a:	d1f6      	bne.n	8008b5a <__strtok_r+0x12>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1f0      	bne.n	8008b52 <__strtok_r+0xa>
 8008b70:	6014      	str	r4, [r2, #0]
 8008b72:	7003      	strb	r3, [r0, #0]
 8008b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b76:	461c      	mov	r4, r3
 8008b78:	e00c      	b.n	8008b94 <__strtok_r+0x4c>
 8008b7a:	b915      	cbnz	r5, 8008b82 <__strtok_r+0x3a>
 8008b7c:	460e      	mov	r6, r1
 8008b7e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b82:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008b86:	42ab      	cmp	r3, r5
 8008b88:	d1f7      	bne.n	8008b7a <__strtok_r+0x32>
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d0f3      	beq.n	8008b76 <__strtok_r+0x2e>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008b94:	6014      	str	r4, [r2, #0]
 8008b96:	e7ed      	b.n	8008b74 <__strtok_r+0x2c>

08008b98 <_close_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	4d05      	ldr	r5, [pc, #20]	@ (8008bb4 <_close_r+0x1c>)
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	602b      	str	r3, [r5, #0]
 8008ba4:	f7fb f837 	bl	8003c16 <_close>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d102      	bne.n	8008bb2 <_close_r+0x1a>
 8008bac:	682b      	ldr	r3, [r5, #0]
 8008bae:	b103      	cbz	r3, 8008bb2 <_close_r+0x1a>
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	200007d4 	.word	0x200007d4

08008bb8 <_lseek_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	4d05      	ldr	r5, [pc, #20]	@ (8008bd8 <_lseek_r+0x20>)
 8008bc4:	602a      	str	r2, [r5, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f7fb f849 	bl	8003c5e <_lseek>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d102      	bne.n	8008bd6 <_lseek_r+0x1e>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	b103      	cbz	r3, 8008bd6 <_lseek_r+0x1e>
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	200007d4 	.word	0x200007d4

08008bdc <_read_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4604      	mov	r4, r0
 8008be0:	4608      	mov	r0, r1
 8008be2:	4611      	mov	r1, r2
 8008be4:	2200      	movs	r2, #0
 8008be6:	4d05      	ldr	r5, [pc, #20]	@ (8008bfc <_read_r+0x20>)
 8008be8:	602a      	str	r2, [r5, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	f7fa ffda 	bl	8003ba4 <_read>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d102      	bne.n	8008bfa <_read_r+0x1e>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	b103      	cbz	r3, 8008bfa <_read_r+0x1e>
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	200007d4 	.word	0x200007d4

08008c00 <_write_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4604      	mov	r4, r0
 8008c04:	4608      	mov	r0, r1
 8008c06:	4611      	mov	r1, r2
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4d05      	ldr	r5, [pc, #20]	@ (8008c20 <_write_r+0x20>)
 8008c0c:	602a      	str	r2, [r5, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f7fa ffe5 	bl	8003bde <_write>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_write_r+0x1e>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_write_r+0x1e>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	200007d4 	.word	0x200007d4

08008c24 <__errno>:
 8008c24:	4b01      	ldr	r3, [pc, #4]	@ (8008c2c <__errno+0x8>)
 8008c26:	6818      	ldr	r0, [r3, #0]
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	200001c0 	.word	0x200001c0

08008c30 <__libc_init_array>:
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	2600      	movs	r6, #0
 8008c34:	4d0c      	ldr	r5, [pc, #48]	@ (8008c68 <__libc_init_array+0x38>)
 8008c36:	4c0d      	ldr	r4, [pc, #52]	@ (8008c6c <__libc_init_array+0x3c>)
 8008c38:	1b64      	subs	r4, r4, r5
 8008c3a:	10a4      	asrs	r4, r4, #2
 8008c3c:	42a6      	cmp	r6, r4
 8008c3e:	d109      	bne.n	8008c54 <__libc_init_array+0x24>
 8008c40:	f003 f9b0 	bl	800bfa4 <_init>
 8008c44:	2600      	movs	r6, #0
 8008c46:	4d0a      	ldr	r5, [pc, #40]	@ (8008c70 <__libc_init_array+0x40>)
 8008c48:	4c0a      	ldr	r4, [pc, #40]	@ (8008c74 <__libc_init_array+0x44>)
 8008c4a:	1b64      	subs	r4, r4, r5
 8008c4c:	10a4      	asrs	r4, r4, #2
 8008c4e:	42a6      	cmp	r6, r4
 8008c50:	d105      	bne.n	8008c5e <__libc_init_array+0x2e>
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c58:	4798      	blx	r3
 8008c5a:	3601      	adds	r6, #1
 8008c5c:	e7ee      	b.n	8008c3c <__libc_init_array+0xc>
 8008c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c62:	4798      	blx	r3
 8008c64:	3601      	adds	r6, #1
 8008c66:	e7f2      	b.n	8008c4e <__libc_init_array+0x1e>
 8008c68:	0800c790 	.word	0x0800c790
 8008c6c:	0800c790 	.word	0x0800c790
 8008c70:	0800c790 	.word	0x0800c790
 8008c74:	0800c794 	.word	0x0800c794

08008c78 <__retarget_lock_init_recursive>:
 8008c78:	4770      	bx	lr

08008c7a <__retarget_lock_acquire_recursive>:
 8008c7a:	4770      	bx	lr

08008c7c <__retarget_lock_release_recursive>:
 8008c7c:	4770      	bx	lr

08008c7e <memcpy>:
 8008c7e:	440a      	add	r2, r1
 8008c80:	4291      	cmp	r1, r2
 8008c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c86:	d100      	bne.n	8008c8a <memcpy+0xc>
 8008c88:	4770      	bx	lr
 8008c8a:	b510      	push	{r4, lr}
 8008c8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c90:	4291      	cmp	r1, r2
 8008c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c96:	d1f9      	bne.n	8008c8c <memcpy+0xe>
 8008c98:	bd10      	pop	{r4, pc}
	...

08008c9c <nan>:
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	4901      	ldr	r1, [pc, #4]	@ (8008ca4 <nan+0x8>)
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	7ff80000 	.word	0x7ff80000

08008ca8 <nanf>:
 8008ca8:	4800      	ldr	r0, [pc, #0]	@ (8008cac <nanf+0x4>)
 8008caa:	4770      	bx	lr
 8008cac:	7fc00000 	.word	0x7fc00000

08008cb0 <__assert_func>:
 8008cb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008cb2:	4614      	mov	r4, r2
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	4b09      	ldr	r3, [pc, #36]	@ (8008cdc <__assert_func+0x2c>)
 8008cb8:	4605      	mov	r5, r0
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68d8      	ldr	r0, [r3, #12]
 8008cbe:	b954      	cbnz	r4, 8008cd6 <__assert_func+0x26>
 8008cc0:	4b07      	ldr	r3, [pc, #28]	@ (8008ce0 <__assert_func+0x30>)
 8008cc2:	461c      	mov	r4, r3
 8008cc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cc8:	9100      	str	r1, [sp, #0]
 8008cca:	462b      	mov	r3, r5
 8008ccc:	4905      	ldr	r1, [pc, #20]	@ (8008ce4 <__assert_func+0x34>)
 8008cce:	f001 fc9b 	bl	800a608 <fiprintf>
 8008cd2:	f001 fce3 	bl	800a69c <abort>
 8008cd6:	4b04      	ldr	r3, [pc, #16]	@ (8008ce8 <__assert_func+0x38>)
 8008cd8:	e7f4      	b.n	8008cc4 <__assert_func+0x14>
 8008cda:	bf00      	nop
 8008cdc:	200001c0 	.word	0x200001c0
 8008ce0:	0800c4e5 	.word	0x0800c4e5
 8008ce4:	0800c4b7 	.word	0x0800c4b7
 8008ce8:	0800c4aa 	.word	0x0800c4aa

08008cec <_free_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4605      	mov	r5, r0
 8008cf0:	2900      	cmp	r1, #0
 8008cf2:	d040      	beq.n	8008d76 <_free_r+0x8a>
 8008cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf8:	1f0c      	subs	r4, r1, #4
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	bfb8      	it	lt
 8008cfe:	18e4      	addlt	r4, r4, r3
 8008d00:	f000 fc32 	bl	8009568 <__malloc_lock>
 8008d04:	4a1c      	ldr	r2, [pc, #112]	@ (8008d78 <_free_r+0x8c>)
 8008d06:	6813      	ldr	r3, [r2, #0]
 8008d08:	b933      	cbnz	r3, 8008d18 <_free_r+0x2c>
 8008d0a:	6063      	str	r3, [r4, #4]
 8008d0c:	6014      	str	r4, [r2, #0]
 8008d0e:	4628      	mov	r0, r5
 8008d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d14:	f000 bc2e 	b.w	8009574 <__malloc_unlock>
 8008d18:	42a3      	cmp	r3, r4
 8008d1a:	d908      	bls.n	8008d2e <_free_r+0x42>
 8008d1c:	6820      	ldr	r0, [r4, #0]
 8008d1e:	1821      	adds	r1, r4, r0
 8008d20:	428b      	cmp	r3, r1
 8008d22:	bf01      	itttt	eq
 8008d24:	6819      	ldreq	r1, [r3, #0]
 8008d26:	685b      	ldreq	r3, [r3, #4]
 8008d28:	1809      	addeq	r1, r1, r0
 8008d2a:	6021      	streq	r1, [r4, #0]
 8008d2c:	e7ed      	b.n	8008d0a <_free_r+0x1e>
 8008d2e:	461a      	mov	r2, r3
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	b10b      	cbz	r3, 8008d38 <_free_r+0x4c>
 8008d34:	42a3      	cmp	r3, r4
 8008d36:	d9fa      	bls.n	8008d2e <_free_r+0x42>
 8008d38:	6811      	ldr	r1, [r2, #0]
 8008d3a:	1850      	adds	r0, r2, r1
 8008d3c:	42a0      	cmp	r0, r4
 8008d3e:	d10b      	bne.n	8008d58 <_free_r+0x6c>
 8008d40:	6820      	ldr	r0, [r4, #0]
 8008d42:	4401      	add	r1, r0
 8008d44:	1850      	adds	r0, r2, r1
 8008d46:	4283      	cmp	r3, r0
 8008d48:	6011      	str	r1, [r2, #0]
 8008d4a:	d1e0      	bne.n	8008d0e <_free_r+0x22>
 8008d4c:	6818      	ldr	r0, [r3, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	4408      	add	r0, r1
 8008d52:	6010      	str	r0, [r2, #0]
 8008d54:	6053      	str	r3, [r2, #4]
 8008d56:	e7da      	b.n	8008d0e <_free_r+0x22>
 8008d58:	d902      	bls.n	8008d60 <_free_r+0x74>
 8008d5a:	230c      	movs	r3, #12
 8008d5c:	602b      	str	r3, [r5, #0]
 8008d5e:	e7d6      	b.n	8008d0e <_free_r+0x22>
 8008d60:	6820      	ldr	r0, [r4, #0]
 8008d62:	1821      	adds	r1, r4, r0
 8008d64:	428b      	cmp	r3, r1
 8008d66:	bf01      	itttt	eq
 8008d68:	6819      	ldreq	r1, [r3, #0]
 8008d6a:	685b      	ldreq	r3, [r3, #4]
 8008d6c:	1809      	addeq	r1, r1, r0
 8008d6e:	6021      	streq	r1, [r4, #0]
 8008d70:	6063      	str	r3, [r4, #4]
 8008d72:	6054      	str	r4, [r2, #4]
 8008d74:	e7cb      	b.n	8008d0e <_free_r+0x22>
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	200007e0 	.word	0x200007e0

08008d7c <rshift>:
 8008d7c:	6903      	ldr	r3, [r0, #16]
 8008d7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008d86:	f100 0414 	add.w	r4, r0, #20
 8008d8a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d8e:	dd46      	ble.n	8008e1e <rshift+0xa2>
 8008d90:	f011 011f 	ands.w	r1, r1, #31
 8008d94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d9c:	d10c      	bne.n	8008db8 <rshift+0x3c>
 8008d9e:	4629      	mov	r1, r5
 8008da0:	f100 0710 	add.w	r7, r0, #16
 8008da4:	42b1      	cmp	r1, r6
 8008da6:	d335      	bcc.n	8008e14 <rshift+0x98>
 8008da8:	1a9b      	subs	r3, r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	1eea      	subs	r2, r5, #3
 8008dae:	4296      	cmp	r6, r2
 8008db0:	bf38      	it	cc
 8008db2:	2300      	movcc	r3, #0
 8008db4:	4423      	add	r3, r4
 8008db6:	e015      	b.n	8008de4 <rshift+0x68>
 8008db8:	46a1      	mov	r9, r4
 8008dba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008dbe:	f1c1 0820 	rsb	r8, r1, #32
 8008dc2:	40cf      	lsrs	r7, r1
 8008dc4:	f105 0e04 	add.w	lr, r5, #4
 8008dc8:	4576      	cmp	r6, lr
 8008dca:	46f4      	mov	ip, lr
 8008dcc:	d816      	bhi.n	8008dfc <rshift+0x80>
 8008dce:	1a9a      	subs	r2, r3, r2
 8008dd0:	0092      	lsls	r2, r2, #2
 8008dd2:	3a04      	subs	r2, #4
 8008dd4:	3501      	adds	r5, #1
 8008dd6:	42ae      	cmp	r6, r5
 8008dd8:	bf38      	it	cc
 8008dda:	2200      	movcc	r2, #0
 8008ddc:	18a3      	adds	r3, r4, r2
 8008dde:	50a7      	str	r7, [r4, r2]
 8008de0:	b107      	cbz	r7, 8008de4 <rshift+0x68>
 8008de2:	3304      	adds	r3, #4
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	eba3 0204 	sub.w	r2, r3, r4
 8008dea:	bf08      	it	eq
 8008dec:	2300      	moveq	r3, #0
 8008dee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008df2:	6102      	str	r2, [r0, #16]
 8008df4:	bf08      	it	eq
 8008df6:	6143      	streq	r3, [r0, #20]
 8008df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dfc:	f8dc c000 	ldr.w	ip, [ip]
 8008e00:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e04:	ea4c 0707 	orr.w	r7, ip, r7
 8008e08:	f849 7b04 	str.w	r7, [r9], #4
 8008e0c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e10:	40cf      	lsrs	r7, r1
 8008e12:	e7d9      	b.n	8008dc8 <rshift+0x4c>
 8008e14:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e18:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e1c:	e7c2      	b.n	8008da4 <rshift+0x28>
 8008e1e:	4623      	mov	r3, r4
 8008e20:	e7e0      	b.n	8008de4 <rshift+0x68>

08008e22 <__hexdig_fun>:
 8008e22:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e26:	2b09      	cmp	r3, #9
 8008e28:	d802      	bhi.n	8008e30 <__hexdig_fun+0xe>
 8008e2a:	3820      	subs	r0, #32
 8008e2c:	b2c0      	uxtb	r0, r0
 8008e2e:	4770      	bx	lr
 8008e30:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e34:	2b05      	cmp	r3, #5
 8008e36:	d801      	bhi.n	8008e3c <__hexdig_fun+0x1a>
 8008e38:	3847      	subs	r0, #71	@ 0x47
 8008e3a:	e7f7      	b.n	8008e2c <__hexdig_fun+0xa>
 8008e3c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008e40:	2b05      	cmp	r3, #5
 8008e42:	d801      	bhi.n	8008e48 <__hexdig_fun+0x26>
 8008e44:	3827      	subs	r0, #39	@ 0x27
 8008e46:	e7f1      	b.n	8008e2c <__hexdig_fun+0xa>
 8008e48:	2000      	movs	r0, #0
 8008e4a:	4770      	bx	lr

08008e4c <__gethex>:
 8008e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e50:	468a      	mov	sl, r1
 8008e52:	4690      	mov	r8, r2
 8008e54:	b085      	sub	sp, #20
 8008e56:	9302      	str	r3, [sp, #8]
 8008e58:	680b      	ldr	r3, [r1, #0]
 8008e5a:	9001      	str	r0, [sp, #4]
 8008e5c:	1c9c      	adds	r4, r3, #2
 8008e5e:	46a1      	mov	r9, r4
 8008e60:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008e64:	2830      	cmp	r0, #48	@ 0x30
 8008e66:	d0fa      	beq.n	8008e5e <__gethex+0x12>
 8008e68:	eba9 0303 	sub.w	r3, r9, r3
 8008e6c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008e70:	f7ff ffd7 	bl	8008e22 <__hexdig_fun>
 8008e74:	4605      	mov	r5, r0
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d168      	bne.n	8008f4c <__gethex+0x100>
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	4648      	mov	r0, r9
 8008e7e:	499f      	ldr	r1, [pc, #636]	@ (80090fc <__gethex+0x2b0>)
 8008e80:	f7ff fe1b 	bl	8008aba <strncmp>
 8008e84:	4607      	mov	r7, r0
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d167      	bne.n	8008f5a <__gethex+0x10e>
 8008e8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008e8e:	4626      	mov	r6, r4
 8008e90:	f7ff ffc7 	bl	8008e22 <__hexdig_fun>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d062      	beq.n	8008f5e <__gethex+0x112>
 8008e98:	4623      	mov	r3, r4
 8008e9a:	7818      	ldrb	r0, [r3, #0]
 8008e9c:	4699      	mov	r9, r3
 8008e9e:	2830      	cmp	r0, #48	@ 0x30
 8008ea0:	f103 0301 	add.w	r3, r3, #1
 8008ea4:	d0f9      	beq.n	8008e9a <__gethex+0x4e>
 8008ea6:	f7ff ffbc 	bl	8008e22 <__hexdig_fun>
 8008eaa:	fab0 f580 	clz	r5, r0
 8008eae:	f04f 0b01 	mov.w	fp, #1
 8008eb2:	096d      	lsrs	r5, r5, #5
 8008eb4:	464a      	mov	r2, r9
 8008eb6:	4616      	mov	r6, r2
 8008eb8:	7830      	ldrb	r0, [r6, #0]
 8008eba:	3201      	adds	r2, #1
 8008ebc:	f7ff ffb1 	bl	8008e22 <__hexdig_fun>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d1f8      	bne.n	8008eb6 <__gethex+0x6a>
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	498c      	ldr	r1, [pc, #560]	@ (80090fc <__gethex+0x2b0>)
 8008eca:	f7ff fdf6 	bl	8008aba <strncmp>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d13f      	bne.n	8008f52 <__gethex+0x106>
 8008ed2:	b944      	cbnz	r4, 8008ee6 <__gethex+0x9a>
 8008ed4:	1c74      	adds	r4, r6, #1
 8008ed6:	4622      	mov	r2, r4
 8008ed8:	4616      	mov	r6, r2
 8008eda:	7830      	ldrb	r0, [r6, #0]
 8008edc:	3201      	adds	r2, #1
 8008ede:	f7ff ffa0 	bl	8008e22 <__hexdig_fun>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d1f8      	bne.n	8008ed8 <__gethex+0x8c>
 8008ee6:	1ba4      	subs	r4, r4, r6
 8008ee8:	00a7      	lsls	r7, r4, #2
 8008eea:	7833      	ldrb	r3, [r6, #0]
 8008eec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008ef0:	2b50      	cmp	r3, #80	@ 0x50
 8008ef2:	d13e      	bne.n	8008f72 <__gethex+0x126>
 8008ef4:	7873      	ldrb	r3, [r6, #1]
 8008ef6:	2b2b      	cmp	r3, #43	@ 0x2b
 8008ef8:	d033      	beq.n	8008f62 <__gethex+0x116>
 8008efa:	2b2d      	cmp	r3, #45	@ 0x2d
 8008efc:	d034      	beq.n	8008f68 <__gethex+0x11c>
 8008efe:	2400      	movs	r4, #0
 8008f00:	1c71      	adds	r1, r6, #1
 8008f02:	7808      	ldrb	r0, [r1, #0]
 8008f04:	f7ff ff8d 	bl	8008e22 <__hexdig_fun>
 8008f08:	1e43      	subs	r3, r0, #1
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b18      	cmp	r3, #24
 8008f0e:	d830      	bhi.n	8008f72 <__gethex+0x126>
 8008f10:	f1a0 0210 	sub.w	r2, r0, #16
 8008f14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f18:	f7ff ff83 	bl	8008e22 <__hexdig_fun>
 8008f1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008f20:	fa5f fc8c 	uxtb.w	ip, ip
 8008f24:	f1bc 0f18 	cmp.w	ip, #24
 8008f28:	f04f 030a 	mov.w	r3, #10
 8008f2c:	d91e      	bls.n	8008f6c <__gethex+0x120>
 8008f2e:	b104      	cbz	r4, 8008f32 <__gethex+0xe6>
 8008f30:	4252      	negs	r2, r2
 8008f32:	4417      	add	r7, r2
 8008f34:	f8ca 1000 	str.w	r1, [sl]
 8008f38:	b1ed      	cbz	r5, 8008f76 <__gethex+0x12a>
 8008f3a:	f1bb 0f00 	cmp.w	fp, #0
 8008f3e:	bf0c      	ite	eq
 8008f40:	2506      	moveq	r5, #6
 8008f42:	2500      	movne	r5, #0
 8008f44:	4628      	mov	r0, r5
 8008f46:	b005      	add	sp, #20
 8008f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4c:	2500      	movs	r5, #0
 8008f4e:	462c      	mov	r4, r5
 8008f50:	e7b0      	b.n	8008eb4 <__gethex+0x68>
 8008f52:	2c00      	cmp	r4, #0
 8008f54:	d1c7      	bne.n	8008ee6 <__gethex+0x9a>
 8008f56:	4627      	mov	r7, r4
 8008f58:	e7c7      	b.n	8008eea <__gethex+0x9e>
 8008f5a:	464e      	mov	r6, r9
 8008f5c:	462f      	mov	r7, r5
 8008f5e:	2501      	movs	r5, #1
 8008f60:	e7c3      	b.n	8008eea <__gethex+0x9e>
 8008f62:	2400      	movs	r4, #0
 8008f64:	1cb1      	adds	r1, r6, #2
 8008f66:	e7cc      	b.n	8008f02 <__gethex+0xb6>
 8008f68:	2401      	movs	r4, #1
 8008f6a:	e7fb      	b.n	8008f64 <__gethex+0x118>
 8008f6c:	fb03 0002 	mla	r0, r3, r2, r0
 8008f70:	e7ce      	b.n	8008f10 <__gethex+0xc4>
 8008f72:	4631      	mov	r1, r6
 8008f74:	e7de      	b.n	8008f34 <__gethex+0xe8>
 8008f76:	4629      	mov	r1, r5
 8008f78:	eba6 0309 	sub.w	r3, r6, r9
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	2b07      	cmp	r3, #7
 8008f80:	dc0a      	bgt.n	8008f98 <__gethex+0x14c>
 8008f82:	9801      	ldr	r0, [sp, #4]
 8008f84:	f000 fafc 	bl	8009580 <_Balloc>
 8008f88:	4604      	mov	r4, r0
 8008f8a:	b940      	cbnz	r0, 8008f9e <__gethex+0x152>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	21e4      	movs	r1, #228	@ 0xe4
 8008f90:	4b5b      	ldr	r3, [pc, #364]	@ (8009100 <__gethex+0x2b4>)
 8008f92:	485c      	ldr	r0, [pc, #368]	@ (8009104 <__gethex+0x2b8>)
 8008f94:	f7ff fe8c 	bl	8008cb0 <__assert_func>
 8008f98:	3101      	adds	r1, #1
 8008f9a:	105b      	asrs	r3, r3, #1
 8008f9c:	e7ef      	b.n	8008f7e <__gethex+0x132>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f100 0a14 	add.w	sl, r0, #20
 8008fa4:	4655      	mov	r5, sl
 8008fa6:	469b      	mov	fp, r3
 8008fa8:	45b1      	cmp	r9, r6
 8008faa:	d337      	bcc.n	800901c <__gethex+0x1d0>
 8008fac:	f845 bb04 	str.w	fp, [r5], #4
 8008fb0:	eba5 050a 	sub.w	r5, r5, sl
 8008fb4:	10ad      	asrs	r5, r5, #2
 8008fb6:	6125      	str	r5, [r4, #16]
 8008fb8:	4658      	mov	r0, fp
 8008fba:	f000 fbd3 	bl	8009764 <__hi0bits>
 8008fbe:	016d      	lsls	r5, r5, #5
 8008fc0:	f8d8 6000 	ldr.w	r6, [r8]
 8008fc4:	1a2d      	subs	r5, r5, r0
 8008fc6:	42b5      	cmp	r5, r6
 8008fc8:	dd54      	ble.n	8009074 <__gethex+0x228>
 8008fca:	1bad      	subs	r5, r5, r6
 8008fcc:	4629      	mov	r1, r5
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 ff5b 	bl	8009e8a <__any_on>
 8008fd4:	4681      	mov	r9, r0
 8008fd6:	b178      	cbz	r0, 8008ff8 <__gethex+0x1ac>
 8008fd8:	f04f 0901 	mov.w	r9, #1
 8008fdc:	1e6b      	subs	r3, r5, #1
 8008fde:	1159      	asrs	r1, r3, #5
 8008fe0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008fe4:	f003 021f 	and.w	r2, r3, #31
 8008fe8:	fa09 f202 	lsl.w	r2, r9, r2
 8008fec:	420a      	tst	r2, r1
 8008fee:	d003      	beq.n	8008ff8 <__gethex+0x1ac>
 8008ff0:	454b      	cmp	r3, r9
 8008ff2:	dc36      	bgt.n	8009062 <__gethex+0x216>
 8008ff4:	f04f 0902 	mov.w	r9, #2
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f7ff febe 	bl	8008d7c <rshift>
 8009000:	442f      	add	r7, r5
 8009002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009006:	42bb      	cmp	r3, r7
 8009008:	da42      	bge.n	8009090 <__gethex+0x244>
 800900a:	4621      	mov	r1, r4
 800900c:	9801      	ldr	r0, [sp, #4]
 800900e:	f000 faf7 	bl	8009600 <_Bfree>
 8009012:	2300      	movs	r3, #0
 8009014:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009016:	25a3      	movs	r5, #163	@ 0xa3
 8009018:	6013      	str	r3, [r2, #0]
 800901a:	e793      	b.n	8008f44 <__gethex+0xf8>
 800901c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009020:	2a2e      	cmp	r2, #46	@ 0x2e
 8009022:	d012      	beq.n	800904a <__gethex+0x1fe>
 8009024:	2b20      	cmp	r3, #32
 8009026:	d104      	bne.n	8009032 <__gethex+0x1e6>
 8009028:	f845 bb04 	str.w	fp, [r5], #4
 800902c:	f04f 0b00 	mov.w	fp, #0
 8009030:	465b      	mov	r3, fp
 8009032:	7830      	ldrb	r0, [r6, #0]
 8009034:	9303      	str	r3, [sp, #12]
 8009036:	f7ff fef4 	bl	8008e22 <__hexdig_fun>
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	f000 000f 	and.w	r0, r0, #15
 8009040:	4098      	lsls	r0, r3
 8009042:	ea4b 0b00 	orr.w	fp, fp, r0
 8009046:	3304      	adds	r3, #4
 8009048:	e7ae      	b.n	8008fa8 <__gethex+0x15c>
 800904a:	45b1      	cmp	r9, r6
 800904c:	d8ea      	bhi.n	8009024 <__gethex+0x1d8>
 800904e:	2201      	movs	r2, #1
 8009050:	4630      	mov	r0, r6
 8009052:	492a      	ldr	r1, [pc, #168]	@ (80090fc <__gethex+0x2b0>)
 8009054:	9303      	str	r3, [sp, #12]
 8009056:	f7ff fd30 	bl	8008aba <strncmp>
 800905a:	9b03      	ldr	r3, [sp, #12]
 800905c:	2800      	cmp	r0, #0
 800905e:	d1e1      	bne.n	8009024 <__gethex+0x1d8>
 8009060:	e7a2      	b.n	8008fa8 <__gethex+0x15c>
 8009062:	4620      	mov	r0, r4
 8009064:	1ea9      	subs	r1, r5, #2
 8009066:	f000 ff10 	bl	8009e8a <__any_on>
 800906a:	2800      	cmp	r0, #0
 800906c:	d0c2      	beq.n	8008ff4 <__gethex+0x1a8>
 800906e:	f04f 0903 	mov.w	r9, #3
 8009072:	e7c1      	b.n	8008ff8 <__gethex+0x1ac>
 8009074:	da09      	bge.n	800908a <__gethex+0x23e>
 8009076:	1b75      	subs	r5, r6, r5
 8009078:	4621      	mov	r1, r4
 800907a:	462a      	mov	r2, r5
 800907c:	9801      	ldr	r0, [sp, #4]
 800907e:	f000 fcd5 	bl	8009a2c <__lshift>
 8009082:	4604      	mov	r4, r0
 8009084:	1b7f      	subs	r7, r7, r5
 8009086:	f100 0a14 	add.w	sl, r0, #20
 800908a:	f04f 0900 	mov.w	r9, #0
 800908e:	e7b8      	b.n	8009002 <__gethex+0x1b6>
 8009090:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009094:	42bd      	cmp	r5, r7
 8009096:	dd6f      	ble.n	8009178 <__gethex+0x32c>
 8009098:	1bed      	subs	r5, r5, r7
 800909a:	42ae      	cmp	r6, r5
 800909c:	dc34      	bgt.n	8009108 <__gethex+0x2bc>
 800909e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d022      	beq.n	80090ec <__gethex+0x2a0>
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d024      	beq.n	80090f4 <__gethex+0x2a8>
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d115      	bne.n	80090da <__gethex+0x28e>
 80090ae:	42ae      	cmp	r6, r5
 80090b0:	d113      	bne.n	80090da <__gethex+0x28e>
 80090b2:	2e01      	cmp	r6, #1
 80090b4:	d10b      	bne.n	80090ce <__gethex+0x282>
 80090b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80090ba:	9a02      	ldr	r2, [sp, #8]
 80090bc:	2562      	movs	r5, #98	@ 0x62
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	2301      	movs	r3, #1
 80090c2:	6123      	str	r3, [r4, #16]
 80090c4:	f8ca 3000 	str.w	r3, [sl]
 80090c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090ca:	601c      	str	r4, [r3, #0]
 80090cc:	e73a      	b.n	8008f44 <__gethex+0xf8>
 80090ce:	4620      	mov	r0, r4
 80090d0:	1e71      	subs	r1, r6, #1
 80090d2:	f000 feda 	bl	8009e8a <__any_on>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d1ed      	bne.n	80090b6 <__gethex+0x26a>
 80090da:	4621      	mov	r1, r4
 80090dc:	9801      	ldr	r0, [sp, #4]
 80090de:	f000 fa8f 	bl	8009600 <_Bfree>
 80090e2:	2300      	movs	r3, #0
 80090e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090e6:	2550      	movs	r5, #80	@ 0x50
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	e72b      	b.n	8008f44 <__gethex+0xf8>
 80090ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1f3      	bne.n	80090da <__gethex+0x28e>
 80090f2:	e7e0      	b.n	80090b6 <__gethex+0x26a>
 80090f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1dd      	bne.n	80090b6 <__gethex+0x26a>
 80090fa:	e7ee      	b.n	80090da <__gethex+0x28e>
 80090fc:	0800c2ce 	.word	0x0800c2ce
 8009100:	0800c4e6 	.word	0x0800c4e6
 8009104:	0800c4f7 	.word	0x0800c4f7
 8009108:	1e6f      	subs	r7, r5, #1
 800910a:	f1b9 0f00 	cmp.w	r9, #0
 800910e:	d130      	bne.n	8009172 <__gethex+0x326>
 8009110:	b127      	cbz	r7, 800911c <__gethex+0x2d0>
 8009112:	4639      	mov	r1, r7
 8009114:	4620      	mov	r0, r4
 8009116:	f000 feb8 	bl	8009e8a <__any_on>
 800911a:	4681      	mov	r9, r0
 800911c:	2301      	movs	r3, #1
 800911e:	4629      	mov	r1, r5
 8009120:	1b76      	subs	r6, r6, r5
 8009122:	2502      	movs	r5, #2
 8009124:	117a      	asrs	r2, r7, #5
 8009126:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800912a:	f007 071f 	and.w	r7, r7, #31
 800912e:	40bb      	lsls	r3, r7
 8009130:	4213      	tst	r3, r2
 8009132:	4620      	mov	r0, r4
 8009134:	bf18      	it	ne
 8009136:	f049 0902 	orrne.w	r9, r9, #2
 800913a:	f7ff fe1f 	bl	8008d7c <rshift>
 800913e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009142:	f1b9 0f00 	cmp.w	r9, #0
 8009146:	d047      	beq.n	80091d8 <__gethex+0x38c>
 8009148:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800914c:	2b02      	cmp	r3, #2
 800914e:	d015      	beq.n	800917c <__gethex+0x330>
 8009150:	2b03      	cmp	r3, #3
 8009152:	d017      	beq.n	8009184 <__gethex+0x338>
 8009154:	2b01      	cmp	r3, #1
 8009156:	d109      	bne.n	800916c <__gethex+0x320>
 8009158:	f019 0f02 	tst.w	r9, #2
 800915c:	d006      	beq.n	800916c <__gethex+0x320>
 800915e:	f8da 3000 	ldr.w	r3, [sl]
 8009162:	ea49 0903 	orr.w	r9, r9, r3
 8009166:	f019 0f01 	tst.w	r9, #1
 800916a:	d10e      	bne.n	800918a <__gethex+0x33e>
 800916c:	f045 0510 	orr.w	r5, r5, #16
 8009170:	e032      	b.n	80091d8 <__gethex+0x38c>
 8009172:	f04f 0901 	mov.w	r9, #1
 8009176:	e7d1      	b.n	800911c <__gethex+0x2d0>
 8009178:	2501      	movs	r5, #1
 800917a:	e7e2      	b.n	8009142 <__gethex+0x2f6>
 800917c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800917e:	f1c3 0301 	rsb	r3, r3, #1
 8009182:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d0f0      	beq.n	800916c <__gethex+0x320>
 800918a:	f04f 0c00 	mov.w	ip, #0
 800918e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009192:	f104 0314 	add.w	r3, r4, #20
 8009196:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800919a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800919e:	4618      	mov	r0, r3
 80091a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80091a8:	d01b      	beq.n	80091e2 <__gethex+0x396>
 80091aa:	3201      	adds	r2, #1
 80091ac:	6002      	str	r2, [r0, #0]
 80091ae:	2d02      	cmp	r5, #2
 80091b0:	f104 0314 	add.w	r3, r4, #20
 80091b4:	d13c      	bne.n	8009230 <__gethex+0x3e4>
 80091b6:	f8d8 2000 	ldr.w	r2, [r8]
 80091ba:	3a01      	subs	r2, #1
 80091bc:	42b2      	cmp	r2, r6
 80091be:	d109      	bne.n	80091d4 <__gethex+0x388>
 80091c0:	2201      	movs	r2, #1
 80091c2:	1171      	asrs	r1, r6, #5
 80091c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091c8:	f006 061f 	and.w	r6, r6, #31
 80091cc:	fa02 f606 	lsl.w	r6, r2, r6
 80091d0:	421e      	tst	r6, r3
 80091d2:	d13a      	bne.n	800924a <__gethex+0x3fe>
 80091d4:	f045 0520 	orr.w	r5, r5, #32
 80091d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091da:	601c      	str	r4, [r3, #0]
 80091dc:	9b02      	ldr	r3, [sp, #8]
 80091de:	601f      	str	r7, [r3, #0]
 80091e0:	e6b0      	b.n	8008f44 <__gethex+0xf8>
 80091e2:	4299      	cmp	r1, r3
 80091e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80091e8:	d8d9      	bhi.n	800919e <__gethex+0x352>
 80091ea:	68a3      	ldr	r3, [r4, #8]
 80091ec:	459b      	cmp	fp, r3
 80091ee:	db17      	blt.n	8009220 <__gethex+0x3d4>
 80091f0:	6861      	ldr	r1, [r4, #4]
 80091f2:	9801      	ldr	r0, [sp, #4]
 80091f4:	3101      	adds	r1, #1
 80091f6:	f000 f9c3 	bl	8009580 <_Balloc>
 80091fa:	4681      	mov	r9, r0
 80091fc:	b918      	cbnz	r0, 8009206 <__gethex+0x3ba>
 80091fe:	4602      	mov	r2, r0
 8009200:	2184      	movs	r1, #132	@ 0x84
 8009202:	4b19      	ldr	r3, [pc, #100]	@ (8009268 <__gethex+0x41c>)
 8009204:	e6c5      	b.n	8008f92 <__gethex+0x146>
 8009206:	6922      	ldr	r2, [r4, #16]
 8009208:	f104 010c 	add.w	r1, r4, #12
 800920c:	3202      	adds	r2, #2
 800920e:	0092      	lsls	r2, r2, #2
 8009210:	300c      	adds	r0, #12
 8009212:	f7ff fd34 	bl	8008c7e <memcpy>
 8009216:	4621      	mov	r1, r4
 8009218:	9801      	ldr	r0, [sp, #4]
 800921a:	f000 f9f1 	bl	8009600 <_Bfree>
 800921e:	464c      	mov	r4, r9
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	6122      	str	r2, [r4, #16]
 8009226:	2201      	movs	r2, #1
 8009228:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800922c:	615a      	str	r2, [r3, #20]
 800922e:	e7be      	b.n	80091ae <__gethex+0x362>
 8009230:	6922      	ldr	r2, [r4, #16]
 8009232:	455a      	cmp	r2, fp
 8009234:	dd0b      	ble.n	800924e <__gethex+0x402>
 8009236:	2101      	movs	r1, #1
 8009238:	4620      	mov	r0, r4
 800923a:	f7ff fd9f 	bl	8008d7c <rshift>
 800923e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009242:	3701      	adds	r7, #1
 8009244:	42bb      	cmp	r3, r7
 8009246:	f6ff aee0 	blt.w	800900a <__gethex+0x1be>
 800924a:	2501      	movs	r5, #1
 800924c:	e7c2      	b.n	80091d4 <__gethex+0x388>
 800924e:	f016 061f 	ands.w	r6, r6, #31
 8009252:	d0fa      	beq.n	800924a <__gethex+0x3fe>
 8009254:	4453      	add	r3, sl
 8009256:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800925a:	f000 fa83 	bl	8009764 <__hi0bits>
 800925e:	f1c6 0620 	rsb	r6, r6, #32
 8009262:	42b0      	cmp	r0, r6
 8009264:	dbe7      	blt.n	8009236 <__gethex+0x3ea>
 8009266:	e7f0      	b.n	800924a <__gethex+0x3fe>
 8009268:	0800c4e6 	.word	0x0800c4e6

0800926c <L_shift>:
 800926c:	f1c2 0208 	rsb	r2, r2, #8
 8009270:	0092      	lsls	r2, r2, #2
 8009272:	b570      	push	{r4, r5, r6, lr}
 8009274:	f1c2 0620 	rsb	r6, r2, #32
 8009278:	6843      	ldr	r3, [r0, #4]
 800927a:	6804      	ldr	r4, [r0, #0]
 800927c:	fa03 f506 	lsl.w	r5, r3, r6
 8009280:	432c      	orrs	r4, r5
 8009282:	40d3      	lsrs	r3, r2
 8009284:	6004      	str	r4, [r0, #0]
 8009286:	f840 3f04 	str.w	r3, [r0, #4]!
 800928a:	4288      	cmp	r0, r1
 800928c:	d3f4      	bcc.n	8009278 <L_shift+0xc>
 800928e:	bd70      	pop	{r4, r5, r6, pc}

08009290 <__match>:
 8009290:	b530      	push	{r4, r5, lr}
 8009292:	6803      	ldr	r3, [r0, #0]
 8009294:	3301      	adds	r3, #1
 8009296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800929a:	b914      	cbnz	r4, 80092a2 <__match+0x12>
 800929c:	6003      	str	r3, [r0, #0]
 800929e:	2001      	movs	r0, #1
 80092a0:	bd30      	pop	{r4, r5, pc}
 80092a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80092aa:	2d19      	cmp	r5, #25
 80092ac:	bf98      	it	ls
 80092ae:	3220      	addls	r2, #32
 80092b0:	42a2      	cmp	r2, r4
 80092b2:	d0f0      	beq.n	8009296 <__match+0x6>
 80092b4:	2000      	movs	r0, #0
 80092b6:	e7f3      	b.n	80092a0 <__match+0x10>

080092b8 <__hexnan>:
 80092b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	2500      	movs	r5, #0
 80092be:	680b      	ldr	r3, [r1, #0]
 80092c0:	4682      	mov	sl, r0
 80092c2:	115e      	asrs	r6, r3, #5
 80092c4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80092c8:	f013 031f 	ands.w	r3, r3, #31
 80092cc:	bf18      	it	ne
 80092ce:	3604      	addne	r6, #4
 80092d0:	1f37      	subs	r7, r6, #4
 80092d2:	4690      	mov	r8, r2
 80092d4:	46b9      	mov	r9, r7
 80092d6:	463c      	mov	r4, r7
 80092d8:	46ab      	mov	fp, r5
 80092da:	b087      	sub	sp, #28
 80092dc:	6801      	ldr	r1, [r0, #0]
 80092de:	9301      	str	r3, [sp, #4]
 80092e0:	f846 5c04 	str.w	r5, [r6, #-4]
 80092e4:	9502      	str	r5, [sp, #8]
 80092e6:	784a      	ldrb	r2, [r1, #1]
 80092e8:	1c4b      	adds	r3, r1, #1
 80092ea:	9303      	str	r3, [sp, #12]
 80092ec:	b342      	cbz	r2, 8009340 <__hexnan+0x88>
 80092ee:	4610      	mov	r0, r2
 80092f0:	9105      	str	r1, [sp, #20]
 80092f2:	9204      	str	r2, [sp, #16]
 80092f4:	f7ff fd95 	bl	8008e22 <__hexdig_fun>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	d151      	bne.n	80093a0 <__hexnan+0xe8>
 80092fc:	9a04      	ldr	r2, [sp, #16]
 80092fe:	9905      	ldr	r1, [sp, #20]
 8009300:	2a20      	cmp	r2, #32
 8009302:	d818      	bhi.n	8009336 <__hexnan+0x7e>
 8009304:	9b02      	ldr	r3, [sp, #8]
 8009306:	459b      	cmp	fp, r3
 8009308:	dd13      	ble.n	8009332 <__hexnan+0x7a>
 800930a:	454c      	cmp	r4, r9
 800930c:	d206      	bcs.n	800931c <__hexnan+0x64>
 800930e:	2d07      	cmp	r5, #7
 8009310:	dc04      	bgt.n	800931c <__hexnan+0x64>
 8009312:	462a      	mov	r2, r5
 8009314:	4649      	mov	r1, r9
 8009316:	4620      	mov	r0, r4
 8009318:	f7ff ffa8 	bl	800926c <L_shift>
 800931c:	4544      	cmp	r4, r8
 800931e:	d952      	bls.n	80093c6 <__hexnan+0x10e>
 8009320:	2300      	movs	r3, #0
 8009322:	f1a4 0904 	sub.w	r9, r4, #4
 8009326:	f844 3c04 	str.w	r3, [r4, #-4]
 800932a:	461d      	mov	r5, r3
 800932c:	464c      	mov	r4, r9
 800932e:	f8cd b008 	str.w	fp, [sp, #8]
 8009332:	9903      	ldr	r1, [sp, #12]
 8009334:	e7d7      	b.n	80092e6 <__hexnan+0x2e>
 8009336:	2a29      	cmp	r2, #41	@ 0x29
 8009338:	d157      	bne.n	80093ea <__hexnan+0x132>
 800933a:	3102      	adds	r1, #2
 800933c:	f8ca 1000 	str.w	r1, [sl]
 8009340:	f1bb 0f00 	cmp.w	fp, #0
 8009344:	d051      	beq.n	80093ea <__hexnan+0x132>
 8009346:	454c      	cmp	r4, r9
 8009348:	d206      	bcs.n	8009358 <__hexnan+0xa0>
 800934a:	2d07      	cmp	r5, #7
 800934c:	dc04      	bgt.n	8009358 <__hexnan+0xa0>
 800934e:	462a      	mov	r2, r5
 8009350:	4649      	mov	r1, r9
 8009352:	4620      	mov	r0, r4
 8009354:	f7ff ff8a 	bl	800926c <L_shift>
 8009358:	4544      	cmp	r4, r8
 800935a:	d936      	bls.n	80093ca <__hexnan+0x112>
 800935c:	4623      	mov	r3, r4
 800935e:	f1a8 0204 	sub.w	r2, r8, #4
 8009362:	f853 1b04 	ldr.w	r1, [r3], #4
 8009366:	429f      	cmp	r7, r3
 8009368:	f842 1f04 	str.w	r1, [r2, #4]!
 800936c:	d2f9      	bcs.n	8009362 <__hexnan+0xaa>
 800936e:	1b3b      	subs	r3, r7, r4
 8009370:	f023 0303 	bic.w	r3, r3, #3
 8009374:	3304      	adds	r3, #4
 8009376:	3401      	adds	r4, #1
 8009378:	3e03      	subs	r6, #3
 800937a:	42b4      	cmp	r4, r6
 800937c:	bf88      	it	hi
 800937e:	2304      	movhi	r3, #4
 8009380:	2200      	movs	r2, #0
 8009382:	4443      	add	r3, r8
 8009384:	f843 2b04 	str.w	r2, [r3], #4
 8009388:	429f      	cmp	r7, r3
 800938a:	d2fb      	bcs.n	8009384 <__hexnan+0xcc>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	b91b      	cbnz	r3, 8009398 <__hexnan+0xe0>
 8009390:	4547      	cmp	r7, r8
 8009392:	d128      	bne.n	80093e6 <__hexnan+0x12e>
 8009394:	2301      	movs	r3, #1
 8009396:	603b      	str	r3, [r7, #0]
 8009398:	2005      	movs	r0, #5
 800939a:	b007      	add	sp, #28
 800939c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a0:	3501      	adds	r5, #1
 80093a2:	2d08      	cmp	r5, #8
 80093a4:	f10b 0b01 	add.w	fp, fp, #1
 80093a8:	dd06      	ble.n	80093b8 <__hexnan+0x100>
 80093aa:	4544      	cmp	r4, r8
 80093ac:	d9c1      	bls.n	8009332 <__hexnan+0x7a>
 80093ae:	2300      	movs	r3, #0
 80093b0:	2501      	movs	r5, #1
 80093b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80093b6:	3c04      	subs	r4, #4
 80093b8:	6822      	ldr	r2, [r4, #0]
 80093ba:	f000 000f 	and.w	r0, r0, #15
 80093be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80093c2:	6020      	str	r0, [r4, #0]
 80093c4:	e7b5      	b.n	8009332 <__hexnan+0x7a>
 80093c6:	2508      	movs	r5, #8
 80093c8:	e7b3      	b.n	8009332 <__hexnan+0x7a>
 80093ca:	9b01      	ldr	r3, [sp, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d0dd      	beq.n	800938c <__hexnan+0xd4>
 80093d0:	f04f 32ff 	mov.w	r2, #4294967295
 80093d4:	f1c3 0320 	rsb	r3, r3, #32
 80093d8:	40da      	lsrs	r2, r3
 80093da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80093de:	4013      	ands	r3, r2
 80093e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80093e4:	e7d2      	b.n	800938c <__hexnan+0xd4>
 80093e6:	3f04      	subs	r7, #4
 80093e8:	e7d0      	b.n	800938c <__hexnan+0xd4>
 80093ea:	2004      	movs	r0, #4
 80093ec:	e7d5      	b.n	800939a <__hexnan+0xe2>
	...

080093f0 <malloc>:
 80093f0:	4b02      	ldr	r3, [pc, #8]	@ (80093fc <malloc+0xc>)
 80093f2:	4601      	mov	r1, r0
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	f000 b825 	b.w	8009444 <_malloc_r>
 80093fa:	bf00      	nop
 80093fc:	200001c0 	.word	0x200001c0

08009400 <sbrk_aligned>:
 8009400:	b570      	push	{r4, r5, r6, lr}
 8009402:	4e0f      	ldr	r6, [pc, #60]	@ (8009440 <sbrk_aligned+0x40>)
 8009404:	460c      	mov	r4, r1
 8009406:	6831      	ldr	r1, [r6, #0]
 8009408:	4605      	mov	r5, r0
 800940a:	b911      	cbnz	r1, 8009412 <sbrk_aligned+0x12>
 800940c:	f001 f928 	bl	800a660 <_sbrk_r>
 8009410:	6030      	str	r0, [r6, #0]
 8009412:	4621      	mov	r1, r4
 8009414:	4628      	mov	r0, r5
 8009416:	f001 f923 	bl	800a660 <_sbrk_r>
 800941a:	1c43      	adds	r3, r0, #1
 800941c:	d103      	bne.n	8009426 <sbrk_aligned+0x26>
 800941e:	f04f 34ff 	mov.w	r4, #4294967295
 8009422:	4620      	mov	r0, r4
 8009424:	bd70      	pop	{r4, r5, r6, pc}
 8009426:	1cc4      	adds	r4, r0, #3
 8009428:	f024 0403 	bic.w	r4, r4, #3
 800942c:	42a0      	cmp	r0, r4
 800942e:	d0f8      	beq.n	8009422 <sbrk_aligned+0x22>
 8009430:	1a21      	subs	r1, r4, r0
 8009432:	4628      	mov	r0, r5
 8009434:	f001 f914 	bl	800a660 <_sbrk_r>
 8009438:	3001      	adds	r0, #1
 800943a:	d1f2      	bne.n	8009422 <sbrk_aligned+0x22>
 800943c:	e7ef      	b.n	800941e <sbrk_aligned+0x1e>
 800943e:	bf00      	nop
 8009440:	200007dc 	.word	0x200007dc

08009444 <_malloc_r>:
 8009444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009448:	1ccd      	adds	r5, r1, #3
 800944a:	f025 0503 	bic.w	r5, r5, #3
 800944e:	3508      	adds	r5, #8
 8009450:	2d0c      	cmp	r5, #12
 8009452:	bf38      	it	cc
 8009454:	250c      	movcc	r5, #12
 8009456:	2d00      	cmp	r5, #0
 8009458:	4606      	mov	r6, r0
 800945a:	db01      	blt.n	8009460 <_malloc_r+0x1c>
 800945c:	42a9      	cmp	r1, r5
 800945e:	d904      	bls.n	800946a <_malloc_r+0x26>
 8009460:	230c      	movs	r3, #12
 8009462:	6033      	str	r3, [r6, #0]
 8009464:	2000      	movs	r0, #0
 8009466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009540 <_malloc_r+0xfc>
 800946e:	f000 f87b 	bl	8009568 <__malloc_lock>
 8009472:	f8d8 3000 	ldr.w	r3, [r8]
 8009476:	461c      	mov	r4, r3
 8009478:	bb44      	cbnz	r4, 80094cc <_malloc_r+0x88>
 800947a:	4629      	mov	r1, r5
 800947c:	4630      	mov	r0, r6
 800947e:	f7ff ffbf 	bl	8009400 <sbrk_aligned>
 8009482:	1c43      	adds	r3, r0, #1
 8009484:	4604      	mov	r4, r0
 8009486:	d158      	bne.n	800953a <_malloc_r+0xf6>
 8009488:	f8d8 4000 	ldr.w	r4, [r8]
 800948c:	4627      	mov	r7, r4
 800948e:	2f00      	cmp	r7, #0
 8009490:	d143      	bne.n	800951a <_malloc_r+0xd6>
 8009492:	2c00      	cmp	r4, #0
 8009494:	d04b      	beq.n	800952e <_malloc_r+0xea>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	4639      	mov	r1, r7
 800949a:	4630      	mov	r0, r6
 800949c:	eb04 0903 	add.w	r9, r4, r3
 80094a0:	f001 f8de 	bl	800a660 <_sbrk_r>
 80094a4:	4581      	cmp	r9, r0
 80094a6:	d142      	bne.n	800952e <_malloc_r+0xea>
 80094a8:	6821      	ldr	r1, [r4, #0]
 80094aa:	4630      	mov	r0, r6
 80094ac:	1a6d      	subs	r5, r5, r1
 80094ae:	4629      	mov	r1, r5
 80094b0:	f7ff ffa6 	bl	8009400 <sbrk_aligned>
 80094b4:	3001      	adds	r0, #1
 80094b6:	d03a      	beq.n	800952e <_malloc_r+0xea>
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	442b      	add	r3, r5
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	f8d8 3000 	ldr.w	r3, [r8]
 80094c2:	685a      	ldr	r2, [r3, #4]
 80094c4:	bb62      	cbnz	r2, 8009520 <_malloc_r+0xdc>
 80094c6:	f8c8 7000 	str.w	r7, [r8]
 80094ca:	e00f      	b.n	80094ec <_malloc_r+0xa8>
 80094cc:	6822      	ldr	r2, [r4, #0]
 80094ce:	1b52      	subs	r2, r2, r5
 80094d0:	d420      	bmi.n	8009514 <_malloc_r+0xd0>
 80094d2:	2a0b      	cmp	r2, #11
 80094d4:	d917      	bls.n	8009506 <_malloc_r+0xc2>
 80094d6:	1961      	adds	r1, r4, r5
 80094d8:	42a3      	cmp	r3, r4
 80094da:	6025      	str	r5, [r4, #0]
 80094dc:	bf18      	it	ne
 80094de:	6059      	strne	r1, [r3, #4]
 80094e0:	6863      	ldr	r3, [r4, #4]
 80094e2:	bf08      	it	eq
 80094e4:	f8c8 1000 	streq.w	r1, [r8]
 80094e8:	5162      	str	r2, [r4, r5]
 80094ea:	604b      	str	r3, [r1, #4]
 80094ec:	4630      	mov	r0, r6
 80094ee:	f000 f841 	bl	8009574 <__malloc_unlock>
 80094f2:	f104 000b 	add.w	r0, r4, #11
 80094f6:	1d23      	adds	r3, r4, #4
 80094f8:	f020 0007 	bic.w	r0, r0, #7
 80094fc:	1ac2      	subs	r2, r0, r3
 80094fe:	bf1c      	itt	ne
 8009500:	1a1b      	subne	r3, r3, r0
 8009502:	50a3      	strne	r3, [r4, r2]
 8009504:	e7af      	b.n	8009466 <_malloc_r+0x22>
 8009506:	6862      	ldr	r2, [r4, #4]
 8009508:	42a3      	cmp	r3, r4
 800950a:	bf0c      	ite	eq
 800950c:	f8c8 2000 	streq.w	r2, [r8]
 8009510:	605a      	strne	r2, [r3, #4]
 8009512:	e7eb      	b.n	80094ec <_malloc_r+0xa8>
 8009514:	4623      	mov	r3, r4
 8009516:	6864      	ldr	r4, [r4, #4]
 8009518:	e7ae      	b.n	8009478 <_malloc_r+0x34>
 800951a:	463c      	mov	r4, r7
 800951c:	687f      	ldr	r7, [r7, #4]
 800951e:	e7b6      	b.n	800948e <_malloc_r+0x4a>
 8009520:	461a      	mov	r2, r3
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	42a3      	cmp	r3, r4
 8009526:	d1fb      	bne.n	8009520 <_malloc_r+0xdc>
 8009528:	2300      	movs	r3, #0
 800952a:	6053      	str	r3, [r2, #4]
 800952c:	e7de      	b.n	80094ec <_malloc_r+0xa8>
 800952e:	230c      	movs	r3, #12
 8009530:	4630      	mov	r0, r6
 8009532:	6033      	str	r3, [r6, #0]
 8009534:	f000 f81e 	bl	8009574 <__malloc_unlock>
 8009538:	e794      	b.n	8009464 <_malloc_r+0x20>
 800953a:	6005      	str	r5, [r0, #0]
 800953c:	e7d6      	b.n	80094ec <_malloc_r+0xa8>
 800953e:	bf00      	nop
 8009540:	200007e0 	.word	0x200007e0

08009544 <__ascii_mbtowc>:
 8009544:	b082      	sub	sp, #8
 8009546:	b901      	cbnz	r1, 800954a <__ascii_mbtowc+0x6>
 8009548:	a901      	add	r1, sp, #4
 800954a:	b142      	cbz	r2, 800955e <__ascii_mbtowc+0x1a>
 800954c:	b14b      	cbz	r3, 8009562 <__ascii_mbtowc+0x1e>
 800954e:	7813      	ldrb	r3, [r2, #0]
 8009550:	600b      	str	r3, [r1, #0]
 8009552:	7812      	ldrb	r2, [r2, #0]
 8009554:	1e10      	subs	r0, r2, #0
 8009556:	bf18      	it	ne
 8009558:	2001      	movne	r0, #1
 800955a:	b002      	add	sp, #8
 800955c:	4770      	bx	lr
 800955e:	4610      	mov	r0, r2
 8009560:	e7fb      	b.n	800955a <__ascii_mbtowc+0x16>
 8009562:	f06f 0001 	mvn.w	r0, #1
 8009566:	e7f8      	b.n	800955a <__ascii_mbtowc+0x16>

08009568 <__malloc_lock>:
 8009568:	4801      	ldr	r0, [pc, #4]	@ (8009570 <__malloc_lock+0x8>)
 800956a:	f7ff bb86 	b.w	8008c7a <__retarget_lock_acquire_recursive>
 800956e:	bf00      	nop
 8009570:	200007d8 	.word	0x200007d8

08009574 <__malloc_unlock>:
 8009574:	4801      	ldr	r0, [pc, #4]	@ (800957c <__malloc_unlock+0x8>)
 8009576:	f7ff bb81 	b.w	8008c7c <__retarget_lock_release_recursive>
 800957a:	bf00      	nop
 800957c:	200007d8 	.word	0x200007d8

08009580 <_Balloc>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	69c6      	ldr	r6, [r0, #28]
 8009584:	4604      	mov	r4, r0
 8009586:	460d      	mov	r5, r1
 8009588:	b976      	cbnz	r6, 80095a8 <_Balloc+0x28>
 800958a:	2010      	movs	r0, #16
 800958c:	f7ff ff30 	bl	80093f0 <malloc>
 8009590:	4602      	mov	r2, r0
 8009592:	61e0      	str	r0, [r4, #28]
 8009594:	b920      	cbnz	r0, 80095a0 <_Balloc+0x20>
 8009596:	216b      	movs	r1, #107	@ 0x6b
 8009598:	4b17      	ldr	r3, [pc, #92]	@ (80095f8 <_Balloc+0x78>)
 800959a:	4818      	ldr	r0, [pc, #96]	@ (80095fc <_Balloc+0x7c>)
 800959c:	f7ff fb88 	bl	8008cb0 <__assert_func>
 80095a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095a4:	6006      	str	r6, [r0, #0]
 80095a6:	60c6      	str	r6, [r0, #12]
 80095a8:	69e6      	ldr	r6, [r4, #28]
 80095aa:	68f3      	ldr	r3, [r6, #12]
 80095ac:	b183      	cbz	r3, 80095d0 <_Balloc+0x50>
 80095ae:	69e3      	ldr	r3, [r4, #28]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095b6:	b9b8      	cbnz	r0, 80095e8 <_Balloc+0x68>
 80095b8:	2101      	movs	r1, #1
 80095ba:	fa01 f605 	lsl.w	r6, r1, r5
 80095be:	1d72      	adds	r2, r6, #5
 80095c0:	4620      	mov	r0, r4
 80095c2:	0092      	lsls	r2, r2, #2
 80095c4:	f001 f871 	bl	800a6aa <_calloc_r>
 80095c8:	b160      	cbz	r0, 80095e4 <_Balloc+0x64>
 80095ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095ce:	e00e      	b.n	80095ee <_Balloc+0x6e>
 80095d0:	2221      	movs	r2, #33	@ 0x21
 80095d2:	2104      	movs	r1, #4
 80095d4:	4620      	mov	r0, r4
 80095d6:	f001 f868 	bl	800a6aa <_calloc_r>
 80095da:	69e3      	ldr	r3, [r4, #28]
 80095dc:	60f0      	str	r0, [r6, #12]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e4      	bne.n	80095ae <_Balloc+0x2e>
 80095e4:	2000      	movs	r0, #0
 80095e6:	bd70      	pop	{r4, r5, r6, pc}
 80095e8:	6802      	ldr	r2, [r0, #0]
 80095ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095ee:	2300      	movs	r3, #0
 80095f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095f4:	e7f7      	b.n	80095e6 <_Balloc+0x66>
 80095f6:	bf00      	nop
 80095f8:	0800c431 	.word	0x0800c431
 80095fc:	0800c557 	.word	0x0800c557

08009600 <_Bfree>:
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	69c6      	ldr	r6, [r0, #28]
 8009604:	4605      	mov	r5, r0
 8009606:	460c      	mov	r4, r1
 8009608:	b976      	cbnz	r6, 8009628 <_Bfree+0x28>
 800960a:	2010      	movs	r0, #16
 800960c:	f7ff fef0 	bl	80093f0 <malloc>
 8009610:	4602      	mov	r2, r0
 8009612:	61e8      	str	r0, [r5, #28]
 8009614:	b920      	cbnz	r0, 8009620 <_Bfree+0x20>
 8009616:	218f      	movs	r1, #143	@ 0x8f
 8009618:	4b08      	ldr	r3, [pc, #32]	@ (800963c <_Bfree+0x3c>)
 800961a:	4809      	ldr	r0, [pc, #36]	@ (8009640 <_Bfree+0x40>)
 800961c:	f7ff fb48 	bl	8008cb0 <__assert_func>
 8009620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009624:	6006      	str	r6, [r0, #0]
 8009626:	60c6      	str	r6, [r0, #12]
 8009628:	b13c      	cbz	r4, 800963a <_Bfree+0x3a>
 800962a:	69eb      	ldr	r3, [r5, #28]
 800962c:	6862      	ldr	r2, [r4, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009634:	6021      	str	r1, [r4, #0]
 8009636:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	0800c431 	.word	0x0800c431
 8009640:	0800c557 	.word	0x0800c557

08009644 <__multadd>:
 8009644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009648:	4607      	mov	r7, r0
 800964a:	460c      	mov	r4, r1
 800964c:	461e      	mov	r6, r3
 800964e:	2000      	movs	r0, #0
 8009650:	690d      	ldr	r5, [r1, #16]
 8009652:	f101 0c14 	add.w	ip, r1, #20
 8009656:	f8dc 3000 	ldr.w	r3, [ip]
 800965a:	3001      	adds	r0, #1
 800965c:	b299      	uxth	r1, r3
 800965e:	fb02 6101 	mla	r1, r2, r1, r6
 8009662:	0c1e      	lsrs	r6, r3, #16
 8009664:	0c0b      	lsrs	r3, r1, #16
 8009666:	fb02 3306 	mla	r3, r2, r6, r3
 800966a:	b289      	uxth	r1, r1
 800966c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009670:	4285      	cmp	r5, r0
 8009672:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009676:	f84c 1b04 	str.w	r1, [ip], #4
 800967a:	dcec      	bgt.n	8009656 <__multadd+0x12>
 800967c:	b30e      	cbz	r6, 80096c2 <__multadd+0x7e>
 800967e:	68a3      	ldr	r3, [r4, #8]
 8009680:	42ab      	cmp	r3, r5
 8009682:	dc19      	bgt.n	80096b8 <__multadd+0x74>
 8009684:	6861      	ldr	r1, [r4, #4]
 8009686:	4638      	mov	r0, r7
 8009688:	3101      	adds	r1, #1
 800968a:	f7ff ff79 	bl	8009580 <_Balloc>
 800968e:	4680      	mov	r8, r0
 8009690:	b928      	cbnz	r0, 800969e <__multadd+0x5a>
 8009692:	4602      	mov	r2, r0
 8009694:	21ba      	movs	r1, #186	@ 0xba
 8009696:	4b0c      	ldr	r3, [pc, #48]	@ (80096c8 <__multadd+0x84>)
 8009698:	480c      	ldr	r0, [pc, #48]	@ (80096cc <__multadd+0x88>)
 800969a:	f7ff fb09 	bl	8008cb0 <__assert_func>
 800969e:	6922      	ldr	r2, [r4, #16]
 80096a0:	f104 010c 	add.w	r1, r4, #12
 80096a4:	3202      	adds	r2, #2
 80096a6:	0092      	lsls	r2, r2, #2
 80096a8:	300c      	adds	r0, #12
 80096aa:	f7ff fae8 	bl	8008c7e <memcpy>
 80096ae:	4621      	mov	r1, r4
 80096b0:	4638      	mov	r0, r7
 80096b2:	f7ff ffa5 	bl	8009600 <_Bfree>
 80096b6:	4644      	mov	r4, r8
 80096b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096bc:	3501      	adds	r5, #1
 80096be:	615e      	str	r6, [r3, #20]
 80096c0:	6125      	str	r5, [r4, #16]
 80096c2:	4620      	mov	r0, r4
 80096c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c8:	0800c4e6 	.word	0x0800c4e6
 80096cc:	0800c557 	.word	0x0800c557

080096d0 <__s2b>:
 80096d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d4:	4615      	mov	r5, r2
 80096d6:	2209      	movs	r2, #9
 80096d8:	461f      	mov	r7, r3
 80096da:	3308      	adds	r3, #8
 80096dc:	460c      	mov	r4, r1
 80096de:	fb93 f3f2 	sdiv	r3, r3, r2
 80096e2:	4606      	mov	r6, r0
 80096e4:	2201      	movs	r2, #1
 80096e6:	2100      	movs	r1, #0
 80096e8:	429a      	cmp	r2, r3
 80096ea:	db09      	blt.n	8009700 <__s2b+0x30>
 80096ec:	4630      	mov	r0, r6
 80096ee:	f7ff ff47 	bl	8009580 <_Balloc>
 80096f2:	b940      	cbnz	r0, 8009706 <__s2b+0x36>
 80096f4:	4602      	mov	r2, r0
 80096f6:	21d3      	movs	r1, #211	@ 0xd3
 80096f8:	4b18      	ldr	r3, [pc, #96]	@ (800975c <__s2b+0x8c>)
 80096fa:	4819      	ldr	r0, [pc, #100]	@ (8009760 <__s2b+0x90>)
 80096fc:	f7ff fad8 	bl	8008cb0 <__assert_func>
 8009700:	0052      	lsls	r2, r2, #1
 8009702:	3101      	adds	r1, #1
 8009704:	e7f0      	b.n	80096e8 <__s2b+0x18>
 8009706:	9b08      	ldr	r3, [sp, #32]
 8009708:	2d09      	cmp	r5, #9
 800970a:	6143      	str	r3, [r0, #20]
 800970c:	f04f 0301 	mov.w	r3, #1
 8009710:	6103      	str	r3, [r0, #16]
 8009712:	dd16      	ble.n	8009742 <__s2b+0x72>
 8009714:	f104 0909 	add.w	r9, r4, #9
 8009718:	46c8      	mov	r8, r9
 800971a:	442c      	add	r4, r5
 800971c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009720:	4601      	mov	r1, r0
 8009722:	220a      	movs	r2, #10
 8009724:	4630      	mov	r0, r6
 8009726:	3b30      	subs	r3, #48	@ 0x30
 8009728:	f7ff ff8c 	bl	8009644 <__multadd>
 800972c:	45a0      	cmp	r8, r4
 800972e:	d1f5      	bne.n	800971c <__s2b+0x4c>
 8009730:	f1a5 0408 	sub.w	r4, r5, #8
 8009734:	444c      	add	r4, r9
 8009736:	1b2d      	subs	r5, r5, r4
 8009738:	1963      	adds	r3, r4, r5
 800973a:	42bb      	cmp	r3, r7
 800973c:	db04      	blt.n	8009748 <__s2b+0x78>
 800973e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009742:	2509      	movs	r5, #9
 8009744:	340a      	adds	r4, #10
 8009746:	e7f6      	b.n	8009736 <__s2b+0x66>
 8009748:	f814 3b01 	ldrb.w	r3, [r4], #1
 800974c:	4601      	mov	r1, r0
 800974e:	220a      	movs	r2, #10
 8009750:	4630      	mov	r0, r6
 8009752:	3b30      	subs	r3, #48	@ 0x30
 8009754:	f7ff ff76 	bl	8009644 <__multadd>
 8009758:	e7ee      	b.n	8009738 <__s2b+0x68>
 800975a:	bf00      	nop
 800975c:	0800c4e6 	.word	0x0800c4e6
 8009760:	0800c557 	.word	0x0800c557

08009764 <__hi0bits>:
 8009764:	4603      	mov	r3, r0
 8009766:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800976a:	bf3a      	itte	cc
 800976c:	0403      	lslcc	r3, r0, #16
 800976e:	2010      	movcc	r0, #16
 8009770:	2000      	movcs	r0, #0
 8009772:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009776:	bf3c      	itt	cc
 8009778:	021b      	lslcc	r3, r3, #8
 800977a:	3008      	addcc	r0, #8
 800977c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009780:	bf3c      	itt	cc
 8009782:	011b      	lslcc	r3, r3, #4
 8009784:	3004      	addcc	r0, #4
 8009786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800978a:	bf3c      	itt	cc
 800978c:	009b      	lslcc	r3, r3, #2
 800978e:	3002      	addcc	r0, #2
 8009790:	2b00      	cmp	r3, #0
 8009792:	db05      	blt.n	80097a0 <__hi0bits+0x3c>
 8009794:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009798:	f100 0001 	add.w	r0, r0, #1
 800979c:	bf08      	it	eq
 800979e:	2020      	moveq	r0, #32
 80097a0:	4770      	bx	lr

080097a2 <__lo0bits>:
 80097a2:	6803      	ldr	r3, [r0, #0]
 80097a4:	4602      	mov	r2, r0
 80097a6:	f013 0007 	ands.w	r0, r3, #7
 80097aa:	d00b      	beq.n	80097c4 <__lo0bits+0x22>
 80097ac:	07d9      	lsls	r1, r3, #31
 80097ae:	d421      	bmi.n	80097f4 <__lo0bits+0x52>
 80097b0:	0798      	lsls	r0, r3, #30
 80097b2:	bf49      	itett	mi
 80097b4:	085b      	lsrmi	r3, r3, #1
 80097b6:	089b      	lsrpl	r3, r3, #2
 80097b8:	2001      	movmi	r0, #1
 80097ba:	6013      	strmi	r3, [r2, #0]
 80097bc:	bf5c      	itt	pl
 80097be:	2002      	movpl	r0, #2
 80097c0:	6013      	strpl	r3, [r2, #0]
 80097c2:	4770      	bx	lr
 80097c4:	b299      	uxth	r1, r3
 80097c6:	b909      	cbnz	r1, 80097cc <__lo0bits+0x2a>
 80097c8:	2010      	movs	r0, #16
 80097ca:	0c1b      	lsrs	r3, r3, #16
 80097cc:	b2d9      	uxtb	r1, r3
 80097ce:	b909      	cbnz	r1, 80097d4 <__lo0bits+0x32>
 80097d0:	3008      	adds	r0, #8
 80097d2:	0a1b      	lsrs	r3, r3, #8
 80097d4:	0719      	lsls	r1, r3, #28
 80097d6:	bf04      	itt	eq
 80097d8:	091b      	lsreq	r3, r3, #4
 80097da:	3004      	addeq	r0, #4
 80097dc:	0799      	lsls	r1, r3, #30
 80097de:	bf04      	itt	eq
 80097e0:	089b      	lsreq	r3, r3, #2
 80097e2:	3002      	addeq	r0, #2
 80097e4:	07d9      	lsls	r1, r3, #31
 80097e6:	d403      	bmi.n	80097f0 <__lo0bits+0x4e>
 80097e8:	085b      	lsrs	r3, r3, #1
 80097ea:	f100 0001 	add.w	r0, r0, #1
 80097ee:	d003      	beq.n	80097f8 <__lo0bits+0x56>
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	4770      	bx	lr
 80097f4:	2000      	movs	r0, #0
 80097f6:	4770      	bx	lr
 80097f8:	2020      	movs	r0, #32
 80097fa:	4770      	bx	lr

080097fc <__i2b>:
 80097fc:	b510      	push	{r4, lr}
 80097fe:	460c      	mov	r4, r1
 8009800:	2101      	movs	r1, #1
 8009802:	f7ff febd 	bl	8009580 <_Balloc>
 8009806:	4602      	mov	r2, r0
 8009808:	b928      	cbnz	r0, 8009816 <__i2b+0x1a>
 800980a:	f240 1145 	movw	r1, #325	@ 0x145
 800980e:	4b04      	ldr	r3, [pc, #16]	@ (8009820 <__i2b+0x24>)
 8009810:	4804      	ldr	r0, [pc, #16]	@ (8009824 <__i2b+0x28>)
 8009812:	f7ff fa4d 	bl	8008cb0 <__assert_func>
 8009816:	2301      	movs	r3, #1
 8009818:	6144      	str	r4, [r0, #20]
 800981a:	6103      	str	r3, [r0, #16]
 800981c:	bd10      	pop	{r4, pc}
 800981e:	bf00      	nop
 8009820:	0800c4e6 	.word	0x0800c4e6
 8009824:	0800c557 	.word	0x0800c557

08009828 <__multiply>:
 8009828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	4614      	mov	r4, r2
 800982e:	690a      	ldr	r2, [r1, #16]
 8009830:	6923      	ldr	r3, [r4, #16]
 8009832:	460f      	mov	r7, r1
 8009834:	429a      	cmp	r2, r3
 8009836:	bfa2      	ittt	ge
 8009838:	4623      	movge	r3, r4
 800983a:	460c      	movge	r4, r1
 800983c:	461f      	movge	r7, r3
 800983e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009842:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009846:	68a3      	ldr	r3, [r4, #8]
 8009848:	6861      	ldr	r1, [r4, #4]
 800984a:	eb0a 0609 	add.w	r6, sl, r9
 800984e:	42b3      	cmp	r3, r6
 8009850:	b085      	sub	sp, #20
 8009852:	bfb8      	it	lt
 8009854:	3101      	addlt	r1, #1
 8009856:	f7ff fe93 	bl	8009580 <_Balloc>
 800985a:	b930      	cbnz	r0, 800986a <__multiply+0x42>
 800985c:	4602      	mov	r2, r0
 800985e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009862:	4b43      	ldr	r3, [pc, #268]	@ (8009970 <__multiply+0x148>)
 8009864:	4843      	ldr	r0, [pc, #268]	@ (8009974 <__multiply+0x14c>)
 8009866:	f7ff fa23 	bl	8008cb0 <__assert_func>
 800986a:	f100 0514 	add.w	r5, r0, #20
 800986e:	462b      	mov	r3, r5
 8009870:	2200      	movs	r2, #0
 8009872:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009876:	4543      	cmp	r3, r8
 8009878:	d321      	bcc.n	80098be <__multiply+0x96>
 800987a:	f107 0114 	add.w	r1, r7, #20
 800987e:	f104 0214 	add.w	r2, r4, #20
 8009882:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009886:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800988a:	9302      	str	r3, [sp, #8]
 800988c:	1b13      	subs	r3, r2, r4
 800988e:	3b15      	subs	r3, #21
 8009890:	f023 0303 	bic.w	r3, r3, #3
 8009894:	3304      	adds	r3, #4
 8009896:	f104 0715 	add.w	r7, r4, #21
 800989a:	42ba      	cmp	r2, r7
 800989c:	bf38      	it	cc
 800989e:	2304      	movcc	r3, #4
 80098a0:	9301      	str	r3, [sp, #4]
 80098a2:	9b02      	ldr	r3, [sp, #8]
 80098a4:	9103      	str	r1, [sp, #12]
 80098a6:	428b      	cmp	r3, r1
 80098a8:	d80c      	bhi.n	80098c4 <__multiply+0x9c>
 80098aa:	2e00      	cmp	r6, #0
 80098ac:	dd03      	ble.n	80098b6 <__multiply+0x8e>
 80098ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d05a      	beq.n	800996c <__multiply+0x144>
 80098b6:	6106      	str	r6, [r0, #16]
 80098b8:	b005      	add	sp, #20
 80098ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098be:	f843 2b04 	str.w	r2, [r3], #4
 80098c2:	e7d8      	b.n	8009876 <__multiply+0x4e>
 80098c4:	f8b1 a000 	ldrh.w	sl, [r1]
 80098c8:	f1ba 0f00 	cmp.w	sl, #0
 80098cc:	d023      	beq.n	8009916 <__multiply+0xee>
 80098ce:	46a9      	mov	r9, r5
 80098d0:	f04f 0c00 	mov.w	ip, #0
 80098d4:	f104 0e14 	add.w	lr, r4, #20
 80098d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80098dc:	f8d9 3000 	ldr.w	r3, [r9]
 80098e0:	fa1f fb87 	uxth.w	fp, r7
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	fb0a 330b 	mla	r3, sl, fp, r3
 80098ea:	4463      	add	r3, ip
 80098ec:	f8d9 c000 	ldr.w	ip, [r9]
 80098f0:	0c3f      	lsrs	r7, r7, #16
 80098f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80098f6:	fb0a c707 	mla	r7, sl, r7, ip
 80098fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80098fe:	b29b      	uxth	r3, r3
 8009900:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009904:	4572      	cmp	r2, lr
 8009906:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800990a:	f849 3b04 	str.w	r3, [r9], #4
 800990e:	d8e3      	bhi.n	80098d8 <__multiply+0xb0>
 8009910:	9b01      	ldr	r3, [sp, #4]
 8009912:	f845 c003 	str.w	ip, [r5, r3]
 8009916:	9b03      	ldr	r3, [sp, #12]
 8009918:	3104      	adds	r1, #4
 800991a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800991e:	f1b9 0f00 	cmp.w	r9, #0
 8009922:	d021      	beq.n	8009968 <__multiply+0x140>
 8009924:	46ae      	mov	lr, r5
 8009926:	f04f 0a00 	mov.w	sl, #0
 800992a:	682b      	ldr	r3, [r5, #0]
 800992c:	f104 0c14 	add.w	ip, r4, #20
 8009930:	f8bc b000 	ldrh.w	fp, [ip]
 8009934:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009938:	b29b      	uxth	r3, r3
 800993a:	fb09 770b 	mla	r7, r9, fp, r7
 800993e:	4457      	add	r7, sl
 8009940:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009944:	f84e 3b04 	str.w	r3, [lr], #4
 8009948:	f85c 3b04 	ldr.w	r3, [ip], #4
 800994c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009950:	f8be 3000 	ldrh.w	r3, [lr]
 8009954:	4562      	cmp	r2, ip
 8009956:	fb09 330a 	mla	r3, r9, sl, r3
 800995a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800995e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009962:	d8e5      	bhi.n	8009930 <__multiply+0x108>
 8009964:	9f01      	ldr	r7, [sp, #4]
 8009966:	51eb      	str	r3, [r5, r7]
 8009968:	3504      	adds	r5, #4
 800996a:	e79a      	b.n	80098a2 <__multiply+0x7a>
 800996c:	3e01      	subs	r6, #1
 800996e:	e79c      	b.n	80098aa <__multiply+0x82>
 8009970:	0800c4e6 	.word	0x0800c4e6
 8009974:	0800c557 	.word	0x0800c557

08009978 <__pow5mult>:
 8009978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800997c:	4615      	mov	r5, r2
 800997e:	f012 0203 	ands.w	r2, r2, #3
 8009982:	4607      	mov	r7, r0
 8009984:	460e      	mov	r6, r1
 8009986:	d007      	beq.n	8009998 <__pow5mult+0x20>
 8009988:	4c25      	ldr	r4, [pc, #148]	@ (8009a20 <__pow5mult+0xa8>)
 800998a:	3a01      	subs	r2, #1
 800998c:	2300      	movs	r3, #0
 800998e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009992:	f7ff fe57 	bl	8009644 <__multadd>
 8009996:	4606      	mov	r6, r0
 8009998:	10ad      	asrs	r5, r5, #2
 800999a:	d03d      	beq.n	8009a18 <__pow5mult+0xa0>
 800999c:	69fc      	ldr	r4, [r7, #28]
 800999e:	b97c      	cbnz	r4, 80099c0 <__pow5mult+0x48>
 80099a0:	2010      	movs	r0, #16
 80099a2:	f7ff fd25 	bl	80093f0 <malloc>
 80099a6:	4602      	mov	r2, r0
 80099a8:	61f8      	str	r0, [r7, #28]
 80099aa:	b928      	cbnz	r0, 80099b8 <__pow5mult+0x40>
 80099ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80099b0:	4b1c      	ldr	r3, [pc, #112]	@ (8009a24 <__pow5mult+0xac>)
 80099b2:	481d      	ldr	r0, [pc, #116]	@ (8009a28 <__pow5mult+0xb0>)
 80099b4:	f7ff f97c 	bl	8008cb0 <__assert_func>
 80099b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099bc:	6004      	str	r4, [r0, #0]
 80099be:	60c4      	str	r4, [r0, #12]
 80099c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80099c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099c8:	b94c      	cbnz	r4, 80099de <__pow5mult+0x66>
 80099ca:	f240 2171 	movw	r1, #625	@ 0x271
 80099ce:	4638      	mov	r0, r7
 80099d0:	f7ff ff14 	bl	80097fc <__i2b>
 80099d4:	2300      	movs	r3, #0
 80099d6:	4604      	mov	r4, r0
 80099d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80099dc:	6003      	str	r3, [r0, #0]
 80099de:	f04f 0900 	mov.w	r9, #0
 80099e2:	07eb      	lsls	r3, r5, #31
 80099e4:	d50a      	bpl.n	80099fc <__pow5mult+0x84>
 80099e6:	4631      	mov	r1, r6
 80099e8:	4622      	mov	r2, r4
 80099ea:	4638      	mov	r0, r7
 80099ec:	f7ff ff1c 	bl	8009828 <__multiply>
 80099f0:	4680      	mov	r8, r0
 80099f2:	4631      	mov	r1, r6
 80099f4:	4638      	mov	r0, r7
 80099f6:	f7ff fe03 	bl	8009600 <_Bfree>
 80099fa:	4646      	mov	r6, r8
 80099fc:	106d      	asrs	r5, r5, #1
 80099fe:	d00b      	beq.n	8009a18 <__pow5mult+0xa0>
 8009a00:	6820      	ldr	r0, [r4, #0]
 8009a02:	b938      	cbnz	r0, 8009a14 <__pow5mult+0x9c>
 8009a04:	4622      	mov	r2, r4
 8009a06:	4621      	mov	r1, r4
 8009a08:	4638      	mov	r0, r7
 8009a0a:	f7ff ff0d 	bl	8009828 <__multiply>
 8009a0e:	6020      	str	r0, [r4, #0]
 8009a10:	f8c0 9000 	str.w	r9, [r0]
 8009a14:	4604      	mov	r4, r0
 8009a16:	e7e4      	b.n	80099e2 <__pow5mult+0x6a>
 8009a18:	4630      	mov	r0, r6
 8009a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a1e:	bf00      	nop
 8009a20:	0800c5b0 	.word	0x0800c5b0
 8009a24:	0800c431 	.word	0x0800c431
 8009a28:	0800c557 	.word	0x0800c557

08009a2c <__lshift>:
 8009a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a30:	460c      	mov	r4, r1
 8009a32:	4607      	mov	r7, r0
 8009a34:	4691      	mov	r9, r2
 8009a36:	6923      	ldr	r3, [r4, #16]
 8009a38:	6849      	ldr	r1, [r1, #4]
 8009a3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a3e:	68a3      	ldr	r3, [r4, #8]
 8009a40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a44:	f108 0601 	add.w	r6, r8, #1
 8009a48:	42b3      	cmp	r3, r6
 8009a4a:	db0b      	blt.n	8009a64 <__lshift+0x38>
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7ff fd97 	bl	8009580 <_Balloc>
 8009a52:	4605      	mov	r5, r0
 8009a54:	b948      	cbnz	r0, 8009a6a <__lshift+0x3e>
 8009a56:	4602      	mov	r2, r0
 8009a58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a5c:	4b27      	ldr	r3, [pc, #156]	@ (8009afc <__lshift+0xd0>)
 8009a5e:	4828      	ldr	r0, [pc, #160]	@ (8009b00 <__lshift+0xd4>)
 8009a60:	f7ff f926 	bl	8008cb0 <__assert_func>
 8009a64:	3101      	adds	r1, #1
 8009a66:	005b      	lsls	r3, r3, #1
 8009a68:	e7ee      	b.n	8009a48 <__lshift+0x1c>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f100 0114 	add.w	r1, r0, #20
 8009a70:	f100 0210 	add.w	r2, r0, #16
 8009a74:	4618      	mov	r0, r3
 8009a76:	4553      	cmp	r3, sl
 8009a78:	db33      	blt.n	8009ae2 <__lshift+0xb6>
 8009a7a:	6920      	ldr	r0, [r4, #16]
 8009a7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a80:	f104 0314 	add.w	r3, r4, #20
 8009a84:	f019 091f 	ands.w	r9, r9, #31
 8009a88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a90:	d02b      	beq.n	8009aea <__lshift+0xbe>
 8009a92:	468a      	mov	sl, r1
 8009a94:	2200      	movs	r2, #0
 8009a96:	f1c9 0e20 	rsb	lr, r9, #32
 8009a9a:	6818      	ldr	r0, [r3, #0]
 8009a9c:	fa00 f009 	lsl.w	r0, r0, r9
 8009aa0:	4310      	orrs	r0, r2
 8009aa2:	f84a 0b04 	str.w	r0, [sl], #4
 8009aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aaa:	459c      	cmp	ip, r3
 8009aac:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ab0:	d8f3      	bhi.n	8009a9a <__lshift+0x6e>
 8009ab2:	ebac 0304 	sub.w	r3, ip, r4
 8009ab6:	3b15      	subs	r3, #21
 8009ab8:	f023 0303 	bic.w	r3, r3, #3
 8009abc:	3304      	adds	r3, #4
 8009abe:	f104 0015 	add.w	r0, r4, #21
 8009ac2:	4584      	cmp	ip, r0
 8009ac4:	bf38      	it	cc
 8009ac6:	2304      	movcc	r3, #4
 8009ac8:	50ca      	str	r2, [r1, r3]
 8009aca:	b10a      	cbz	r2, 8009ad0 <__lshift+0xa4>
 8009acc:	f108 0602 	add.w	r6, r8, #2
 8009ad0:	3e01      	subs	r6, #1
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	612e      	str	r6, [r5, #16]
 8009ad8:	f7ff fd92 	bl	8009600 <_Bfree>
 8009adc:	4628      	mov	r0, r5
 8009ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	e7c5      	b.n	8009a76 <__lshift+0x4a>
 8009aea:	3904      	subs	r1, #4
 8009aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8009af0:	459c      	cmp	ip, r3
 8009af2:	f841 2f04 	str.w	r2, [r1, #4]!
 8009af6:	d8f9      	bhi.n	8009aec <__lshift+0xc0>
 8009af8:	e7ea      	b.n	8009ad0 <__lshift+0xa4>
 8009afa:	bf00      	nop
 8009afc:	0800c4e6 	.word	0x0800c4e6
 8009b00:	0800c557 	.word	0x0800c557

08009b04 <__mcmp>:
 8009b04:	4603      	mov	r3, r0
 8009b06:	690a      	ldr	r2, [r1, #16]
 8009b08:	6900      	ldr	r0, [r0, #16]
 8009b0a:	b530      	push	{r4, r5, lr}
 8009b0c:	1a80      	subs	r0, r0, r2
 8009b0e:	d10e      	bne.n	8009b2e <__mcmp+0x2a>
 8009b10:	3314      	adds	r3, #20
 8009b12:	3114      	adds	r1, #20
 8009b14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b24:	4295      	cmp	r5, r2
 8009b26:	d003      	beq.n	8009b30 <__mcmp+0x2c>
 8009b28:	d205      	bcs.n	8009b36 <__mcmp+0x32>
 8009b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b2e:	bd30      	pop	{r4, r5, pc}
 8009b30:	42a3      	cmp	r3, r4
 8009b32:	d3f3      	bcc.n	8009b1c <__mcmp+0x18>
 8009b34:	e7fb      	b.n	8009b2e <__mcmp+0x2a>
 8009b36:	2001      	movs	r0, #1
 8009b38:	e7f9      	b.n	8009b2e <__mcmp+0x2a>
	...

08009b3c <__mdiff>:
 8009b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	4689      	mov	r9, r1
 8009b42:	4606      	mov	r6, r0
 8009b44:	4611      	mov	r1, r2
 8009b46:	4648      	mov	r0, r9
 8009b48:	4614      	mov	r4, r2
 8009b4a:	f7ff ffdb 	bl	8009b04 <__mcmp>
 8009b4e:	1e05      	subs	r5, r0, #0
 8009b50:	d112      	bne.n	8009b78 <__mdiff+0x3c>
 8009b52:	4629      	mov	r1, r5
 8009b54:	4630      	mov	r0, r6
 8009b56:	f7ff fd13 	bl	8009580 <_Balloc>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	b928      	cbnz	r0, 8009b6a <__mdiff+0x2e>
 8009b5e:	f240 2137 	movw	r1, #567	@ 0x237
 8009b62:	4b3e      	ldr	r3, [pc, #248]	@ (8009c5c <__mdiff+0x120>)
 8009b64:	483e      	ldr	r0, [pc, #248]	@ (8009c60 <__mdiff+0x124>)
 8009b66:	f7ff f8a3 	bl	8008cb0 <__assert_func>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b70:	4610      	mov	r0, r2
 8009b72:	b003      	add	sp, #12
 8009b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b78:	bfbc      	itt	lt
 8009b7a:	464b      	movlt	r3, r9
 8009b7c:	46a1      	movlt	r9, r4
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b84:	bfba      	itte	lt
 8009b86:	461c      	movlt	r4, r3
 8009b88:	2501      	movlt	r5, #1
 8009b8a:	2500      	movge	r5, #0
 8009b8c:	f7ff fcf8 	bl	8009580 <_Balloc>
 8009b90:	4602      	mov	r2, r0
 8009b92:	b918      	cbnz	r0, 8009b9c <__mdiff+0x60>
 8009b94:	f240 2145 	movw	r1, #581	@ 0x245
 8009b98:	4b30      	ldr	r3, [pc, #192]	@ (8009c5c <__mdiff+0x120>)
 8009b9a:	e7e3      	b.n	8009b64 <__mdiff+0x28>
 8009b9c:	f100 0b14 	add.w	fp, r0, #20
 8009ba0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009ba4:	f109 0310 	add.w	r3, r9, #16
 8009ba8:	60c5      	str	r5, [r0, #12]
 8009baa:	f04f 0c00 	mov.w	ip, #0
 8009bae:	f109 0514 	add.w	r5, r9, #20
 8009bb2:	46d9      	mov	r9, fp
 8009bb4:	6926      	ldr	r6, [r4, #16]
 8009bb6:	f104 0e14 	add.w	lr, r4, #20
 8009bba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009bbe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	9b01      	ldr	r3, [sp, #4]
 8009bc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009bca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009bce:	b281      	uxth	r1, r0
 8009bd0:	9301      	str	r3, [sp, #4]
 8009bd2:	fa1f f38a 	uxth.w	r3, sl
 8009bd6:	1a5b      	subs	r3, r3, r1
 8009bd8:	0c00      	lsrs	r0, r0, #16
 8009bda:	4463      	add	r3, ip
 8009bdc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009be0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009bea:	4576      	cmp	r6, lr
 8009bec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009bf0:	f849 3b04 	str.w	r3, [r9], #4
 8009bf4:	d8e6      	bhi.n	8009bc4 <__mdiff+0x88>
 8009bf6:	1b33      	subs	r3, r6, r4
 8009bf8:	3b15      	subs	r3, #21
 8009bfa:	f023 0303 	bic.w	r3, r3, #3
 8009bfe:	3415      	adds	r4, #21
 8009c00:	3304      	adds	r3, #4
 8009c02:	42a6      	cmp	r6, r4
 8009c04:	bf38      	it	cc
 8009c06:	2304      	movcc	r3, #4
 8009c08:	441d      	add	r5, r3
 8009c0a:	445b      	add	r3, fp
 8009c0c:	461e      	mov	r6, r3
 8009c0e:	462c      	mov	r4, r5
 8009c10:	4544      	cmp	r4, r8
 8009c12:	d30e      	bcc.n	8009c32 <__mdiff+0xf6>
 8009c14:	f108 0103 	add.w	r1, r8, #3
 8009c18:	1b49      	subs	r1, r1, r5
 8009c1a:	f021 0103 	bic.w	r1, r1, #3
 8009c1e:	3d03      	subs	r5, #3
 8009c20:	45a8      	cmp	r8, r5
 8009c22:	bf38      	it	cc
 8009c24:	2100      	movcc	r1, #0
 8009c26:	440b      	add	r3, r1
 8009c28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c2c:	b199      	cbz	r1, 8009c56 <__mdiff+0x11a>
 8009c2e:	6117      	str	r7, [r2, #16]
 8009c30:	e79e      	b.n	8009b70 <__mdiff+0x34>
 8009c32:	46e6      	mov	lr, ip
 8009c34:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c38:	fa1f fc81 	uxth.w	ip, r1
 8009c3c:	44f4      	add	ip, lr
 8009c3e:	0c08      	lsrs	r0, r1, #16
 8009c40:	4471      	add	r1, lr
 8009c42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c46:	b289      	uxth	r1, r1
 8009c48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c50:	f846 1b04 	str.w	r1, [r6], #4
 8009c54:	e7dc      	b.n	8009c10 <__mdiff+0xd4>
 8009c56:	3f01      	subs	r7, #1
 8009c58:	e7e6      	b.n	8009c28 <__mdiff+0xec>
 8009c5a:	bf00      	nop
 8009c5c:	0800c4e6 	.word	0x0800c4e6
 8009c60:	0800c557 	.word	0x0800c557

08009c64 <__ulp>:
 8009c64:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca0 <__ulp+0x3c>)
 8009c66:	400b      	ands	r3, r1
 8009c68:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	dc08      	bgt.n	8009c82 <__ulp+0x1e>
 8009c70:	425b      	negs	r3, r3
 8009c72:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009c76:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009c7a:	da04      	bge.n	8009c86 <__ulp+0x22>
 8009c7c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009c80:	4113      	asrs	r3, r2
 8009c82:	2200      	movs	r2, #0
 8009c84:	e008      	b.n	8009c98 <__ulp+0x34>
 8009c86:	f1a2 0314 	sub.w	r3, r2, #20
 8009c8a:	2b1e      	cmp	r3, #30
 8009c8c:	bfd6      	itet	le
 8009c8e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009c92:	2201      	movgt	r2, #1
 8009c94:	40da      	lsrle	r2, r3
 8009c96:	2300      	movs	r3, #0
 8009c98:	4619      	mov	r1, r3
 8009c9a:	4610      	mov	r0, r2
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	7ff00000 	.word	0x7ff00000

08009ca4 <__b2d>:
 8009ca4:	6902      	ldr	r2, [r0, #16]
 8009ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca8:	f100 0614 	add.w	r6, r0, #20
 8009cac:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009cb0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009cb4:	4f1e      	ldr	r7, [pc, #120]	@ (8009d30 <__b2d+0x8c>)
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f7ff fd54 	bl	8009764 <__hi0bits>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	f1c0 0020 	rsb	r0, r0, #32
 8009cc2:	2b0a      	cmp	r3, #10
 8009cc4:	f1a2 0504 	sub.w	r5, r2, #4
 8009cc8:	6008      	str	r0, [r1, #0]
 8009cca:	dc12      	bgt.n	8009cf2 <__b2d+0x4e>
 8009ccc:	42ae      	cmp	r6, r5
 8009cce:	bf2c      	ite	cs
 8009cd0:	2200      	movcs	r2, #0
 8009cd2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009cd6:	f1c3 0c0b 	rsb	ip, r3, #11
 8009cda:	3315      	adds	r3, #21
 8009cdc:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009ce0:	fa04 f303 	lsl.w	r3, r4, r3
 8009ce4:	fa22 f20c 	lsr.w	r2, r2, ip
 8009ce8:	ea4e 0107 	orr.w	r1, lr, r7
 8009cec:	431a      	orrs	r2, r3
 8009cee:	4610      	mov	r0, r2
 8009cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf2:	42ae      	cmp	r6, r5
 8009cf4:	bf36      	itet	cc
 8009cf6:	f1a2 0508 	subcc.w	r5, r2, #8
 8009cfa:	2200      	movcs	r2, #0
 8009cfc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009d00:	3b0b      	subs	r3, #11
 8009d02:	d012      	beq.n	8009d2a <__b2d+0x86>
 8009d04:	f1c3 0720 	rsb	r7, r3, #32
 8009d08:	fa22 f107 	lsr.w	r1, r2, r7
 8009d0c:	409c      	lsls	r4, r3
 8009d0e:	430c      	orrs	r4, r1
 8009d10:	42b5      	cmp	r5, r6
 8009d12:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009d16:	bf94      	ite	ls
 8009d18:	2400      	movls	r4, #0
 8009d1a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009d1e:	409a      	lsls	r2, r3
 8009d20:	40fc      	lsrs	r4, r7
 8009d22:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009d26:	4322      	orrs	r2, r4
 8009d28:	e7e1      	b.n	8009cee <__b2d+0x4a>
 8009d2a:	ea44 0107 	orr.w	r1, r4, r7
 8009d2e:	e7de      	b.n	8009cee <__b2d+0x4a>
 8009d30:	3ff00000 	.word	0x3ff00000

08009d34 <__d2b>:
 8009d34:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009d38:	2101      	movs	r1, #1
 8009d3a:	4690      	mov	r8, r2
 8009d3c:	4699      	mov	r9, r3
 8009d3e:	9e08      	ldr	r6, [sp, #32]
 8009d40:	f7ff fc1e 	bl	8009580 <_Balloc>
 8009d44:	4604      	mov	r4, r0
 8009d46:	b930      	cbnz	r0, 8009d56 <__d2b+0x22>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d4e:	4b23      	ldr	r3, [pc, #140]	@ (8009ddc <__d2b+0xa8>)
 8009d50:	4823      	ldr	r0, [pc, #140]	@ (8009de0 <__d2b+0xac>)
 8009d52:	f7fe ffad 	bl	8008cb0 <__assert_func>
 8009d56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d5e:	b10d      	cbz	r5, 8009d64 <__d2b+0x30>
 8009d60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	f1b8 0300 	subs.w	r3, r8, #0
 8009d6a:	d024      	beq.n	8009db6 <__d2b+0x82>
 8009d6c:	4668      	mov	r0, sp
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	f7ff fd17 	bl	80097a2 <__lo0bits>
 8009d74:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d78:	b1d8      	cbz	r0, 8009db2 <__d2b+0x7e>
 8009d7a:	f1c0 0320 	rsb	r3, r0, #32
 8009d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d82:	430b      	orrs	r3, r1
 8009d84:	40c2      	lsrs	r2, r0
 8009d86:	6163      	str	r3, [r4, #20]
 8009d88:	9201      	str	r2, [sp, #4]
 8009d8a:	9b01      	ldr	r3, [sp, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	bf0c      	ite	eq
 8009d90:	2201      	moveq	r2, #1
 8009d92:	2202      	movne	r2, #2
 8009d94:	61a3      	str	r3, [r4, #24]
 8009d96:	6122      	str	r2, [r4, #16]
 8009d98:	b1ad      	cbz	r5, 8009dc6 <__d2b+0x92>
 8009d9a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009d9e:	4405      	add	r5, r0
 8009da0:	6035      	str	r5, [r6, #0]
 8009da2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da8:	6018      	str	r0, [r3, #0]
 8009daa:	4620      	mov	r0, r4
 8009dac:	b002      	add	sp, #8
 8009dae:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009db2:	6161      	str	r1, [r4, #20]
 8009db4:	e7e9      	b.n	8009d8a <__d2b+0x56>
 8009db6:	a801      	add	r0, sp, #4
 8009db8:	f7ff fcf3 	bl	80097a2 <__lo0bits>
 8009dbc:	9b01      	ldr	r3, [sp, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	6163      	str	r3, [r4, #20]
 8009dc2:	3020      	adds	r0, #32
 8009dc4:	e7e7      	b.n	8009d96 <__d2b+0x62>
 8009dc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009dca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dce:	6030      	str	r0, [r6, #0]
 8009dd0:	6918      	ldr	r0, [r3, #16]
 8009dd2:	f7ff fcc7 	bl	8009764 <__hi0bits>
 8009dd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dda:	e7e4      	b.n	8009da6 <__d2b+0x72>
 8009ddc:	0800c4e6 	.word	0x0800c4e6
 8009de0:	0800c557 	.word	0x0800c557

08009de4 <__ratio>:
 8009de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de8:	b085      	sub	sp, #20
 8009dea:	e9cd 1000 	strd	r1, r0, [sp]
 8009dee:	a902      	add	r1, sp, #8
 8009df0:	f7ff ff58 	bl	8009ca4 <__b2d>
 8009df4:	468b      	mov	fp, r1
 8009df6:	4606      	mov	r6, r0
 8009df8:	460f      	mov	r7, r1
 8009dfa:	9800      	ldr	r0, [sp, #0]
 8009dfc:	a903      	add	r1, sp, #12
 8009dfe:	f7ff ff51 	bl	8009ca4 <__b2d>
 8009e02:	460d      	mov	r5, r1
 8009e04:	9b01      	ldr	r3, [sp, #4]
 8009e06:	4689      	mov	r9, r1
 8009e08:	6919      	ldr	r1, [r3, #16]
 8009e0a:	9b00      	ldr	r3, [sp, #0]
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	4630      	mov	r0, r6
 8009e12:	1ac9      	subs	r1, r1, r3
 8009e14:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009e18:	1a9b      	subs	r3, r3, r2
 8009e1a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	bfcd      	iteet	gt
 8009e22:	463a      	movgt	r2, r7
 8009e24:	462a      	movle	r2, r5
 8009e26:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e2a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009e2e:	bfd8      	it	le
 8009e30:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009e34:	464b      	mov	r3, r9
 8009e36:	4622      	mov	r2, r4
 8009e38:	4659      	mov	r1, fp
 8009e3a:	f7f6 fc79 	bl	8000730 <__aeabi_ddiv>
 8009e3e:	b005      	add	sp, #20
 8009e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e44 <__copybits>:
 8009e44:	3901      	subs	r1, #1
 8009e46:	b570      	push	{r4, r5, r6, lr}
 8009e48:	1149      	asrs	r1, r1, #5
 8009e4a:	6914      	ldr	r4, [r2, #16]
 8009e4c:	3101      	adds	r1, #1
 8009e4e:	f102 0314 	add.w	r3, r2, #20
 8009e52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009e56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009e5a:	1f05      	subs	r5, r0, #4
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	d30c      	bcc.n	8009e7a <__copybits+0x36>
 8009e60:	1aa3      	subs	r3, r4, r2
 8009e62:	3b11      	subs	r3, #17
 8009e64:	f023 0303 	bic.w	r3, r3, #3
 8009e68:	3211      	adds	r2, #17
 8009e6a:	42a2      	cmp	r2, r4
 8009e6c:	bf88      	it	hi
 8009e6e:	2300      	movhi	r3, #0
 8009e70:	4418      	add	r0, r3
 8009e72:	2300      	movs	r3, #0
 8009e74:	4288      	cmp	r0, r1
 8009e76:	d305      	bcc.n	8009e84 <__copybits+0x40>
 8009e78:	bd70      	pop	{r4, r5, r6, pc}
 8009e7a:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e7e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e82:	e7eb      	b.n	8009e5c <__copybits+0x18>
 8009e84:	f840 3b04 	str.w	r3, [r0], #4
 8009e88:	e7f4      	b.n	8009e74 <__copybits+0x30>

08009e8a <__any_on>:
 8009e8a:	f100 0214 	add.w	r2, r0, #20
 8009e8e:	6900      	ldr	r0, [r0, #16]
 8009e90:	114b      	asrs	r3, r1, #5
 8009e92:	4298      	cmp	r0, r3
 8009e94:	b510      	push	{r4, lr}
 8009e96:	db11      	blt.n	8009ebc <__any_on+0x32>
 8009e98:	dd0a      	ble.n	8009eb0 <__any_on+0x26>
 8009e9a:	f011 011f 	ands.w	r1, r1, #31
 8009e9e:	d007      	beq.n	8009eb0 <__any_on+0x26>
 8009ea0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ea4:	fa24 f001 	lsr.w	r0, r4, r1
 8009ea8:	fa00 f101 	lsl.w	r1, r0, r1
 8009eac:	428c      	cmp	r4, r1
 8009eae:	d10b      	bne.n	8009ec8 <__any_on+0x3e>
 8009eb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d803      	bhi.n	8009ec0 <__any_on+0x36>
 8009eb8:	2000      	movs	r0, #0
 8009eba:	bd10      	pop	{r4, pc}
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	e7f7      	b.n	8009eb0 <__any_on+0x26>
 8009ec0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	d0f5      	beq.n	8009eb4 <__any_on+0x2a>
 8009ec8:	2001      	movs	r0, #1
 8009eca:	e7f6      	b.n	8009eba <__any_on+0x30>

08009ecc <__ascii_wctomb>:
 8009ecc:	4603      	mov	r3, r0
 8009ece:	4608      	mov	r0, r1
 8009ed0:	b141      	cbz	r1, 8009ee4 <__ascii_wctomb+0x18>
 8009ed2:	2aff      	cmp	r2, #255	@ 0xff
 8009ed4:	d904      	bls.n	8009ee0 <__ascii_wctomb+0x14>
 8009ed6:	228a      	movs	r2, #138	@ 0x8a
 8009ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	4770      	bx	lr
 8009ee0:	2001      	movs	r0, #1
 8009ee2:	700a      	strb	r2, [r1, #0]
 8009ee4:	4770      	bx	lr

08009ee6 <__ssputs_r>:
 8009ee6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eea:	461f      	mov	r7, r3
 8009eec:	688e      	ldr	r6, [r1, #8]
 8009eee:	4682      	mov	sl, r0
 8009ef0:	42be      	cmp	r6, r7
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	4690      	mov	r8, r2
 8009ef6:	680b      	ldr	r3, [r1, #0]
 8009ef8:	d82d      	bhi.n	8009f56 <__ssputs_r+0x70>
 8009efa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009efe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f02:	d026      	beq.n	8009f52 <__ssputs_r+0x6c>
 8009f04:	6965      	ldr	r5, [r4, #20]
 8009f06:	6909      	ldr	r1, [r1, #16]
 8009f08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f0c:	eba3 0901 	sub.w	r9, r3, r1
 8009f10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f14:	1c7b      	adds	r3, r7, #1
 8009f16:	444b      	add	r3, r9
 8009f18:	106d      	asrs	r5, r5, #1
 8009f1a:	429d      	cmp	r5, r3
 8009f1c:	bf38      	it	cc
 8009f1e:	461d      	movcc	r5, r3
 8009f20:	0553      	lsls	r3, r2, #21
 8009f22:	d527      	bpl.n	8009f74 <__ssputs_r+0x8e>
 8009f24:	4629      	mov	r1, r5
 8009f26:	f7ff fa8d 	bl	8009444 <_malloc_r>
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	b360      	cbz	r0, 8009f88 <__ssputs_r+0xa2>
 8009f2e:	464a      	mov	r2, r9
 8009f30:	6921      	ldr	r1, [r4, #16]
 8009f32:	f7fe fea4 	bl	8008c7e <memcpy>
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f40:	81a3      	strh	r3, [r4, #12]
 8009f42:	6126      	str	r6, [r4, #16]
 8009f44:	444e      	add	r6, r9
 8009f46:	6026      	str	r6, [r4, #0]
 8009f48:	463e      	mov	r6, r7
 8009f4a:	6165      	str	r5, [r4, #20]
 8009f4c:	eba5 0509 	sub.w	r5, r5, r9
 8009f50:	60a5      	str	r5, [r4, #8]
 8009f52:	42be      	cmp	r6, r7
 8009f54:	d900      	bls.n	8009f58 <__ssputs_r+0x72>
 8009f56:	463e      	mov	r6, r7
 8009f58:	4632      	mov	r2, r6
 8009f5a:	4641      	mov	r1, r8
 8009f5c:	6820      	ldr	r0, [r4, #0]
 8009f5e:	f000 fb65 	bl	800a62c <memmove>
 8009f62:	2000      	movs	r0, #0
 8009f64:	68a3      	ldr	r3, [r4, #8]
 8009f66:	1b9b      	subs	r3, r3, r6
 8009f68:	60a3      	str	r3, [r4, #8]
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	4433      	add	r3, r6
 8009f6e:	6023      	str	r3, [r4, #0]
 8009f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f74:	462a      	mov	r2, r5
 8009f76:	f000 fbac 	bl	800a6d2 <_realloc_r>
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d1e0      	bne.n	8009f42 <__ssputs_r+0x5c>
 8009f80:	4650      	mov	r0, sl
 8009f82:	6921      	ldr	r1, [r4, #16]
 8009f84:	f7fe feb2 	bl	8008cec <_free_r>
 8009f88:	230c      	movs	r3, #12
 8009f8a:	f8ca 3000 	str.w	r3, [sl]
 8009f8e:	89a3      	ldrh	r3, [r4, #12]
 8009f90:	f04f 30ff 	mov.w	r0, #4294967295
 8009f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f98:	81a3      	strh	r3, [r4, #12]
 8009f9a:	e7e9      	b.n	8009f70 <__ssputs_r+0x8a>

08009f9c <_svfiprintf_r>:
 8009f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	4698      	mov	r8, r3
 8009fa2:	898b      	ldrh	r3, [r1, #12]
 8009fa4:	4607      	mov	r7, r0
 8009fa6:	061b      	lsls	r3, r3, #24
 8009fa8:	460d      	mov	r5, r1
 8009faa:	4614      	mov	r4, r2
 8009fac:	b09d      	sub	sp, #116	@ 0x74
 8009fae:	d510      	bpl.n	8009fd2 <_svfiprintf_r+0x36>
 8009fb0:	690b      	ldr	r3, [r1, #16]
 8009fb2:	b973      	cbnz	r3, 8009fd2 <_svfiprintf_r+0x36>
 8009fb4:	2140      	movs	r1, #64	@ 0x40
 8009fb6:	f7ff fa45 	bl	8009444 <_malloc_r>
 8009fba:	6028      	str	r0, [r5, #0]
 8009fbc:	6128      	str	r0, [r5, #16]
 8009fbe:	b930      	cbnz	r0, 8009fce <_svfiprintf_r+0x32>
 8009fc0:	230c      	movs	r3, #12
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc8:	b01d      	add	sp, #116	@ 0x74
 8009fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fce:	2340      	movs	r3, #64	@ 0x40
 8009fd0:	616b      	str	r3, [r5, #20]
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fd6:	2320      	movs	r3, #32
 8009fd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fdc:	2330      	movs	r3, #48	@ 0x30
 8009fde:	f04f 0901 	mov.w	r9, #1
 8009fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fe6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a180 <_svfiprintf_r+0x1e4>
 8009fea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fee:	4623      	mov	r3, r4
 8009ff0:	469a      	mov	sl, r3
 8009ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ff6:	b10a      	cbz	r2, 8009ffc <_svfiprintf_r+0x60>
 8009ff8:	2a25      	cmp	r2, #37	@ 0x25
 8009ffa:	d1f9      	bne.n	8009ff0 <_svfiprintf_r+0x54>
 8009ffc:	ebba 0b04 	subs.w	fp, sl, r4
 800a000:	d00b      	beq.n	800a01a <_svfiprintf_r+0x7e>
 800a002:	465b      	mov	r3, fp
 800a004:	4622      	mov	r2, r4
 800a006:	4629      	mov	r1, r5
 800a008:	4638      	mov	r0, r7
 800a00a:	f7ff ff6c 	bl	8009ee6 <__ssputs_r>
 800a00e:	3001      	adds	r0, #1
 800a010:	f000 80a7 	beq.w	800a162 <_svfiprintf_r+0x1c6>
 800a014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a016:	445a      	add	r2, fp
 800a018:	9209      	str	r2, [sp, #36]	@ 0x24
 800a01a:	f89a 3000 	ldrb.w	r3, [sl]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 809f 	beq.w	800a162 <_svfiprintf_r+0x1c6>
 800a024:	2300      	movs	r3, #0
 800a026:	f04f 32ff 	mov.w	r2, #4294967295
 800a02a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a02e:	f10a 0a01 	add.w	sl, sl, #1
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	9307      	str	r3, [sp, #28]
 800a036:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a03a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a03c:	4654      	mov	r4, sl
 800a03e:	2205      	movs	r2, #5
 800a040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a044:	484e      	ldr	r0, [pc, #312]	@ (800a180 <_svfiprintf_r+0x1e4>)
 800a046:	f000 fb1b 	bl	800a680 <memchr>
 800a04a:	9a04      	ldr	r2, [sp, #16]
 800a04c:	b9d8      	cbnz	r0, 800a086 <_svfiprintf_r+0xea>
 800a04e:	06d0      	lsls	r0, r2, #27
 800a050:	bf44      	itt	mi
 800a052:	2320      	movmi	r3, #32
 800a054:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a058:	0711      	lsls	r1, r2, #28
 800a05a:	bf44      	itt	mi
 800a05c:	232b      	movmi	r3, #43	@ 0x2b
 800a05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a062:	f89a 3000 	ldrb.w	r3, [sl]
 800a066:	2b2a      	cmp	r3, #42	@ 0x2a
 800a068:	d015      	beq.n	800a096 <_svfiprintf_r+0xfa>
 800a06a:	4654      	mov	r4, sl
 800a06c:	2000      	movs	r0, #0
 800a06e:	f04f 0c0a 	mov.w	ip, #10
 800a072:	9a07      	ldr	r2, [sp, #28]
 800a074:	4621      	mov	r1, r4
 800a076:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a07a:	3b30      	subs	r3, #48	@ 0x30
 800a07c:	2b09      	cmp	r3, #9
 800a07e:	d94b      	bls.n	800a118 <_svfiprintf_r+0x17c>
 800a080:	b1b0      	cbz	r0, 800a0b0 <_svfiprintf_r+0x114>
 800a082:	9207      	str	r2, [sp, #28]
 800a084:	e014      	b.n	800a0b0 <_svfiprintf_r+0x114>
 800a086:	eba0 0308 	sub.w	r3, r0, r8
 800a08a:	fa09 f303 	lsl.w	r3, r9, r3
 800a08e:	4313      	orrs	r3, r2
 800a090:	46a2      	mov	sl, r4
 800a092:	9304      	str	r3, [sp, #16]
 800a094:	e7d2      	b.n	800a03c <_svfiprintf_r+0xa0>
 800a096:	9b03      	ldr	r3, [sp, #12]
 800a098:	1d19      	adds	r1, r3, #4
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	9103      	str	r1, [sp, #12]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	bfbb      	ittet	lt
 800a0a2:	425b      	neglt	r3, r3
 800a0a4:	f042 0202 	orrlt.w	r2, r2, #2
 800a0a8:	9307      	strge	r3, [sp, #28]
 800a0aa:	9307      	strlt	r3, [sp, #28]
 800a0ac:	bfb8      	it	lt
 800a0ae:	9204      	strlt	r2, [sp, #16]
 800a0b0:	7823      	ldrb	r3, [r4, #0]
 800a0b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0b4:	d10a      	bne.n	800a0cc <_svfiprintf_r+0x130>
 800a0b6:	7863      	ldrb	r3, [r4, #1]
 800a0b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0ba:	d132      	bne.n	800a122 <_svfiprintf_r+0x186>
 800a0bc:	9b03      	ldr	r3, [sp, #12]
 800a0be:	3402      	adds	r4, #2
 800a0c0:	1d1a      	adds	r2, r3, #4
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	9203      	str	r2, [sp, #12]
 800a0c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0ca:	9305      	str	r3, [sp, #20]
 800a0cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a184 <_svfiprintf_r+0x1e8>
 800a0d0:	2203      	movs	r2, #3
 800a0d2:	4650      	mov	r0, sl
 800a0d4:	7821      	ldrb	r1, [r4, #0]
 800a0d6:	f000 fad3 	bl	800a680 <memchr>
 800a0da:	b138      	cbz	r0, 800a0ec <_svfiprintf_r+0x150>
 800a0dc:	2240      	movs	r2, #64	@ 0x40
 800a0de:	9b04      	ldr	r3, [sp, #16]
 800a0e0:	eba0 000a 	sub.w	r0, r0, sl
 800a0e4:	4082      	lsls	r2, r0
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	3401      	adds	r4, #1
 800a0ea:	9304      	str	r3, [sp, #16]
 800a0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0f0:	2206      	movs	r2, #6
 800a0f2:	4825      	ldr	r0, [pc, #148]	@ (800a188 <_svfiprintf_r+0x1ec>)
 800a0f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0f8:	f000 fac2 	bl	800a680 <memchr>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d036      	beq.n	800a16e <_svfiprintf_r+0x1d2>
 800a100:	4b22      	ldr	r3, [pc, #136]	@ (800a18c <_svfiprintf_r+0x1f0>)
 800a102:	bb1b      	cbnz	r3, 800a14c <_svfiprintf_r+0x1b0>
 800a104:	9b03      	ldr	r3, [sp, #12]
 800a106:	3307      	adds	r3, #7
 800a108:	f023 0307 	bic.w	r3, r3, #7
 800a10c:	3308      	adds	r3, #8
 800a10e:	9303      	str	r3, [sp, #12]
 800a110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a112:	4433      	add	r3, r6
 800a114:	9309      	str	r3, [sp, #36]	@ 0x24
 800a116:	e76a      	b.n	8009fee <_svfiprintf_r+0x52>
 800a118:	460c      	mov	r4, r1
 800a11a:	2001      	movs	r0, #1
 800a11c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a120:	e7a8      	b.n	800a074 <_svfiprintf_r+0xd8>
 800a122:	2300      	movs	r3, #0
 800a124:	f04f 0c0a 	mov.w	ip, #10
 800a128:	4619      	mov	r1, r3
 800a12a:	3401      	adds	r4, #1
 800a12c:	9305      	str	r3, [sp, #20]
 800a12e:	4620      	mov	r0, r4
 800a130:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a134:	3a30      	subs	r2, #48	@ 0x30
 800a136:	2a09      	cmp	r2, #9
 800a138:	d903      	bls.n	800a142 <_svfiprintf_r+0x1a6>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d0c6      	beq.n	800a0cc <_svfiprintf_r+0x130>
 800a13e:	9105      	str	r1, [sp, #20]
 800a140:	e7c4      	b.n	800a0cc <_svfiprintf_r+0x130>
 800a142:	4604      	mov	r4, r0
 800a144:	2301      	movs	r3, #1
 800a146:	fb0c 2101 	mla	r1, ip, r1, r2
 800a14a:	e7f0      	b.n	800a12e <_svfiprintf_r+0x192>
 800a14c:	ab03      	add	r3, sp, #12
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	462a      	mov	r2, r5
 800a152:	4638      	mov	r0, r7
 800a154:	4b0e      	ldr	r3, [pc, #56]	@ (800a190 <_svfiprintf_r+0x1f4>)
 800a156:	a904      	add	r1, sp, #16
 800a158:	f3af 8000 	nop.w
 800a15c:	1c42      	adds	r2, r0, #1
 800a15e:	4606      	mov	r6, r0
 800a160:	d1d6      	bne.n	800a110 <_svfiprintf_r+0x174>
 800a162:	89ab      	ldrh	r3, [r5, #12]
 800a164:	065b      	lsls	r3, r3, #25
 800a166:	f53f af2d 	bmi.w	8009fc4 <_svfiprintf_r+0x28>
 800a16a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a16c:	e72c      	b.n	8009fc8 <_svfiprintf_r+0x2c>
 800a16e:	ab03      	add	r3, sp, #12
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	462a      	mov	r2, r5
 800a174:	4638      	mov	r0, r7
 800a176:	4b06      	ldr	r3, [pc, #24]	@ (800a190 <_svfiprintf_r+0x1f4>)
 800a178:	a904      	add	r1, sp, #16
 800a17a:	f000 f87d 	bl	800a278 <_printf_i>
 800a17e:	e7ed      	b.n	800a15c <_svfiprintf_r+0x1c0>
 800a180:	0800c6b0 	.word	0x0800c6b0
 800a184:	0800c6b6 	.word	0x0800c6b6
 800a188:	0800c6ba 	.word	0x0800c6ba
 800a18c:	00000000 	.word	0x00000000
 800a190:	08009ee7 	.word	0x08009ee7

0800a194 <_printf_common>:
 800a194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a198:	4616      	mov	r6, r2
 800a19a:	4698      	mov	r8, r3
 800a19c:	688a      	ldr	r2, [r1, #8]
 800a19e:	690b      	ldr	r3, [r1, #16]
 800a1a0:	4607      	mov	r7, r0
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	bfb8      	it	lt
 800a1a6:	4613      	movlt	r3, r2
 800a1a8:	6033      	str	r3, [r6, #0]
 800a1aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1b4:	b10a      	cbz	r2, 800a1ba <_printf_common+0x26>
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	6033      	str	r3, [r6, #0]
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	0699      	lsls	r1, r3, #26
 800a1be:	bf42      	ittt	mi
 800a1c0:	6833      	ldrmi	r3, [r6, #0]
 800a1c2:	3302      	addmi	r3, #2
 800a1c4:	6033      	strmi	r3, [r6, #0]
 800a1c6:	6825      	ldr	r5, [r4, #0]
 800a1c8:	f015 0506 	ands.w	r5, r5, #6
 800a1cc:	d106      	bne.n	800a1dc <_printf_common+0x48>
 800a1ce:	f104 0a19 	add.w	sl, r4, #25
 800a1d2:	68e3      	ldr	r3, [r4, #12]
 800a1d4:	6832      	ldr	r2, [r6, #0]
 800a1d6:	1a9b      	subs	r3, r3, r2
 800a1d8:	42ab      	cmp	r3, r5
 800a1da:	dc2b      	bgt.n	800a234 <_printf_common+0xa0>
 800a1dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a1e0:	6822      	ldr	r2, [r4, #0]
 800a1e2:	3b00      	subs	r3, #0
 800a1e4:	bf18      	it	ne
 800a1e6:	2301      	movne	r3, #1
 800a1e8:	0692      	lsls	r2, r2, #26
 800a1ea:	d430      	bmi.n	800a24e <_printf_common+0xba>
 800a1ec:	4641      	mov	r1, r8
 800a1ee:	4638      	mov	r0, r7
 800a1f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a1f4:	47c8      	blx	r9
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	d023      	beq.n	800a242 <_printf_common+0xae>
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	6922      	ldr	r2, [r4, #16]
 800a1fe:	f003 0306 	and.w	r3, r3, #6
 800a202:	2b04      	cmp	r3, #4
 800a204:	bf14      	ite	ne
 800a206:	2500      	movne	r5, #0
 800a208:	6833      	ldreq	r3, [r6, #0]
 800a20a:	f04f 0600 	mov.w	r6, #0
 800a20e:	bf08      	it	eq
 800a210:	68e5      	ldreq	r5, [r4, #12]
 800a212:	f104 041a 	add.w	r4, r4, #26
 800a216:	bf08      	it	eq
 800a218:	1aed      	subeq	r5, r5, r3
 800a21a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a21e:	bf08      	it	eq
 800a220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a224:	4293      	cmp	r3, r2
 800a226:	bfc4      	itt	gt
 800a228:	1a9b      	subgt	r3, r3, r2
 800a22a:	18ed      	addgt	r5, r5, r3
 800a22c:	42b5      	cmp	r5, r6
 800a22e:	d11a      	bne.n	800a266 <_printf_common+0xd2>
 800a230:	2000      	movs	r0, #0
 800a232:	e008      	b.n	800a246 <_printf_common+0xb2>
 800a234:	2301      	movs	r3, #1
 800a236:	4652      	mov	r2, sl
 800a238:	4641      	mov	r1, r8
 800a23a:	4638      	mov	r0, r7
 800a23c:	47c8      	blx	r9
 800a23e:	3001      	adds	r0, #1
 800a240:	d103      	bne.n	800a24a <_printf_common+0xb6>
 800a242:	f04f 30ff 	mov.w	r0, #4294967295
 800a246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a24a:	3501      	adds	r5, #1
 800a24c:	e7c1      	b.n	800a1d2 <_printf_common+0x3e>
 800a24e:	2030      	movs	r0, #48	@ 0x30
 800a250:	18e1      	adds	r1, r4, r3
 800a252:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a256:	1c5a      	adds	r2, r3, #1
 800a258:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a25c:	4422      	add	r2, r4
 800a25e:	3302      	adds	r3, #2
 800a260:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a264:	e7c2      	b.n	800a1ec <_printf_common+0x58>
 800a266:	2301      	movs	r3, #1
 800a268:	4622      	mov	r2, r4
 800a26a:	4641      	mov	r1, r8
 800a26c:	4638      	mov	r0, r7
 800a26e:	47c8      	blx	r9
 800a270:	3001      	adds	r0, #1
 800a272:	d0e6      	beq.n	800a242 <_printf_common+0xae>
 800a274:	3601      	adds	r6, #1
 800a276:	e7d9      	b.n	800a22c <_printf_common+0x98>

0800a278 <_printf_i>:
 800a278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a27c:	7e0f      	ldrb	r7, [r1, #24]
 800a27e:	4691      	mov	r9, r2
 800a280:	2f78      	cmp	r7, #120	@ 0x78
 800a282:	4680      	mov	r8, r0
 800a284:	460c      	mov	r4, r1
 800a286:	469a      	mov	sl, r3
 800a288:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a28a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a28e:	d807      	bhi.n	800a2a0 <_printf_i+0x28>
 800a290:	2f62      	cmp	r7, #98	@ 0x62
 800a292:	d80a      	bhi.n	800a2aa <_printf_i+0x32>
 800a294:	2f00      	cmp	r7, #0
 800a296:	f000 80d3 	beq.w	800a440 <_printf_i+0x1c8>
 800a29a:	2f58      	cmp	r7, #88	@ 0x58
 800a29c:	f000 80ba 	beq.w	800a414 <_printf_i+0x19c>
 800a2a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a2a8:	e03a      	b.n	800a320 <_printf_i+0xa8>
 800a2aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a2ae:	2b15      	cmp	r3, #21
 800a2b0:	d8f6      	bhi.n	800a2a0 <_printf_i+0x28>
 800a2b2:	a101      	add	r1, pc, #4	@ (adr r1, 800a2b8 <_printf_i+0x40>)
 800a2b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2b8:	0800a311 	.word	0x0800a311
 800a2bc:	0800a325 	.word	0x0800a325
 800a2c0:	0800a2a1 	.word	0x0800a2a1
 800a2c4:	0800a2a1 	.word	0x0800a2a1
 800a2c8:	0800a2a1 	.word	0x0800a2a1
 800a2cc:	0800a2a1 	.word	0x0800a2a1
 800a2d0:	0800a325 	.word	0x0800a325
 800a2d4:	0800a2a1 	.word	0x0800a2a1
 800a2d8:	0800a2a1 	.word	0x0800a2a1
 800a2dc:	0800a2a1 	.word	0x0800a2a1
 800a2e0:	0800a2a1 	.word	0x0800a2a1
 800a2e4:	0800a427 	.word	0x0800a427
 800a2e8:	0800a34f 	.word	0x0800a34f
 800a2ec:	0800a3e1 	.word	0x0800a3e1
 800a2f0:	0800a2a1 	.word	0x0800a2a1
 800a2f4:	0800a2a1 	.word	0x0800a2a1
 800a2f8:	0800a449 	.word	0x0800a449
 800a2fc:	0800a2a1 	.word	0x0800a2a1
 800a300:	0800a34f 	.word	0x0800a34f
 800a304:	0800a2a1 	.word	0x0800a2a1
 800a308:	0800a2a1 	.word	0x0800a2a1
 800a30c:	0800a3e9 	.word	0x0800a3e9
 800a310:	6833      	ldr	r3, [r6, #0]
 800a312:	1d1a      	adds	r2, r3, #4
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6032      	str	r2, [r6, #0]
 800a318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a31c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a320:	2301      	movs	r3, #1
 800a322:	e09e      	b.n	800a462 <_printf_i+0x1ea>
 800a324:	6833      	ldr	r3, [r6, #0]
 800a326:	6820      	ldr	r0, [r4, #0]
 800a328:	1d19      	adds	r1, r3, #4
 800a32a:	6031      	str	r1, [r6, #0]
 800a32c:	0606      	lsls	r6, r0, #24
 800a32e:	d501      	bpl.n	800a334 <_printf_i+0xbc>
 800a330:	681d      	ldr	r5, [r3, #0]
 800a332:	e003      	b.n	800a33c <_printf_i+0xc4>
 800a334:	0645      	lsls	r5, r0, #25
 800a336:	d5fb      	bpl.n	800a330 <_printf_i+0xb8>
 800a338:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a33c:	2d00      	cmp	r5, #0
 800a33e:	da03      	bge.n	800a348 <_printf_i+0xd0>
 800a340:	232d      	movs	r3, #45	@ 0x2d
 800a342:	426d      	negs	r5, r5
 800a344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a348:	230a      	movs	r3, #10
 800a34a:	4859      	ldr	r0, [pc, #356]	@ (800a4b0 <_printf_i+0x238>)
 800a34c:	e011      	b.n	800a372 <_printf_i+0xfa>
 800a34e:	6821      	ldr	r1, [r4, #0]
 800a350:	6833      	ldr	r3, [r6, #0]
 800a352:	0608      	lsls	r0, r1, #24
 800a354:	f853 5b04 	ldr.w	r5, [r3], #4
 800a358:	d402      	bmi.n	800a360 <_printf_i+0xe8>
 800a35a:	0649      	lsls	r1, r1, #25
 800a35c:	bf48      	it	mi
 800a35e:	b2ad      	uxthmi	r5, r5
 800a360:	2f6f      	cmp	r7, #111	@ 0x6f
 800a362:	6033      	str	r3, [r6, #0]
 800a364:	bf14      	ite	ne
 800a366:	230a      	movne	r3, #10
 800a368:	2308      	moveq	r3, #8
 800a36a:	4851      	ldr	r0, [pc, #324]	@ (800a4b0 <_printf_i+0x238>)
 800a36c:	2100      	movs	r1, #0
 800a36e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a372:	6866      	ldr	r6, [r4, #4]
 800a374:	2e00      	cmp	r6, #0
 800a376:	bfa8      	it	ge
 800a378:	6821      	ldrge	r1, [r4, #0]
 800a37a:	60a6      	str	r6, [r4, #8]
 800a37c:	bfa4      	itt	ge
 800a37e:	f021 0104 	bicge.w	r1, r1, #4
 800a382:	6021      	strge	r1, [r4, #0]
 800a384:	b90d      	cbnz	r5, 800a38a <_printf_i+0x112>
 800a386:	2e00      	cmp	r6, #0
 800a388:	d04b      	beq.n	800a422 <_printf_i+0x1aa>
 800a38a:	4616      	mov	r6, r2
 800a38c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a390:	fb03 5711 	mls	r7, r3, r1, r5
 800a394:	5dc7      	ldrb	r7, [r0, r7]
 800a396:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a39a:	462f      	mov	r7, r5
 800a39c:	42bb      	cmp	r3, r7
 800a39e:	460d      	mov	r5, r1
 800a3a0:	d9f4      	bls.n	800a38c <_printf_i+0x114>
 800a3a2:	2b08      	cmp	r3, #8
 800a3a4:	d10b      	bne.n	800a3be <_printf_i+0x146>
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	07df      	lsls	r7, r3, #31
 800a3aa:	d508      	bpl.n	800a3be <_printf_i+0x146>
 800a3ac:	6923      	ldr	r3, [r4, #16]
 800a3ae:	6861      	ldr	r1, [r4, #4]
 800a3b0:	4299      	cmp	r1, r3
 800a3b2:	bfde      	ittt	le
 800a3b4:	2330      	movle	r3, #48	@ 0x30
 800a3b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3be:	1b92      	subs	r2, r2, r6
 800a3c0:	6122      	str	r2, [r4, #16]
 800a3c2:	464b      	mov	r3, r9
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4640      	mov	r0, r8
 800a3c8:	f8cd a000 	str.w	sl, [sp]
 800a3cc:	aa03      	add	r2, sp, #12
 800a3ce:	f7ff fee1 	bl	800a194 <_printf_common>
 800a3d2:	3001      	adds	r0, #1
 800a3d4:	d14a      	bne.n	800a46c <_printf_i+0x1f4>
 800a3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3da:	b004      	add	sp, #16
 800a3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	f043 0320 	orr.w	r3, r3, #32
 800a3e6:	6023      	str	r3, [r4, #0]
 800a3e8:	2778      	movs	r7, #120	@ 0x78
 800a3ea:	4832      	ldr	r0, [pc, #200]	@ (800a4b4 <_printf_i+0x23c>)
 800a3ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	6831      	ldr	r1, [r6, #0]
 800a3f4:	061f      	lsls	r7, r3, #24
 800a3f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a3fa:	d402      	bmi.n	800a402 <_printf_i+0x18a>
 800a3fc:	065f      	lsls	r7, r3, #25
 800a3fe:	bf48      	it	mi
 800a400:	b2ad      	uxthmi	r5, r5
 800a402:	6031      	str	r1, [r6, #0]
 800a404:	07d9      	lsls	r1, r3, #31
 800a406:	bf44      	itt	mi
 800a408:	f043 0320 	orrmi.w	r3, r3, #32
 800a40c:	6023      	strmi	r3, [r4, #0]
 800a40e:	b11d      	cbz	r5, 800a418 <_printf_i+0x1a0>
 800a410:	2310      	movs	r3, #16
 800a412:	e7ab      	b.n	800a36c <_printf_i+0xf4>
 800a414:	4826      	ldr	r0, [pc, #152]	@ (800a4b0 <_printf_i+0x238>)
 800a416:	e7e9      	b.n	800a3ec <_printf_i+0x174>
 800a418:	6823      	ldr	r3, [r4, #0]
 800a41a:	f023 0320 	bic.w	r3, r3, #32
 800a41e:	6023      	str	r3, [r4, #0]
 800a420:	e7f6      	b.n	800a410 <_printf_i+0x198>
 800a422:	4616      	mov	r6, r2
 800a424:	e7bd      	b.n	800a3a2 <_printf_i+0x12a>
 800a426:	6833      	ldr	r3, [r6, #0]
 800a428:	6825      	ldr	r5, [r4, #0]
 800a42a:	1d18      	adds	r0, r3, #4
 800a42c:	6961      	ldr	r1, [r4, #20]
 800a42e:	6030      	str	r0, [r6, #0]
 800a430:	062e      	lsls	r6, r5, #24
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	d501      	bpl.n	800a43a <_printf_i+0x1c2>
 800a436:	6019      	str	r1, [r3, #0]
 800a438:	e002      	b.n	800a440 <_printf_i+0x1c8>
 800a43a:	0668      	lsls	r0, r5, #25
 800a43c:	d5fb      	bpl.n	800a436 <_printf_i+0x1be>
 800a43e:	8019      	strh	r1, [r3, #0]
 800a440:	2300      	movs	r3, #0
 800a442:	4616      	mov	r6, r2
 800a444:	6123      	str	r3, [r4, #16]
 800a446:	e7bc      	b.n	800a3c2 <_printf_i+0x14a>
 800a448:	6833      	ldr	r3, [r6, #0]
 800a44a:	2100      	movs	r1, #0
 800a44c:	1d1a      	adds	r2, r3, #4
 800a44e:	6032      	str	r2, [r6, #0]
 800a450:	681e      	ldr	r6, [r3, #0]
 800a452:	6862      	ldr	r2, [r4, #4]
 800a454:	4630      	mov	r0, r6
 800a456:	f000 f913 	bl	800a680 <memchr>
 800a45a:	b108      	cbz	r0, 800a460 <_printf_i+0x1e8>
 800a45c:	1b80      	subs	r0, r0, r6
 800a45e:	6060      	str	r0, [r4, #4]
 800a460:	6863      	ldr	r3, [r4, #4]
 800a462:	6123      	str	r3, [r4, #16]
 800a464:	2300      	movs	r3, #0
 800a466:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a46a:	e7aa      	b.n	800a3c2 <_printf_i+0x14a>
 800a46c:	4632      	mov	r2, r6
 800a46e:	4649      	mov	r1, r9
 800a470:	4640      	mov	r0, r8
 800a472:	6923      	ldr	r3, [r4, #16]
 800a474:	47d0      	blx	sl
 800a476:	3001      	adds	r0, #1
 800a478:	d0ad      	beq.n	800a3d6 <_printf_i+0x15e>
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	079b      	lsls	r3, r3, #30
 800a47e:	d413      	bmi.n	800a4a8 <_printf_i+0x230>
 800a480:	68e0      	ldr	r0, [r4, #12]
 800a482:	9b03      	ldr	r3, [sp, #12]
 800a484:	4298      	cmp	r0, r3
 800a486:	bfb8      	it	lt
 800a488:	4618      	movlt	r0, r3
 800a48a:	e7a6      	b.n	800a3da <_printf_i+0x162>
 800a48c:	2301      	movs	r3, #1
 800a48e:	4632      	mov	r2, r6
 800a490:	4649      	mov	r1, r9
 800a492:	4640      	mov	r0, r8
 800a494:	47d0      	blx	sl
 800a496:	3001      	adds	r0, #1
 800a498:	d09d      	beq.n	800a3d6 <_printf_i+0x15e>
 800a49a:	3501      	adds	r5, #1
 800a49c:	68e3      	ldr	r3, [r4, #12]
 800a49e:	9903      	ldr	r1, [sp, #12]
 800a4a0:	1a5b      	subs	r3, r3, r1
 800a4a2:	42ab      	cmp	r3, r5
 800a4a4:	dcf2      	bgt.n	800a48c <_printf_i+0x214>
 800a4a6:	e7eb      	b.n	800a480 <_printf_i+0x208>
 800a4a8:	2500      	movs	r5, #0
 800a4aa:	f104 0619 	add.w	r6, r4, #25
 800a4ae:	e7f5      	b.n	800a49c <_printf_i+0x224>
 800a4b0:	0800c6c1 	.word	0x0800c6c1
 800a4b4:	0800c6d2 	.word	0x0800c6d2

0800a4b8 <__sflush_r>:
 800a4b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4be:	0716      	lsls	r6, r2, #28
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	d454      	bmi.n	800a570 <__sflush_r+0xb8>
 800a4c6:	684b      	ldr	r3, [r1, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	dc02      	bgt.n	800a4d2 <__sflush_r+0x1a>
 800a4cc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	dd48      	ble.n	800a564 <__sflush_r+0xac>
 800a4d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4d4:	2e00      	cmp	r6, #0
 800a4d6:	d045      	beq.n	800a564 <__sflush_r+0xac>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4de:	682f      	ldr	r7, [r5, #0]
 800a4e0:	6a21      	ldr	r1, [r4, #32]
 800a4e2:	602b      	str	r3, [r5, #0]
 800a4e4:	d030      	beq.n	800a548 <__sflush_r+0x90>
 800a4e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4e8:	89a3      	ldrh	r3, [r4, #12]
 800a4ea:	0759      	lsls	r1, r3, #29
 800a4ec:	d505      	bpl.n	800a4fa <__sflush_r+0x42>
 800a4ee:	6863      	ldr	r3, [r4, #4]
 800a4f0:	1ad2      	subs	r2, r2, r3
 800a4f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4f4:	b10b      	cbz	r3, 800a4fa <__sflush_r+0x42>
 800a4f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4f8:	1ad2      	subs	r2, r2, r3
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a500:	6a21      	ldr	r1, [r4, #32]
 800a502:	47b0      	blx	r6
 800a504:	1c43      	adds	r3, r0, #1
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	d106      	bne.n	800a518 <__sflush_r+0x60>
 800a50a:	6829      	ldr	r1, [r5, #0]
 800a50c:	291d      	cmp	r1, #29
 800a50e:	d82b      	bhi.n	800a568 <__sflush_r+0xb0>
 800a510:	4a28      	ldr	r2, [pc, #160]	@ (800a5b4 <__sflush_r+0xfc>)
 800a512:	410a      	asrs	r2, r1
 800a514:	07d6      	lsls	r6, r2, #31
 800a516:	d427      	bmi.n	800a568 <__sflush_r+0xb0>
 800a518:	2200      	movs	r2, #0
 800a51a:	6062      	str	r2, [r4, #4]
 800a51c:	6922      	ldr	r2, [r4, #16]
 800a51e:	04d9      	lsls	r1, r3, #19
 800a520:	6022      	str	r2, [r4, #0]
 800a522:	d504      	bpl.n	800a52e <__sflush_r+0x76>
 800a524:	1c42      	adds	r2, r0, #1
 800a526:	d101      	bne.n	800a52c <__sflush_r+0x74>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	b903      	cbnz	r3, 800a52e <__sflush_r+0x76>
 800a52c:	6560      	str	r0, [r4, #84]	@ 0x54
 800a52e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a530:	602f      	str	r7, [r5, #0]
 800a532:	b1b9      	cbz	r1, 800a564 <__sflush_r+0xac>
 800a534:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a538:	4299      	cmp	r1, r3
 800a53a:	d002      	beq.n	800a542 <__sflush_r+0x8a>
 800a53c:	4628      	mov	r0, r5
 800a53e:	f7fe fbd5 	bl	8008cec <_free_r>
 800a542:	2300      	movs	r3, #0
 800a544:	6363      	str	r3, [r4, #52]	@ 0x34
 800a546:	e00d      	b.n	800a564 <__sflush_r+0xac>
 800a548:	2301      	movs	r3, #1
 800a54a:	4628      	mov	r0, r5
 800a54c:	47b0      	blx	r6
 800a54e:	4602      	mov	r2, r0
 800a550:	1c50      	adds	r0, r2, #1
 800a552:	d1c9      	bne.n	800a4e8 <__sflush_r+0x30>
 800a554:	682b      	ldr	r3, [r5, #0]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0c6      	beq.n	800a4e8 <__sflush_r+0x30>
 800a55a:	2b1d      	cmp	r3, #29
 800a55c:	d001      	beq.n	800a562 <__sflush_r+0xaa>
 800a55e:	2b16      	cmp	r3, #22
 800a560:	d11d      	bne.n	800a59e <__sflush_r+0xe6>
 800a562:	602f      	str	r7, [r5, #0]
 800a564:	2000      	movs	r0, #0
 800a566:	e021      	b.n	800a5ac <__sflush_r+0xf4>
 800a568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a56c:	b21b      	sxth	r3, r3
 800a56e:	e01a      	b.n	800a5a6 <__sflush_r+0xee>
 800a570:	690f      	ldr	r7, [r1, #16]
 800a572:	2f00      	cmp	r7, #0
 800a574:	d0f6      	beq.n	800a564 <__sflush_r+0xac>
 800a576:	0793      	lsls	r3, r2, #30
 800a578:	bf18      	it	ne
 800a57a:	2300      	movne	r3, #0
 800a57c:	680e      	ldr	r6, [r1, #0]
 800a57e:	bf08      	it	eq
 800a580:	694b      	ldreq	r3, [r1, #20]
 800a582:	1bf6      	subs	r6, r6, r7
 800a584:	600f      	str	r7, [r1, #0]
 800a586:	608b      	str	r3, [r1, #8]
 800a588:	2e00      	cmp	r6, #0
 800a58a:	ddeb      	ble.n	800a564 <__sflush_r+0xac>
 800a58c:	4633      	mov	r3, r6
 800a58e:	463a      	mov	r2, r7
 800a590:	4628      	mov	r0, r5
 800a592:	6a21      	ldr	r1, [r4, #32]
 800a594:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a598:	47e0      	blx	ip
 800a59a:	2800      	cmp	r0, #0
 800a59c:	dc07      	bgt.n	800a5ae <__sflush_r+0xf6>
 800a59e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5aa:	81a3      	strh	r3, [r4, #12]
 800a5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5ae:	4407      	add	r7, r0
 800a5b0:	1a36      	subs	r6, r6, r0
 800a5b2:	e7e9      	b.n	800a588 <__sflush_r+0xd0>
 800a5b4:	dfbffffe 	.word	0xdfbffffe

0800a5b8 <_fflush_r>:
 800a5b8:	b538      	push	{r3, r4, r5, lr}
 800a5ba:	690b      	ldr	r3, [r1, #16]
 800a5bc:	4605      	mov	r5, r0
 800a5be:	460c      	mov	r4, r1
 800a5c0:	b913      	cbnz	r3, 800a5c8 <_fflush_r+0x10>
 800a5c2:	2500      	movs	r5, #0
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
 800a5c8:	b118      	cbz	r0, 800a5d2 <_fflush_r+0x1a>
 800a5ca:	6a03      	ldr	r3, [r0, #32]
 800a5cc:	b90b      	cbnz	r3, 800a5d2 <_fflush_r+0x1a>
 800a5ce:	f7fe f99f 	bl	8008910 <__sinit>
 800a5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0f3      	beq.n	800a5c2 <_fflush_r+0xa>
 800a5da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5dc:	07d0      	lsls	r0, r2, #31
 800a5de:	d404      	bmi.n	800a5ea <_fflush_r+0x32>
 800a5e0:	0599      	lsls	r1, r3, #22
 800a5e2:	d402      	bmi.n	800a5ea <_fflush_r+0x32>
 800a5e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5e6:	f7fe fb48 	bl	8008c7a <__retarget_lock_acquire_recursive>
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	f7ff ff63 	bl	800a4b8 <__sflush_r>
 800a5f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	07da      	lsls	r2, r3, #31
 800a5f8:	d4e4      	bmi.n	800a5c4 <_fflush_r+0xc>
 800a5fa:	89a3      	ldrh	r3, [r4, #12]
 800a5fc:	059b      	lsls	r3, r3, #22
 800a5fe:	d4e1      	bmi.n	800a5c4 <_fflush_r+0xc>
 800a600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a602:	f7fe fb3b 	bl	8008c7c <__retarget_lock_release_recursive>
 800a606:	e7dd      	b.n	800a5c4 <_fflush_r+0xc>

0800a608 <fiprintf>:
 800a608:	b40e      	push	{r1, r2, r3}
 800a60a:	b503      	push	{r0, r1, lr}
 800a60c:	4601      	mov	r1, r0
 800a60e:	ab03      	add	r3, sp, #12
 800a610:	4805      	ldr	r0, [pc, #20]	@ (800a628 <fiprintf+0x20>)
 800a612:	f853 2b04 	ldr.w	r2, [r3], #4
 800a616:	6800      	ldr	r0, [r0, #0]
 800a618:	9301      	str	r3, [sp, #4]
 800a61a:	f000 f8af 	bl	800a77c <_vfiprintf_r>
 800a61e:	b002      	add	sp, #8
 800a620:	f85d eb04 	ldr.w	lr, [sp], #4
 800a624:	b003      	add	sp, #12
 800a626:	4770      	bx	lr
 800a628:	200001c0 	.word	0x200001c0

0800a62c <memmove>:
 800a62c:	4288      	cmp	r0, r1
 800a62e:	b510      	push	{r4, lr}
 800a630:	eb01 0402 	add.w	r4, r1, r2
 800a634:	d902      	bls.n	800a63c <memmove+0x10>
 800a636:	4284      	cmp	r4, r0
 800a638:	4623      	mov	r3, r4
 800a63a:	d807      	bhi.n	800a64c <memmove+0x20>
 800a63c:	1e43      	subs	r3, r0, #1
 800a63e:	42a1      	cmp	r1, r4
 800a640:	d008      	beq.n	800a654 <memmove+0x28>
 800a642:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a64a:	e7f8      	b.n	800a63e <memmove+0x12>
 800a64c:	4601      	mov	r1, r0
 800a64e:	4402      	add	r2, r0
 800a650:	428a      	cmp	r2, r1
 800a652:	d100      	bne.n	800a656 <memmove+0x2a>
 800a654:	bd10      	pop	{r4, pc}
 800a656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a65a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a65e:	e7f7      	b.n	800a650 <memmove+0x24>

0800a660 <_sbrk_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	2300      	movs	r3, #0
 800a664:	4d05      	ldr	r5, [pc, #20]	@ (800a67c <_sbrk_r+0x1c>)
 800a666:	4604      	mov	r4, r0
 800a668:	4608      	mov	r0, r1
 800a66a:	602b      	str	r3, [r5, #0]
 800a66c:	f7f9 fb04 	bl	8003c78 <_sbrk>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_sbrk_r+0x1a>
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	b103      	cbz	r3, 800a67a <_sbrk_r+0x1a>
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	200007d4 	.word	0x200007d4

0800a680 <memchr>:
 800a680:	4603      	mov	r3, r0
 800a682:	b510      	push	{r4, lr}
 800a684:	b2c9      	uxtb	r1, r1
 800a686:	4402      	add	r2, r0
 800a688:	4293      	cmp	r3, r2
 800a68a:	4618      	mov	r0, r3
 800a68c:	d101      	bne.n	800a692 <memchr+0x12>
 800a68e:	2000      	movs	r0, #0
 800a690:	e003      	b.n	800a69a <memchr+0x1a>
 800a692:	7804      	ldrb	r4, [r0, #0]
 800a694:	3301      	adds	r3, #1
 800a696:	428c      	cmp	r4, r1
 800a698:	d1f6      	bne.n	800a688 <memchr+0x8>
 800a69a:	bd10      	pop	{r4, pc}

0800a69c <abort>:
 800a69c:	2006      	movs	r0, #6
 800a69e:	b508      	push	{r3, lr}
 800a6a0:	f000 fa40 	bl	800ab24 <raise>
 800a6a4:	2001      	movs	r0, #1
 800a6a6:	f7f9 fa72 	bl	8003b8e <_exit>

0800a6aa <_calloc_r>:
 800a6aa:	b570      	push	{r4, r5, r6, lr}
 800a6ac:	fba1 5402 	umull	r5, r4, r1, r2
 800a6b0:	b93c      	cbnz	r4, 800a6c2 <_calloc_r+0x18>
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	f7fe fec6 	bl	8009444 <_malloc_r>
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	b928      	cbnz	r0, 800a6c8 <_calloc_r+0x1e>
 800a6bc:	2600      	movs	r6, #0
 800a6be:	4630      	mov	r0, r6
 800a6c0:	bd70      	pop	{r4, r5, r6, pc}
 800a6c2:	220c      	movs	r2, #12
 800a6c4:	6002      	str	r2, [r0, #0]
 800a6c6:	e7f9      	b.n	800a6bc <_calloc_r+0x12>
 800a6c8:	462a      	mov	r2, r5
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	f7fe f9ed 	bl	8008aaa <memset>
 800a6d0:	e7f5      	b.n	800a6be <_calloc_r+0x14>

0800a6d2 <_realloc_r>:
 800a6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d6:	4680      	mov	r8, r0
 800a6d8:	4615      	mov	r5, r2
 800a6da:	460c      	mov	r4, r1
 800a6dc:	b921      	cbnz	r1, 800a6e8 <_realloc_r+0x16>
 800a6de:	4611      	mov	r1, r2
 800a6e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e4:	f7fe beae 	b.w	8009444 <_malloc_r>
 800a6e8:	b92a      	cbnz	r2, 800a6f6 <_realloc_r+0x24>
 800a6ea:	f7fe faff 	bl	8008cec <_free_r>
 800a6ee:	2400      	movs	r4, #0
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f6:	f000 fa31 	bl	800ab5c <_malloc_usable_size_r>
 800a6fa:	4285      	cmp	r5, r0
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	d802      	bhi.n	800a706 <_realloc_r+0x34>
 800a700:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a704:	d8f4      	bhi.n	800a6f0 <_realloc_r+0x1e>
 800a706:	4629      	mov	r1, r5
 800a708:	4640      	mov	r0, r8
 800a70a:	f7fe fe9b 	bl	8009444 <_malloc_r>
 800a70e:	4607      	mov	r7, r0
 800a710:	2800      	cmp	r0, #0
 800a712:	d0ec      	beq.n	800a6ee <_realloc_r+0x1c>
 800a714:	42b5      	cmp	r5, r6
 800a716:	462a      	mov	r2, r5
 800a718:	4621      	mov	r1, r4
 800a71a:	bf28      	it	cs
 800a71c:	4632      	movcs	r2, r6
 800a71e:	f7fe faae 	bl	8008c7e <memcpy>
 800a722:	4621      	mov	r1, r4
 800a724:	4640      	mov	r0, r8
 800a726:	f7fe fae1 	bl	8008cec <_free_r>
 800a72a:	463c      	mov	r4, r7
 800a72c:	e7e0      	b.n	800a6f0 <_realloc_r+0x1e>

0800a72e <__sfputc_r>:
 800a72e:	6893      	ldr	r3, [r2, #8]
 800a730:	b410      	push	{r4}
 800a732:	3b01      	subs	r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	6093      	str	r3, [r2, #8]
 800a738:	da07      	bge.n	800a74a <__sfputc_r+0x1c>
 800a73a:	6994      	ldr	r4, [r2, #24]
 800a73c:	42a3      	cmp	r3, r4
 800a73e:	db01      	blt.n	800a744 <__sfputc_r+0x16>
 800a740:	290a      	cmp	r1, #10
 800a742:	d102      	bne.n	800a74a <__sfputc_r+0x1c>
 800a744:	bc10      	pop	{r4}
 800a746:	f000 b931 	b.w	800a9ac <__swbuf_r>
 800a74a:	6813      	ldr	r3, [r2, #0]
 800a74c:	1c58      	adds	r0, r3, #1
 800a74e:	6010      	str	r0, [r2, #0]
 800a750:	7019      	strb	r1, [r3, #0]
 800a752:	4608      	mov	r0, r1
 800a754:	bc10      	pop	{r4}
 800a756:	4770      	bx	lr

0800a758 <__sfputs_r>:
 800a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75a:	4606      	mov	r6, r0
 800a75c:	460f      	mov	r7, r1
 800a75e:	4614      	mov	r4, r2
 800a760:	18d5      	adds	r5, r2, r3
 800a762:	42ac      	cmp	r4, r5
 800a764:	d101      	bne.n	800a76a <__sfputs_r+0x12>
 800a766:	2000      	movs	r0, #0
 800a768:	e007      	b.n	800a77a <__sfputs_r+0x22>
 800a76a:	463a      	mov	r2, r7
 800a76c:	4630      	mov	r0, r6
 800a76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a772:	f7ff ffdc 	bl	800a72e <__sfputc_r>
 800a776:	1c43      	adds	r3, r0, #1
 800a778:	d1f3      	bne.n	800a762 <__sfputs_r+0xa>
 800a77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a77c <_vfiprintf_r>:
 800a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	460d      	mov	r5, r1
 800a782:	4614      	mov	r4, r2
 800a784:	4698      	mov	r8, r3
 800a786:	4606      	mov	r6, r0
 800a788:	b09d      	sub	sp, #116	@ 0x74
 800a78a:	b118      	cbz	r0, 800a794 <_vfiprintf_r+0x18>
 800a78c:	6a03      	ldr	r3, [r0, #32]
 800a78e:	b90b      	cbnz	r3, 800a794 <_vfiprintf_r+0x18>
 800a790:	f7fe f8be 	bl	8008910 <__sinit>
 800a794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a796:	07d9      	lsls	r1, r3, #31
 800a798:	d405      	bmi.n	800a7a6 <_vfiprintf_r+0x2a>
 800a79a:	89ab      	ldrh	r3, [r5, #12]
 800a79c:	059a      	lsls	r2, r3, #22
 800a79e:	d402      	bmi.n	800a7a6 <_vfiprintf_r+0x2a>
 800a7a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7a2:	f7fe fa6a 	bl	8008c7a <__retarget_lock_acquire_recursive>
 800a7a6:	89ab      	ldrh	r3, [r5, #12]
 800a7a8:	071b      	lsls	r3, r3, #28
 800a7aa:	d501      	bpl.n	800a7b0 <_vfiprintf_r+0x34>
 800a7ac:	692b      	ldr	r3, [r5, #16]
 800a7ae:	b99b      	cbnz	r3, 800a7d8 <_vfiprintf_r+0x5c>
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f000 f938 	bl	800aa28 <__swsetup_r>
 800a7b8:	b170      	cbz	r0, 800a7d8 <_vfiprintf_r+0x5c>
 800a7ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7bc:	07dc      	lsls	r4, r3, #31
 800a7be:	d504      	bpl.n	800a7ca <_vfiprintf_r+0x4e>
 800a7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c4:	b01d      	add	sp, #116	@ 0x74
 800a7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ca:	89ab      	ldrh	r3, [r5, #12]
 800a7cc:	0598      	lsls	r0, r3, #22
 800a7ce:	d4f7      	bmi.n	800a7c0 <_vfiprintf_r+0x44>
 800a7d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7d2:	f7fe fa53 	bl	8008c7c <__retarget_lock_release_recursive>
 800a7d6:	e7f3      	b.n	800a7c0 <_vfiprintf_r+0x44>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7dc:	2320      	movs	r3, #32
 800a7de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7e2:	2330      	movs	r3, #48	@ 0x30
 800a7e4:	f04f 0901 	mov.w	r9, #1
 800a7e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ec:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a998 <_vfiprintf_r+0x21c>
 800a7f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7f4:	4623      	mov	r3, r4
 800a7f6:	469a      	mov	sl, r3
 800a7f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7fc:	b10a      	cbz	r2, 800a802 <_vfiprintf_r+0x86>
 800a7fe:	2a25      	cmp	r2, #37	@ 0x25
 800a800:	d1f9      	bne.n	800a7f6 <_vfiprintf_r+0x7a>
 800a802:	ebba 0b04 	subs.w	fp, sl, r4
 800a806:	d00b      	beq.n	800a820 <_vfiprintf_r+0xa4>
 800a808:	465b      	mov	r3, fp
 800a80a:	4622      	mov	r2, r4
 800a80c:	4629      	mov	r1, r5
 800a80e:	4630      	mov	r0, r6
 800a810:	f7ff ffa2 	bl	800a758 <__sfputs_r>
 800a814:	3001      	adds	r0, #1
 800a816:	f000 80a7 	beq.w	800a968 <_vfiprintf_r+0x1ec>
 800a81a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a81c:	445a      	add	r2, fp
 800a81e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a820:	f89a 3000 	ldrb.w	r3, [sl]
 800a824:	2b00      	cmp	r3, #0
 800a826:	f000 809f 	beq.w	800a968 <_vfiprintf_r+0x1ec>
 800a82a:	2300      	movs	r3, #0
 800a82c:	f04f 32ff 	mov.w	r2, #4294967295
 800a830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a834:	f10a 0a01 	add.w	sl, sl, #1
 800a838:	9304      	str	r3, [sp, #16]
 800a83a:	9307      	str	r3, [sp, #28]
 800a83c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a840:	931a      	str	r3, [sp, #104]	@ 0x68
 800a842:	4654      	mov	r4, sl
 800a844:	2205      	movs	r2, #5
 800a846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a84a:	4853      	ldr	r0, [pc, #332]	@ (800a998 <_vfiprintf_r+0x21c>)
 800a84c:	f7ff ff18 	bl	800a680 <memchr>
 800a850:	9a04      	ldr	r2, [sp, #16]
 800a852:	b9d8      	cbnz	r0, 800a88c <_vfiprintf_r+0x110>
 800a854:	06d1      	lsls	r1, r2, #27
 800a856:	bf44      	itt	mi
 800a858:	2320      	movmi	r3, #32
 800a85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a85e:	0713      	lsls	r3, r2, #28
 800a860:	bf44      	itt	mi
 800a862:	232b      	movmi	r3, #43	@ 0x2b
 800a864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a868:	f89a 3000 	ldrb.w	r3, [sl]
 800a86c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a86e:	d015      	beq.n	800a89c <_vfiprintf_r+0x120>
 800a870:	4654      	mov	r4, sl
 800a872:	2000      	movs	r0, #0
 800a874:	f04f 0c0a 	mov.w	ip, #10
 800a878:	9a07      	ldr	r2, [sp, #28]
 800a87a:	4621      	mov	r1, r4
 800a87c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a880:	3b30      	subs	r3, #48	@ 0x30
 800a882:	2b09      	cmp	r3, #9
 800a884:	d94b      	bls.n	800a91e <_vfiprintf_r+0x1a2>
 800a886:	b1b0      	cbz	r0, 800a8b6 <_vfiprintf_r+0x13a>
 800a888:	9207      	str	r2, [sp, #28]
 800a88a:	e014      	b.n	800a8b6 <_vfiprintf_r+0x13a>
 800a88c:	eba0 0308 	sub.w	r3, r0, r8
 800a890:	fa09 f303 	lsl.w	r3, r9, r3
 800a894:	4313      	orrs	r3, r2
 800a896:	46a2      	mov	sl, r4
 800a898:	9304      	str	r3, [sp, #16]
 800a89a:	e7d2      	b.n	800a842 <_vfiprintf_r+0xc6>
 800a89c:	9b03      	ldr	r3, [sp, #12]
 800a89e:	1d19      	adds	r1, r3, #4
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	9103      	str	r1, [sp, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	bfbb      	ittet	lt
 800a8a8:	425b      	neglt	r3, r3
 800a8aa:	f042 0202 	orrlt.w	r2, r2, #2
 800a8ae:	9307      	strge	r3, [sp, #28]
 800a8b0:	9307      	strlt	r3, [sp, #28]
 800a8b2:	bfb8      	it	lt
 800a8b4:	9204      	strlt	r2, [sp, #16]
 800a8b6:	7823      	ldrb	r3, [r4, #0]
 800a8b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8ba:	d10a      	bne.n	800a8d2 <_vfiprintf_r+0x156>
 800a8bc:	7863      	ldrb	r3, [r4, #1]
 800a8be:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8c0:	d132      	bne.n	800a928 <_vfiprintf_r+0x1ac>
 800a8c2:	9b03      	ldr	r3, [sp, #12]
 800a8c4:	3402      	adds	r4, #2
 800a8c6:	1d1a      	adds	r2, r3, #4
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	9203      	str	r2, [sp, #12]
 800a8cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8d0:	9305      	str	r3, [sp, #20]
 800a8d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a99c <_vfiprintf_r+0x220>
 800a8d6:	2203      	movs	r2, #3
 800a8d8:	4650      	mov	r0, sl
 800a8da:	7821      	ldrb	r1, [r4, #0]
 800a8dc:	f7ff fed0 	bl	800a680 <memchr>
 800a8e0:	b138      	cbz	r0, 800a8f2 <_vfiprintf_r+0x176>
 800a8e2:	2240      	movs	r2, #64	@ 0x40
 800a8e4:	9b04      	ldr	r3, [sp, #16]
 800a8e6:	eba0 000a 	sub.w	r0, r0, sl
 800a8ea:	4082      	lsls	r2, r0
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	3401      	adds	r4, #1
 800a8f0:	9304      	str	r3, [sp, #16]
 800a8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8f6:	2206      	movs	r2, #6
 800a8f8:	4829      	ldr	r0, [pc, #164]	@ (800a9a0 <_vfiprintf_r+0x224>)
 800a8fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8fe:	f7ff febf 	bl	800a680 <memchr>
 800a902:	2800      	cmp	r0, #0
 800a904:	d03f      	beq.n	800a986 <_vfiprintf_r+0x20a>
 800a906:	4b27      	ldr	r3, [pc, #156]	@ (800a9a4 <_vfiprintf_r+0x228>)
 800a908:	bb1b      	cbnz	r3, 800a952 <_vfiprintf_r+0x1d6>
 800a90a:	9b03      	ldr	r3, [sp, #12]
 800a90c:	3307      	adds	r3, #7
 800a90e:	f023 0307 	bic.w	r3, r3, #7
 800a912:	3308      	adds	r3, #8
 800a914:	9303      	str	r3, [sp, #12]
 800a916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a918:	443b      	add	r3, r7
 800a91a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a91c:	e76a      	b.n	800a7f4 <_vfiprintf_r+0x78>
 800a91e:	460c      	mov	r4, r1
 800a920:	2001      	movs	r0, #1
 800a922:	fb0c 3202 	mla	r2, ip, r2, r3
 800a926:	e7a8      	b.n	800a87a <_vfiprintf_r+0xfe>
 800a928:	2300      	movs	r3, #0
 800a92a:	f04f 0c0a 	mov.w	ip, #10
 800a92e:	4619      	mov	r1, r3
 800a930:	3401      	adds	r4, #1
 800a932:	9305      	str	r3, [sp, #20]
 800a934:	4620      	mov	r0, r4
 800a936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a93a:	3a30      	subs	r2, #48	@ 0x30
 800a93c:	2a09      	cmp	r2, #9
 800a93e:	d903      	bls.n	800a948 <_vfiprintf_r+0x1cc>
 800a940:	2b00      	cmp	r3, #0
 800a942:	d0c6      	beq.n	800a8d2 <_vfiprintf_r+0x156>
 800a944:	9105      	str	r1, [sp, #20]
 800a946:	e7c4      	b.n	800a8d2 <_vfiprintf_r+0x156>
 800a948:	4604      	mov	r4, r0
 800a94a:	2301      	movs	r3, #1
 800a94c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a950:	e7f0      	b.n	800a934 <_vfiprintf_r+0x1b8>
 800a952:	ab03      	add	r3, sp, #12
 800a954:	9300      	str	r3, [sp, #0]
 800a956:	462a      	mov	r2, r5
 800a958:	4630      	mov	r0, r6
 800a95a:	4b13      	ldr	r3, [pc, #76]	@ (800a9a8 <_vfiprintf_r+0x22c>)
 800a95c:	a904      	add	r1, sp, #16
 800a95e:	f3af 8000 	nop.w
 800a962:	4607      	mov	r7, r0
 800a964:	1c78      	adds	r0, r7, #1
 800a966:	d1d6      	bne.n	800a916 <_vfiprintf_r+0x19a>
 800a968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a96a:	07d9      	lsls	r1, r3, #31
 800a96c:	d405      	bmi.n	800a97a <_vfiprintf_r+0x1fe>
 800a96e:	89ab      	ldrh	r3, [r5, #12]
 800a970:	059a      	lsls	r2, r3, #22
 800a972:	d402      	bmi.n	800a97a <_vfiprintf_r+0x1fe>
 800a974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a976:	f7fe f981 	bl	8008c7c <__retarget_lock_release_recursive>
 800a97a:	89ab      	ldrh	r3, [r5, #12]
 800a97c:	065b      	lsls	r3, r3, #25
 800a97e:	f53f af1f 	bmi.w	800a7c0 <_vfiprintf_r+0x44>
 800a982:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a984:	e71e      	b.n	800a7c4 <_vfiprintf_r+0x48>
 800a986:	ab03      	add	r3, sp, #12
 800a988:	9300      	str	r3, [sp, #0]
 800a98a:	462a      	mov	r2, r5
 800a98c:	4630      	mov	r0, r6
 800a98e:	4b06      	ldr	r3, [pc, #24]	@ (800a9a8 <_vfiprintf_r+0x22c>)
 800a990:	a904      	add	r1, sp, #16
 800a992:	f7ff fc71 	bl	800a278 <_printf_i>
 800a996:	e7e4      	b.n	800a962 <_vfiprintf_r+0x1e6>
 800a998:	0800c6b0 	.word	0x0800c6b0
 800a99c:	0800c6b6 	.word	0x0800c6b6
 800a9a0:	0800c6ba 	.word	0x0800c6ba
 800a9a4:	00000000 	.word	0x00000000
 800a9a8:	0800a759 	.word	0x0800a759

0800a9ac <__swbuf_r>:
 800a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ae:	460e      	mov	r6, r1
 800a9b0:	4614      	mov	r4, r2
 800a9b2:	4605      	mov	r5, r0
 800a9b4:	b118      	cbz	r0, 800a9be <__swbuf_r+0x12>
 800a9b6:	6a03      	ldr	r3, [r0, #32]
 800a9b8:	b90b      	cbnz	r3, 800a9be <__swbuf_r+0x12>
 800a9ba:	f7fd ffa9 	bl	8008910 <__sinit>
 800a9be:	69a3      	ldr	r3, [r4, #24]
 800a9c0:	60a3      	str	r3, [r4, #8]
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	071a      	lsls	r2, r3, #28
 800a9c6:	d501      	bpl.n	800a9cc <__swbuf_r+0x20>
 800a9c8:	6923      	ldr	r3, [r4, #16]
 800a9ca:	b943      	cbnz	r3, 800a9de <__swbuf_r+0x32>
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	f000 f82a 	bl	800aa28 <__swsetup_r>
 800a9d4:	b118      	cbz	r0, 800a9de <__swbuf_r+0x32>
 800a9d6:	f04f 37ff 	mov.w	r7, #4294967295
 800a9da:	4638      	mov	r0, r7
 800a9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	6922      	ldr	r2, [r4, #16]
 800a9e2:	b2f6      	uxtb	r6, r6
 800a9e4:	1a98      	subs	r0, r3, r2
 800a9e6:	6963      	ldr	r3, [r4, #20]
 800a9e8:	4637      	mov	r7, r6
 800a9ea:	4283      	cmp	r3, r0
 800a9ec:	dc05      	bgt.n	800a9fa <__swbuf_r+0x4e>
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f7ff fde1 	bl	800a5b8 <_fflush_r>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	d1ed      	bne.n	800a9d6 <__swbuf_r+0x2a>
 800a9fa:	68a3      	ldr	r3, [r4, #8]
 800a9fc:	3b01      	subs	r3, #1
 800a9fe:	60a3      	str	r3, [r4, #8]
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	1c5a      	adds	r2, r3, #1
 800aa04:	6022      	str	r2, [r4, #0]
 800aa06:	701e      	strb	r6, [r3, #0]
 800aa08:	6962      	ldr	r2, [r4, #20]
 800aa0a:	1c43      	adds	r3, r0, #1
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d004      	beq.n	800aa1a <__swbuf_r+0x6e>
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	07db      	lsls	r3, r3, #31
 800aa14:	d5e1      	bpl.n	800a9da <__swbuf_r+0x2e>
 800aa16:	2e0a      	cmp	r6, #10
 800aa18:	d1df      	bne.n	800a9da <__swbuf_r+0x2e>
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	f7ff fdcb 	bl	800a5b8 <_fflush_r>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d0d9      	beq.n	800a9da <__swbuf_r+0x2e>
 800aa26:	e7d6      	b.n	800a9d6 <__swbuf_r+0x2a>

0800aa28 <__swsetup_r>:
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	4b29      	ldr	r3, [pc, #164]	@ (800aad0 <__swsetup_r+0xa8>)
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	6818      	ldr	r0, [r3, #0]
 800aa30:	460c      	mov	r4, r1
 800aa32:	b118      	cbz	r0, 800aa3c <__swsetup_r+0x14>
 800aa34:	6a03      	ldr	r3, [r0, #32]
 800aa36:	b90b      	cbnz	r3, 800aa3c <__swsetup_r+0x14>
 800aa38:	f7fd ff6a 	bl	8008910 <__sinit>
 800aa3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa40:	0719      	lsls	r1, r3, #28
 800aa42:	d422      	bmi.n	800aa8a <__swsetup_r+0x62>
 800aa44:	06da      	lsls	r2, r3, #27
 800aa46:	d407      	bmi.n	800aa58 <__swsetup_r+0x30>
 800aa48:	2209      	movs	r2, #9
 800aa4a:	602a      	str	r2, [r5, #0]
 800aa4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	81a3      	strh	r3, [r4, #12]
 800aa56:	e033      	b.n	800aac0 <__swsetup_r+0x98>
 800aa58:	0758      	lsls	r0, r3, #29
 800aa5a:	d512      	bpl.n	800aa82 <__swsetup_r+0x5a>
 800aa5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa5e:	b141      	cbz	r1, 800aa72 <__swsetup_r+0x4a>
 800aa60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa64:	4299      	cmp	r1, r3
 800aa66:	d002      	beq.n	800aa6e <__swsetup_r+0x46>
 800aa68:	4628      	mov	r0, r5
 800aa6a:	f7fe f93f 	bl	8008cec <_free_r>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa72:	89a3      	ldrh	r3, [r4, #12]
 800aa74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aa78:	81a3      	strh	r3, [r4, #12]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	6063      	str	r3, [r4, #4]
 800aa7e:	6923      	ldr	r3, [r4, #16]
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	89a3      	ldrh	r3, [r4, #12]
 800aa84:	f043 0308 	orr.w	r3, r3, #8
 800aa88:	81a3      	strh	r3, [r4, #12]
 800aa8a:	6923      	ldr	r3, [r4, #16]
 800aa8c:	b94b      	cbnz	r3, 800aaa2 <__swsetup_r+0x7a>
 800aa8e:	89a3      	ldrh	r3, [r4, #12]
 800aa90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aa94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa98:	d003      	beq.n	800aaa2 <__swsetup_r+0x7a>
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	f000 f88a 	bl	800abb6 <__smakebuf_r>
 800aaa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaa6:	f013 0201 	ands.w	r2, r3, #1
 800aaaa:	d00a      	beq.n	800aac2 <__swsetup_r+0x9a>
 800aaac:	2200      	movs	r2, #0
 800aaae:	60a2      	str	r2, [r4, #8]
 800aab0:	6962      	ldr	r2, [r4, #20]
 800aab2:	4252      	negs	r2, r2
 800aab4:	61a2      	str	r2, [r4, #24]
 800aab6:	6922      	ldr	r2, [r4, #16]
 800aab8:	b942      	cbnz	r2, 800aacc <__swsetup_r+0xa4>
 800aaba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aabe:	d1c5      	bne.n	800aa4c <__swsetup_r+0x24>
 800aac0:	bd38      	pop	{r3, r4, r5, pc}
 800aac2:	0799      	lsls	r1, r3, #30
 800aac4:	bf58      	it	pl
 800aac6:	6962      	ldrpl	r2, [r4, #20]
 800aac8:	60a2      	str	r2, [r4, #8]
 800aaca:	e7f4      	b.n	800aab6 <__swsetup_r+0x8e>
 800aacc:	2000      	movs	r0, #0
 800aace:	e7f7      	b.n	800aac0 <__swsetup_r+0x98>
 800aad0:	200001c0 	.word	0x200001c0

0800aad4 <_raise_r>:
 800aad4:	291f      	cmp	r1, #31
 800aad6:	b538      	push	{r3, r4, r5, lr}
 800aad8:	4605      	mov	r5, r0
 800aada:	460c      	mov	r4, r1
 800aadc:	d904      	bls.n	800aae8 <_raise_r+0x14>
 800aade:	2316      	movs	r3, #22
 800aae0:	6003      	str	r3, [r0, #0]
 800aae2:	f04f 30ff 	mov.w	r0, #4294967295
 800aae6:	bd38      	pop	{r3, r4, r5, pc}
 800aae8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aaea:	b112      	cbz	r2, 800aaf2 <_raise_r+0x1e>
 800aaec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aaf0:	b94b      	cbnz	r3, 800ab06 <_raise_r+0x32>
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f000 f830 	bl	800ab58 <_getpid_r>
 800aaf8:	4622      	mov	r2, r4
 800aafa:	4601      	mov	r1, r0
 800aafc:	4628      	mov	r0, r5
 800aafe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab02:	f000 b817 	b.w	800ab34 <_kill_r>
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d00a      	beq.n	800ab20 <_raise_r+0x4c>
 800ab0a:	1c59      	adds	r1, r3, #1
 800ab0c:	d103      	bne.n	800ab16 <_raise_r+0x42>
 800ab0e:	2316      	movs	r3, #22
 800ab10:	6003      	str	r3, [r0, #0]
 800ab12:	2001      	movs	r0, #1
 800ab14:	e7e7      	b.n	800aae6 <_raise_r+0x12>
 800ab16:	2100      	movs	r1, #0
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab1e:	4798      	blx	r3
 800ab20:	2000      	movs	r0, #0
 800ab22:	e7e0      	b.n	800aae6 <_raise_r+0x12>

0800ab24 <raise>:
 800ab24:	4b02      	ldr	r3, [pc, #8]	@ (800ab30 <raise+0xc>)
 800ab26:	4601      	mov	r1, r0
 800ab28:	6818      	ldr	r0, [r3, #0]
 800ab2a:	f7ff bfd3 	b.w	800aad4 <_raise_r>
 800ab2e:	bf00      	nop
 800ab30:	200001c0 	.word	0x200001c0

0800ab34 <_kill_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	2300      	movs	r3, #0
 800ab38:	4d06      	ldr	r5, [pc, #24]	@ (800ab54 <_kill_r+0x20>)
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	4611      	mov	r1, r2
 800ab40:	602b      	str	r3, [r5, #0]
 800ab42:	f7f9 f814 	bl	8003b6e <_kill>
 800ab46:	1c43      	adds	r3, r0, #1
 800ab48:	d102      	bne.n	800ab50 <_kill_r+0x1c>
 800ab4a:	682b      	ldr	r3, [r5, #0]
 800ab4c:	b103      	cbz	r3, 800ab50 <_kill_r+0x1c>
 800ab4e:	6023      	str	r3, [r4, #0]
 800ab50:	bd38      	pop	{r3, r4, r5, pc}
 800ab52:	bf00      	nop
 800ab54:	200007d4 	.word	0x200007d4

0800ab58 <_getpid_r>:
 800ab58:	f7f9 b802 	b.w	8003b60 <_getpid>

0800ab5c <_malloc_usable_size_r>:
 800ab5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab60:	1f18      	subs	r0, r3, #4
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	bfbc      	itt	lt
 800ab66:	580b      	ldrlt	r3, [r1, r0]
 800ab68:	18c0      	addlt	r0, r0, r3
 800ab6a:	4770      	bx	lr

0800ab6c <__swhatbuf_r>:
 800ab6c:	b570      	push	{r4, r5, r6, lr}
 800ab6e:	460c      	mov	r4, r1
 800ab70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab74:	4615      	mov	r5, r2
 800ab76:	2900      	cmp	r1, #0
 800ab78:	461e      	mov	r6, r3
 800ab7a:	b096      	sub	sp, #88	@ 0x58
 800ab7c:	da0c      	bge.n	800ab98 <__swhatbuf_r+0x2c>
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	2100      	movs	r1, #0
 800ab82:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab86:	bf14      	ite	ne
 800ab88:	2340      	movne	r3, #64	@ 0x40
 800ab8a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab8e:	2000      	movs	r0, #0
 800ab90:	6031      	str	r1, [r6, #0]
 800ab92:	602b      	str	r3, [r5, #0]
 800ab94:	b016      	add	sp, #88	@ 0x58
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	466a      	mov	r2, sp
 800ab9a:	f000 f849 	bl	800ac30 <_fstat_r>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	dbed      	blt.n	800ab7e <__swhatbuf_r+0x12>
 800aba2:	9901      	ldr	r1, [sp, #4]
 800aba4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aba8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800abac:	4259      	negs	r1, r3
 800abae:	4159      	adcs	r1, r3
 800abb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abb4:	e7eb      	b.n	800ab8e <__swhatbuf_r+0x22>

0800abb6 <__smakebuf_r>:
 800abb6:	898b      	ldrh	r3, [r1, #12]
 800abb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abba:	079d      	lsls	r5, r3, #30
 800abbc:	4606      	mov	r6, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	d507      	bpl.n	800abd2 <__smakebuf_r+0x1c>
 800abc2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800abc6:	6023      	str	r3, [r4, #0]
 800abc8:	6123      	str	r3, [r4, #16]
 800abca:	2301      	movs	r3, #1
 800abcc:	6163      	str	r3, [r4, #20]
 800abce:	b003      	add	sp, #12
 800abd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd2:	466a      	mov	r2, sp
 800abd4:	ab01      	add	r3, sp, #4
 800abd6:	f7ff ffc9 	bl	800ab6c <__swhatbuf_r>
 800abda:	9f00      	ldr	r7, [sp, #0]
 800abdc:	4605      	mov	r5, r0
 800abde:	4639      	mov	r1, r7
 800abe0:	4630      	mov	r0, r6
 800abe2:	f7fe fc2f 	bl	8009444 <_malloc_r>
 800abe6:	b948      	cbnz	r0, 800abfc <__smakebuf_r+0x46>
 800abe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abec:	059a      	lsls	r2, r3, #22
 800abee:	d4ee      	bmi.n	800abce <__smakebuf_r+0x18>
 800abf0:	f023 0303 	bic.w	r3, r3, #3
 800abf4:	f043 0302 	orr.w	r3, r3, #2
 800abf8:	81a3      	strh	r3, [r4, #12]
 800abfa:	e7e2      	b.n	800abc2 <__smakebuf_r+0xc>
 800abfc:	89a3      	ldrh	r3, [r4, #12]
 800abfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac06:	81a3      	strh	r3, [r4, #12]
 800ac08:	9b01      	ldr	r3, [sp, #4]
 800ac0a:	6020      	str	r0, [r4, #0]
 800ac0c:	b15b      	cbz	r3, 800ac26 <__smakebuf_r+0x70>
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac14:	f000 f81e 	bl	800ac54 <_isatty_r>
 800ac18:	b128      	cbz	r0, 800ac26 <__smakebuf_r+0x70>
 800ac1a:	89a3      	ldrh	r3, [r4, #12]
 800ac1c:	f023 0303 	bic.w	r3, r3, #3
 800ac20:	f043 0301 	orr.w	r3, r3, #1
 800ac24:	81a3      	strh	r3, [r4, #12]
 800ac26:	89a3      	ldrh	r3, [r4, #12]
 800ac28:	431d      	orrs	r5, r3
 800ac2a:	81a5      	strh	r5, [r4, #12]
 800ac2c:	e7cf      	b.n	800abce <__smakebuf_r+0x18>
	...

0800ac30 <_fstat_r>:
 800ac30:	b538      	push	{r3, r4, r5, lr}
 800ac32:	2300      	movs	r3, #0
 800ac34:	4d06      	ldr	r5, [pc, #24]	@ (800ac50 <_fstat_r+0x20>)
 800ac36:	4604      	mov	r4, r0
 800ac38:	4608      	mov	r0, r1
 800ac3a:	4611      	mov	r1, r2
 800ac3c:	602b      	str	r3, [r5, #0]
 800ac3e:	f7f8 fff5 	bl	8003c2c <_fstat>
 800ac42:	1c43      	adds	r3, r0, #1
 800ac44:	d102      	bne.n	800ac4c <_fstat_r+0x1c>
 800ac46:	682b      	ldr	r3, [r5, #0]
 800ac48:	b103      	cbz	r3, 800ac4c <_fstat_r+0x1c>
 800ac4a:	6023      	str	r3, [r4, #0]
 800ac4c:	bd38      	pop	{r3, r4, r5, pc}
 800ac4e:	bf00      	nop
 800ac50:	200007d4 	.word	0x200007d4

0800ac54 <_isatty_r>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	2300      	movs	r3, #0
 800ac58:	4d05      	ldr	r5, [pc, #20]	@ (800ac70 <_isatty_r+0x1c>)
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	4608      	mov	r0, r1
 800ac5e:	602b      	str	r3, [r5, #0]
 800ac60:	f7f8 fff3 	bl	8003c4a <_isatty>
 800ac64:	1c43      	adds	r3, r0, #1
 800ac66:	d102      	bne.n	800ac6e <_isatty_r+0x1a>
 800ac68:	682b      	ldr	r3, [r5, #0]
 800ac6a:	b103      	cbz	r3, 800ac6e <_isatty_r+0x1a>
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	bd38      	pop	{r3, r4, r5, pc}
 800ac70:	200007d4 	.word	0x200007d4

0800ac74 <atan2>:
 800ac74:	f000 b968 	b.w	800af48 <__ieee754_atan2>

0800ac78 <pow>:
 800ac78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac7c:	4614      	mov	r4, r2
 800ac7e:	461d      	mov	r5, r3
 800ac80:	4680      	mov	r8, r0
 800ac82:	4689      	mov	r9, r1
 800ac84:	f000 fa34 	bl	800b0f0 <__ieee754_pow>
 800ac88:	4622      	mov	r2, r4
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	460f      	mov	r7, r1
 800ac8e:	462b      	mov	r3, r5
 800ac90:	4620      	mov	r0, r4
 800ac92:	4629      	mov	r1, r5
 800ac94:	f7f5 febc 	bl	8000a10 <__aeabi_dcmpun>
 800ac98:	bbc8      	cbnz	r0, 800ad0e <pow+0x96>
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	4640      	mov	r0, r8
 800aca0:	4649      	mov	r1, r9
 800aca2:	f7f5 fe83 	bl	80009ac <__aeabi_dcmpeq>
 800aca6:	b1b8      	cbz	r0, 800acd8 <pow+0x60>
 800aca8:	2200      	movs	r2, #0
 800acaa:	2300      	movs	r3, #0
 800acac:	4620      	mov	r0, r4
 800acae:	4629      	mov	r1, r5
 800acb0:	f7f5 fe7c 	bl	80009ac <__aeabi_dcmpeq>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d141      	bne.n	800ad3c <pow+0xc4>
 800acb8:	4620      	mov	r0, r4
 800acba:	4629      	mov	r1, r5
 800acbc:	f000 f868 	bl	800ad90 <finite>
 800acc0:	b328      	cbz	r0, 800ad0e <pow+0x96>
 800acc2:	2200      	movs	r2, #0
 800acc4:	2300      	movs	r3, #0
 800acc6:	4620      	mov	r0, r4
 800acc8:	4629      	mov	r1, r5
 800acca:	f7f5 fe79 	bl	80009c0 <__aeabi_dcmplt>
 800acce:	b1f0      	cbz	r0, 800ad0e <pow+0x96>
 800acd0:	f7fd ffa8 	bl	8008c24 <__errno>
 800acd4:	2322      	movs	r3, #34	@ 0x22
 800acd6:	e019      	b.n	800ad0c <pow+0x94>
 800acd8:	4630      	mov	r0, r6
 800acda:	4639      	mov	r1, r7
 800acdc:	f000 f858 	bl	800ad90 <finite>
 800ace0:	b9c8      	cbnz	r0, 800ad16 <pow+0x9e>
 800ace2:	4640      	mov	r0, r8
 800ace4:	4649      	mov	r1, r9
 800ace6:	f000 f853 	bl	800ad90 <finite>
 800acea:	b1a0      	cbz	r0, 800ad16 <pow+0x9e>
 800acec:	4620      	mov	r0, r4
 800acee:	4629      	mov	r1, r5
 800acf0:	f000 f84e 	bl	800ad90 <finite>
 800acf4:	b178      	cbz	r0, 800ad16 <pow+0x9e>
 800acf6:	4632      	mov	r2, r6
 800acf8:	463b      	mov	r3, r7
 800acfa:	4630      	mov	r0, r6
 800acfc:	4639      	mov	r1, r7
 800acfe:	f7f5 fe87 	bl	8000a10 <__aeabi_dcmpun>
 800ad02:	2800      	cmp	r0, #0
 800ad04:	d0e4      	beq.n	800acd0 <pow+0x58>
 800ad06:	f7fd ff8d 	bl	8008c24 <__errno>
 800ad0a:	2321      	movs	r3, #33	@ 0x21
 800ad0c:	6003      	str	r3, [r0, #0]
 800ad0e:	4630      	mov	r0, r6
 800ad10:	4639      	mov	r1, r7
 800ad12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad16:	2200      	movs	r2, #0
 800ad18:	2300      	movs	r3, #0
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	4639      	mov	r1, r7
 800ad1e:	f7f5 fe45 	bl	80009ac <__aeabi_dcmpeq>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d0f3      	beq.n	800ad0e <pow+0x96>
 800ad26:	4640      	mov	r0, r8
 800ad28:	4649      	mov	r1, r9
 800ad2a:	f000 f831 	bl	800ad90 <finite>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d0ed      	beq.n	800ad0e <pow+0x96>
 800ad32:	4620      	mov	r0, r4
 800ad34:	4629      	mov	r1, r5
 800ad36:	f000 f82b 	bl	800ad90 <finite>
 800ad3a:	e7c8      	b.n	800acce <pow+0x56>
 800ad3c:	2600      	movs	r6, #0
 800ad3e:	4f01      	ldr	r7, [pc, #4]	@ (800ad44 <pow+0xcc>)
 800ad40:	e7e5      	b.n	800ad0e <pow+0x96>
 800ad42:	bf00      	nop
 800ad44:	3ff00000 	.word	0x3ff00000

0800ad48 <sqrt>:
 800ad48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	460f      	mov	r7, r1
 800ad4e:	f000 f825 	bl	800ad9c <__ieee754_sqrt>
 800ad52:	4632      	mov	r2, r6
 800ad54:	4604      	mov	r4, r0
 800ad56:	460d      	mov	r5, r1
 800ad58:	463b      	mov	r3, r7
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	4639      	mov	r1, r7
 800ad5e:	f7f5 fe57 	bl	8000a10 <__aeabi_dcmpun>
 800ad62:	b990      	cbnz	r0, 800ad8a <sqrt+0x42>
 800ad64:	2200      	movs	r2, #0
 800ad66:	2300      	movs	r3, #0
 800ad68:	4630      	mov	r0, r6
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	f7f5 fe28 	bl	80009c0 <__aeabi_dcmplt>
 800ad70:	b158      	cbz	r0, 800ad8a <sqrt+0x42>
 800ad72:	f7fd ff57 	bl	8008c24 <__errno>
 800ad76:	2321      	movs	r3, #33	@ 0x21
 800ad78:	2200      	movs	r2, #0
 800ad7a:	6003      	str	r3, [r0, #0]
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4610      	mov	r0, r2
 800ad80:	4619      	mov	r1, r3
 800ad82:	f7f5 fcd5 	bl	8000730 <__aeabi_ddiv>
 800ad86:	4604      	mov	r4, r0
 800ad88:	460d      	mov	r5, r1
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad90 <finite>:
 800ad90:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800ad94:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ad98:	0fc0      	lsrs	r0, r0, #31
 800ad9a:	4770      	bx	lr

0800ad9c <__ieee754_sqrt>:
 800ad9c:	4a67      	ldr	r2, [pc, #412]	@ (800af3c <__ieee754_sqrt+0x1a0>)
 800ad9e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada2:	438a      	bics	r2, r1
 800ada4:	4606      	mov	r6, r0
 800ada6:	460f      	mov	r7, r1
 800ada8:	460b      	mov	r3, r1
 800adaa:	4604      	mov	r4, r0
 800adac:	d10e      	bne.n	800adcc <__ieee754_sqrt+0x30>
 800adae:	4602      	mov	r2, r0
 800adb0:	f7f5 fb94 	bl	80004dc <__aeabi_dmul>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4630      	mov	r0, r6
 800adba:	4639      	mov	r1, r7
 800adbc:	f7f5 f9d8 	bl	8000170 <__adddf3>
 800adc0:	4606      	mov	r6, r0
 800adc2:	460f      	mov	r7, r1
 800adc4:	4630      	mov	r0, r6
 800adc6:	4639      	mov	r1, r7
 800adc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adcc:	2900      	cmp	r1, #0
 800adce:	dc0c      	bgt.n	800adea <__ieee754_sqrt+0x4e>
 800add0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800add4:	4302      	orrs	r2, r0
 800add6:	d0f5      	beq.n	800adc4 <__ieee754_sqrt+0x28>
 800add8:	b189      	cbz	r1, 800adfe <__ieee754_sqrt+0x62>
 800adda:	4602      	mov	r2, r0
 800addc:	f7f5 f9c6 	bl	800016c <__aeabi_dsub>
 800ade0:	4602      	mov	r2, r0
 800ade2:	460b      	mov	r3, r1
 800ade4:	f7f5 fca4 	bl	8000730 <__aeabi_ddiv>
 800ade8:	e7ea      	b.n	800adc0 <__ieee754_sqrt+0x24>
 800adea:	150a      	asrs	r2, r1, #20
 800adec:	d115      	bne.n	800ae1a <__ieee754_sqrt+0x7e>
 800adee:	2100      	movs	r1, #0
 800adf0:	e009      	b.n	800ae06 <__ieee754_sqrt+0x6a>
 800adf2:	0ae3      	lsrs	r3, r4, #11
 800adf4:	3a15      	subs	r2, #21
 800adf6:	0564      	lsls	r4, r4, #21
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d0fa      	beq.n	800adf2 <__ieee754_sqrt+0x56>
 800adfc:	e7f7      	b.n	800adee <__ieee754_sqrt+0x52>
 800adfe:	460a      	mov	r2, r1
 800ae00:	e7fa      	b.n	800adf8 <__ieee754_sqrt+0x5c>
 800ae02:	005b      	lsls	r3, r3, #1
 800ae04:	3101      	adds	r1, #1
 800ae06:	02d8      	lsls	r0, r3, #11
 800ae08:	d5fb      	bpl.n	800ae02 <__ieee754_sqrt+0x66>
 800ae0a:	1e48      	subs	r0, r1, #1
 800ae0c:	1a12      	subs	r2, r2, r0
 800ae0e:	f1c1 0020 	rsb	r0, r1, #32
 800ae12:	fa24 f000 	lsr.w	r0, r4, r0
 800ae16:	4303      	orrs	r3, r0
 800ae18:	408c      	lsls	r4, r1
 800ae1a:	2600      	movs	r6, #0
 800ae1c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800ae20:	2116      	movs	r1, #22
 800ae22:	07d2      	lsls	r2, r2, #31
 800ae24:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800ae28:	4632      	mov	r2, r6
 800ae2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae32:	bf5c      	itt	pl
 800ae34:	005b      	lslpl	r3, r3, #1
 800ae36:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800ae3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae3e:	bf58      	it	pl
 800ae40:	0064      	lslpl	r4, r4, #1
 800ae42:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ae46:	107f      	asrs	r7, r7, #1
 800ae48:	0064      	lsls	r4, r4, #1
 800ae4a:	1815      	adds	r5, r2, r0
 800ae4c:	429d      	cmp	r5, r3
 800ae4e:	bfde      	ittt	le
 800ae50:	182a      	addle	r2, r5, r0
 800ae52:	1b5b      	suble	r3, r3, r5
 800ae54:	1836      	addle	r6, r6, r0
 800ae56:	0fe5      	lsrs	r5, r4, #31
 800ae58:	3901      	subs	r1, #1
 800ae5a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ae5e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ae62:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ae66:	d1f0      	bne.n	800ae4a <__ieee754_sqrt+0xae>
 800ae68:	460d      	mov	r5, r1
 800ae6a:	f04f 0a20 	mov.w	sl, #32
 800ae6e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800ae72:	429a      	cmp	r2, r3
 800ae74:	eb01 0c00 	add.w	ip, r1, r0
 800ae78:	db02      	blt.n	800ae80 <__ieee754_sqrt+0xe4>
 800ae7a:	d113      	bne.n	800aea4 <__ieee754_sqrt+0x108>
 800ae7c:	45a4      	cmp	ip, r4
 800ae7e:	d811      	bhi.n	800aea4 <__ieee754_sqrt+0x108>
 800ae80:	f1bc 0f00 	cmp.w	ip, #0
 800ae84:	eb0c 0100 	add.w	r1, ip, r0
 800ae88:	da42      	bge.n	800af10 <__ieee754_sqrt+0x174>
 800ae8a:	2900      	cmp	r1, #0
 800ae8c:	db40      	blt.n	800af10 <__ieee754_sqrt+0x174>
 800ae8e:	f102 0e01 	add.w	lr, r2, #1
 800ae92:	1a9b      	subs	r3, r3, r2
 800ae94:	4672      	mov	r2, lr
 800ae96:	45a4      	cmp	ip, r4
 800ae98:	bf88      	it	hi
 800ae9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ae9e:	eba4 040c 	sub.w	r4, r4, ip
 800aea2:	4405      	add	r5, r0
 800aea4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800aea8:	f1ba 0a01 	subs.w	sl, sl, #1
 800aeac:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800aeb0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800aeb4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800aeb8:	d1db      	bne.n	800ae72 <__ieee754_sqrt+0xd6>
 800aeba:	431c      	orrs	r4, r3
 800aebc:	d01a      	beq.n	800aef4 <__ieee754_sqrt+0x158>
 800aebe:	4c20      	ldr	r4, [pc, #128]	@ (800af40 <__ieee754_sqrt+0x1a4>)
 800aec0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800af44 <__ieee754_sqrt+0x1a8>
 800aec4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aec8:	e9db 2300 	ldrd	r2, r3, [fp]
 800aecc:	f7f5 f94e 	bl	800016c <__aeabi_dsub>
 800aed0:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	4640      	mov	r0, r8
 800aeda:	4649      	mov	r1, r9
 800aedc:	f7f5 fd7a 	bl	80009d4 <__aeabi_dcmple>
 800aee0:	b140      	cbz	r0, 800aef4 <__ieee754_sqrt+0x158>
 800aee2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800aee6:	e9db 2300 	ldrd	r2, r3, [fp]
 800aeea:	f1b5 3fff 	cmp.w	r5, #4294967295
 800aeee:	d111      	bne.n	800af14 <__ieee754_sqrt+0x178>
 800aef0:	4655      	mov	r5, sl
 800aef2:	3601      	adds	r6, #1
 800aef4:	1072      	asrs	r2, r6, #1
 800aef6:	086b      	lsrs	r3, r5, #1
 800aef8:	07f1      	lsls	r1, r6, #31
 800aefa:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800aefe:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800af02:	bf48      	it	mi
 800af04:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800af08:	4618      	mov	r0, r3
 800af0a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800af0e:	e757      	b.n	800adc0 <__ieee754_sqrt+0x24>
 800af10:	4696      	mov	lr, r2
 800af12:	e7be      	b.n	800ae92 <__ieee754_sqrt+0xf6>
 800af14:	f7f5 f92c 	bl	8000170 <__adddf3>
 800af18:	e9d4 8900 	ldrd	r8, r9, [r4]
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	4640      	mov	r0, r8
 800af22:	4649      	mov	r1, r9
 800af24:	f7f5 fd4c 	bl	80009c0 <__aeabi_dcmplt>
 800af28:	b120      	cbz	r0, 800af34 <__ieee754_sqrt+0x198>
 800af2a:	1ca8      	adds	r0, r5, #2
 800af2c:	bf08      	it	eq
 800af2e:	3601      	addeq	r6, #1
 800af30:	3502      	adds	r5, #2
 800af32:	e7df      	b.n	800aef4 <__ieee754_sqrt+0x158>
 800af34:	1c6b      	adds	r3, r5, #1
 800af36:	f023 0501 	bic.w	r5, r3, #1
 800af3a:	e7db      	b.n	800aef4 <__ieee754_sqrt+0x158>
 800af3c:	7ff00000 	.word	0x7ff00000
 800af40:	20000218 	.word	0x20000218
 800af44:	20000210 	.word	0x20000210

0800af48 <__ieee754_atan2>:
 800af48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	4617      	mov	r7, r2
 800af4e:	4690      	mov	r8, r2
 800af50:	4699      	mov	r9, r3
 800af52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800af56:	427b      	negs	r3, r7
 800af58:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800b0e0 <__ieee754_atan2+0x198>
 800af5c:	433b      	orrs	r3, r7
 800af5e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800af62:	4553      	cmp	r3, sl
 800af64:	4604      	mov	r4, r0
 800af66:	460d      	mov	r5, r1
 800af68:	d809      	bhi.n	800af7e <__ieee754_atan2+0x36>
 800af6a:	4246      	negs	r6, r0
 800af6c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800af70:	4306      	orrs	r6, r0
 800af72:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800af76:	4556      	cmp	r6, sl
 800af78:	468e      	mov	lr, r1
 800af7a:	4683      	mov	fp, r0
 800af7c:	d908      	bls.n	800af90 <__ieee754_atan2+0x48>
 800af7e:	4642      	mov	r2, r8
 800af80:	464b      	mov	r3, r9
 800af82:	4620      	mov	r0, r4
 800af84:	4629      	mov	r1, r5
 800af86:	f7f5 f8f3 	bl	8000170 <__adddf3>
 800af8a:	4604      	mov	r4, r0
 800af8c:	460d      	mov	r5, r1
 800af8e:	e016      	b.n	800afbe <__ieee754_atan2+0x76>
 800af90:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800af94:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800af98:	433e      	orrs	r6, r7
 800af9a:	d103      	bne.n	800afa4 <__ieee754_atan2+0x5c>
 800af9c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa0:	f000 bdce 	b.w	800bb40 <atan>
 800afa4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800afa8:	f006 0602 	and.w	r6, r6, #2
 800afac:	ea53 0b0b 	orrs.w	fp, r3, fp
 800afb0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800afb4:	d107      	bne.n	800afc6 <__ieee754_atan2+0x7e>
 800afb6:	2e02      	cmp	r6, #2
 800afb8:	d064      	beq.n	800b084 <__ieee754_atan2+0x13c>
 800afba:	2e03      	cmp	r6, #3
 800afbc:	d066      	beq.n	800b08c <__ieee754_atan2+0x144>
 800afbe:	4620      	mov	r0, r4
 800afc0:	4629      	mov	r1, r5
 800afc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc6:	4317      	orrs	r7, r2
 800afc8:	d106      	bne.n	800afd8 <__ieee754_atan2+0x90>
 800afca:	f1be 0f00 	cmp.w	lr, #0
 800afce:	da68      	bge.n	800b0a2 <__ieee754_atan2+0x15a>
 800afd0:	a537      	add	r5, pc, #220	@ (adr r5, 800b0b0 <__ieee754_atan2+0x168>)
 800afd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800afd6:	e7f2      	b.n	800afbe <__ieee754_atan2+0x76>
 800afd8:	4552      	cmp	r2, sl
 800afda:	d10f      	bne.n	800affc <__ieee754_atan2+0xb4>
 800afdc:	4293      	cmp	r3, r2
 800afde:	f106 36ff 	add.w	r6, r6, #4294967295
 800afe2:	d107      	bne.n	800aff4 <__ieee754_atan2+0xac>
 800afe4:	2e02      	cmp	r6, #2
 800afe6:	d855      	bhi.n	800b094 <__ieee754_atan2+0x14c>
 800afe8:	4b3e      	ldr	r3, [pc, #248]	@ (800b0e4 <__ieee754_atan2+0x19c>)
 800afea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800afee:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aff2:	e7e4      	b.n	800afbe <__ieee754_atan2+0x76>
 800aff4:	2e02      	cmp	r6, #2
 800aff6:	d851      	bhi.n	800b09c <__ieee754_atan2+0x154>
 800aff8:	4b3b      	ldr	r3, [pc, #236]	@ (800b0e8 <__ieee754_atan2+0x1a0>)
 800affa:	e7f6      	b.n	800afea <__ieee754_atan2+0xa2>
 800affc:	4553      	cmp	r3, sl
 800affe:	d0e4      	beq.n	800afca <__ieee754_atan2+0x82>
 800b000:	1a9b      	subs	r3, r3, r2
 800b002:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b006:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b00a:	da21      	bge.n	800b050 <__ieee754_atan2+0x108>
 800b00c:	f1b9 0f00 	cmp.w	r9, #0
 800b010:	da01      	bge.n	800b016 <__ieee754_atan2+0xce>
 800b012:	323c      	adds	r2, #60	@ 0x3c
 800b014:	db20      	blt.n	800b058 <__ieee754_atan2+0x110>
 800b016:	4642      	mov	r2, r8
 800b018:	464b      	mov	r3, r9
 800b01a:	4620      	mov	r0, r4
 800b01c:	4629      	mov	r1, r5
 800b01e:	f7f5 fb87 	bl	8000730 <__aeabi_ddiv>
 800b022:	f000 ff1d 	bl	800be60 <fabs>
 800b026:	f000 fd8b 	bl	800bb40 <atan>
 800b02a:	4604      	mov	r4, r0
 800b02c:	460d      	mov	r5, r1
 800b02e:	2e01      	cmp	r6, #1
 800b030:	d015      	beq.n	800b05e <__ieee754_atan2+0x116>
 800b032:	2e02      	cmp	r6, #2
 800b034:	d017      	beq.n	800b066 <__ieee754_atan2+0x11e>
 800b036:	2e00      	cmp	r6, #0
 800b038:	d0c1      	beq.n	800afbe <__ieee754_atan2+0x76>
 800b03a:	a31f      	add	r3, pc, #124	@ (adr r3, 800b0b8 <__ieee754_atan2+0x170>)
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	4620      	mov	r0, r4
 800b042:	4629      	mov	r1, r5
 800b044:	f7f5 f892 	bl	800016c <__aeabi_dsub>
 800b048:	a31d      	add	r3, pc, #116	@ (adr r3, 800b0c0 <__ieee754_atan2+0x178>)
 800b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04e:	e016      	b.n	800b07e <__ieee754_atan2+0x136>
 800b050:	a51d      	add	r5, pc, #116	@ (adr r5, 800b0c8 <__ieee754_atan2+0x180>)
 800b052:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b056:	e7ea      	b.n	800b02e <__ieee754_atan2+0xe6>
 800b058:	2400      	movs	r4, #0
 800b05a:	2500      	movs	r5, #0
 800b05c:	e7e7      	b.n	800b02e <__ieee754_atan2+0xe6>
 800b05e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800b062:	461d      	mov	r5, r3
 800b064:	e7ab      	b.n	800afbe <__ieee754_atan2+0x76>
 800b066:	a314      	add	r3, pc, #80	@ (adr r3, 800b0b8 <__ieee754_atan2+0x170>)
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	4620      	mov	r0, r4
 800b06e:	4629      	mov	r1, r5
 800b070:	f7f5 f87c 	bl	800016c <__aeabi_dsub>
 800b074:	4602      	mov	r2, r0
 800b076:	460b      	mov	r3, r1
 800b078:	a111      	add	r1, pc, #68	@ (adr r1, 800b0c0 <__ieee754_atan2+0x178>)
 800b07a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b07e:	f7f5 f875 	bl	800016c <__aeabi_dsub>
 800b082:	e782      	b.n	800af8a <__ieee754_atan2+0x42>
 800b084:	a50e      	add	r5, pc, #56	@ (adr r5, 800b0c0 <__ieee754_atan2+0x178>)
 800b086:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b08a:	e798      	b.n	800afbe <__ieee754_atan2+0x76>
 800b08c:	a510      	add	r5, pc, #64	@ (adr r5, 800b0d0 <__ieee754_atan2+0x188>)
 800b08e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b092:	e794      	b.n	800afbe <__ieee754_atan2+0x76>
 800b094:	a510      	add	r5, pc, #64	@ (adr r5, 800b0d8 <__ieee754_atan2+0x190>)
 800b096:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b09a:	e790      	b.n	800afbe <__ieee754_atan2+0x76>
 800b09c:	2400      	movs	r4, #0
 800b09e:	2500      	movs	r5, #0
 800b0a0:	e78d      	b.n	800afbe <__ieee754_atan2+0x76>
 800b0a2:	a509      	add	r5, pc, #36	@ (adr r5, 800b0c8 <__ieee754_atan2+0x180>)
 800b0a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b0a8:	e789      	b.n	800afbe <__ieee754_atan2+0x76>
 800b0aa:	bf00      	nop
 800b0ac:	f3af 8000 	nop.w
 800b0b0:	54442d18 	.word	0x54442d18
 800b0b4:	bff921fb 	.word	0xbff921fb
 800b0b8:	33145c07 	.word	0x33145c07
 800b0bc:	3ca1a626 	.word	0x3ca1a626
 800b0c0:	54442d18 	.word	0x54442d18
 800b0c4:	400921fb 	.word	0x400921fb
 800b0c8:	54442d18 	.word	0x54442d18
 800b0cc:	3ff921fb 	.word	0x3ff921fb
 800b0d0:	54442d18 	.word	0x54442d18
 800b0d4:	c00921fb 	.word	0xc00921fb
 800b0d8:	54442d18 	.word	0x54442d18
 800b0dc:	3fe921fb 	.word	0x3fe921fb
 800b0e0:	7ff00000 	.word	0x7ff00000
 800b0e4:	0800c700 	.word	0x0800c700
 800b0e8:	0800c6e8 	.word	0x0800c6e8
 800b0ec:	00000000 	.word	0x00000000

0800b0f0 <__ieee754_pow>:
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	b091      	sub	sp, #68	@ 0x44
 800b0f6:	e9cd 2300 	strd	r2, r3, [sp]
 800b0fa:	468b      	mov	fp, r1
 800b0fc:	e9dd 1800 	ldrd	r1, r8, [sp]
 800b100:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800b104:	4682      	mov	sl, r0
 800b106:	ea57 0001 	orrs.w	r0, r7, r1
 800b10a:	d112      	bne.n	800b132 <__ieee754_pow+0x42>
 800b10c:	4653      	mov	r3, sl
 800b10e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800b112:	18db      	adds	r3, r3, r3
 800b114:	4152      	adcs	r2, r2
 800b116:	4298      	cmp	r0, r3
 800b118:	4b91      	ldr	r3, [pc, #580]	@ (800b360 <__ieee754_pow+0x270>)
 800b11a:	4193      	sbcs	r3, r2
 800b11c:	f080 84ce 	bcs.w	800babc <__ieee754_pow+0x9cc>
 800b120:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b124:	4650      	mov	r0, sl
 800b126:	4659      	mov	r1, fp
 800b128:	f7f5 f822 	bl	8000170 <__adddf3>
 800b12c:	b011      	add	sp, #68	@ 0x44
 800b12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b132:	4b8c      	ldr	r3, [pc, #560]	@ (800b364 <__ieee754_pow+0x274>)
 800b134:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800b138:	429e      	cmp	r6, r3
 800b13a:	465d      	mov	r5, fp
 800b13c:	46d1      	mov	r9, sl
 800b13e:	d807      	bhi.n	800b150 <__ieee754_pow+0x60>
 800b140:	d102      	bne.n	800b148 <__ieee754_pow+0x58>
 800b142:	f1ba 0f00 	cmp.w	sl, #0
 800b146:	d1eb      	bne.n	800b120 <__ieee754_pow+0x30>
 800b148:	429f      	cmp	r7, r3
 800b14a:	d801      	bhi.n	800b150 <__ieee754_pow+0x60>
 800b14c:	d10f      	bne.n	800b16e <__ieee754_pow+0x7e>
 800b14e:	b171      	cbz	r1, 800b16e <__ieee754_pow+0x7e>
 800b150:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b154:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b158:	ea55 0509 	orrs.w	r5, r5, r9
 800b15c:	d1e0      	bne.n	800b120 <__ieee754_pow+0x30>
 800b15e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b162:	18db      	adds	r3, r3, r3
 800b164:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b168:	4152      	adcs	r2, r2
 800b16a:	429d      	cmp	r5, r3
 800b16c:	e7d4      	b.n	800b118 <__ieee754_pow+0x28>
 800b16e:	2d00      	cmp	r5, #0
 800b170:	4633      	mov	r3, r6
 800b172:	da39      	bge.n	800b1e8 <__ieee754_pow+0xf8>
 800b174:	4a7c      	ldr	r2, [pc, #496]	@ (800b368 <__ieee754_pow+0x278>)
 800b176:	4297      	cmp	r7, r2
 800b178:	d84e      	bhi.n	800b218 <__ieee754_pow+0x128>
 800b17a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b17e:	4297      	cmp	r7, r2
 800b180:	f240 84ab 	bls.w	800bada <__ieee754_pow+0x9ea>
 800b184:	153a      	asrs	r2, r7, #20
 800b186:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b18a:	2a14      	cmp	r2, #20
 800b18c:	dd0f      	ble.n	800b1ae <__ieee754_pow+0xbe>
 800b18e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b192:	fa21 f402 	lsr.w	r4, r1, r2
 800b196:	fa04 f202 	lsl.w	r2, r4, r2
 800b19a:	428a      	cmp	r2, r1
 800b19c:	f040 849d 	bne.w	800bada <__ieee754_pow+0x9ea>
 800b1a0:	f004 0401 	and.w	r4, r4, #1
 800b1a4:	f1c4 0402 	rsb	r4, r4, #2
 800b1a8:	2900      	cmp	r1, #0
 800b1aa:	d15a      	bne.n	800b262 <__ieee754_pow+0x172>
 800b1ac:	e00e      	b.n	800b1cc <__ieee754_pow+0xdc>
 800b1ae:	2900      	cmp	r1, #0
 800b1b0:	d156      	bne.n	800b260 <__ieee754_pow+0x170>
 800b1b2:	f1c2 0214 	rsb	r2, r2, #20
 800b1b6:	fa47 f402 	asr.w	r4, r7, r2
 800b1ba:	fa04 f202 	lsl.w	r2, r4, r2
 800b1be:	42ba      	cmp	r2, r7
 800b1c0:	f040 8488 	bne.w	800bad4 <__ieee754_pow+0x9e4>
 800b1c4:	f004 0401 	and.w	r4, r4, #1
 800b1c8:	f1c4 0402 	rsb	r4, r4, #2
 800b1cc:	4a67      	ldr	r2, [pc, #412]	@ (800b36c <__ieee754_pow+0x27c>)
 800b1ce:	4297      	cmp	r7, r2
 800b1d0:	d130      	bne.n	800b234 <__ieee754_pow+0x144>
 800b1d2:	f1b8 0f00 	cmp.w	r8, #0
 800b1d6:	f280 8479 	bge.w	800bacc <__ieee754_pow+0x9dc>
 800b1da:	4652      	mov	r2, sl
 800b1dc:	465b      	mov	r3, fp
 800b1de:	2000      	movs	r0, #0
 800b1e0:	4962      	ldr	r1, [pc, #392]	@ (800b36c <__ieee754_pow+0x27c>)
 800b1e2:	f7f5 faa5 	bl	8000730 <__aeabi_ddiv>
 800b1e6:	e7a1      	b.n	800b12c <__ieee754_pow+0x3c>
 800b1e8:	2400      	movs	r4, #0
 800b1ea:	2900      	cmp	r1, #0
 800b1ec:	d139      	bne.n	800b262 <__ieee754_pow+0x172>
 800b1ee:	4a5d      	ldr	r2, [pc, #372]	@ (800b364 <__ieee754_pow+0x274>)
 800b1f0:	4297      	cmp	r7, r2
 800b1f2:	d1eb      	bne.n	800b1cc <__ieee754_pow+0xdc>
 800b1f4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800b1f8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800b1fc:	ea53 0309 	orrs.w	r3, r3, r9
 800b200:	f000 845c 	beq.w	800babc <__ieee754_pow+0x9cc>
 800b204:	4b5a      	ldr	r3, [pc, #360]	@ (800b370 <__ieee754_pow+0x280>)
 800b206:	429e      	cmp	r6, r3
 800b208:	d908      	bls.n	800b21c <__ieee754_pow+0x12c>
 800b20a:	f1b8 0f00 	cmp.w	r8, #0
 800b20e:	f2c0 8459 	blt.w	800bac4 <__ieee754_pow+0x9d4>
 800b212:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b216:	e789      	b.n	800b12c <__ieee754_pow+0x3c>
 800b218:	2402      	movs	r4, #2
 800b21a:	e7e6      	b.n	800b1ea <__ieee754_pow+0xfa>
 800b21c:	f1b8 0f00 	cmp.w	r8, #0
 800b220:	f04f 0000 	mov.w	r0, #0
 800b224:	f04f 0100 	mov.w	r1, #0
 800b228:	da80      	bge.n	800b12c <__ieee754_pow+0x3c>
 800b22a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b22e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b232:	e77b      	b.n	800b12c <__ieee754_pow+0x3c>
 800b234:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800b238:	d106      	bne.n	800b248 <__ieee754_pow+0x158>
 800b23a:	4652      	mov	r2, sl
 800b23c:	465b      	mov	r3, fp
 800b23e:	4650      	mov	r0, sl
 800b240:	4659      	mov	r1, fp
 800b242:	f7f5 f94b 	bl	80004dc <__aeabi_dmul>
 800b246:	e771      	b.n	800b12c <__ieee754_pow+0x3c>
 800b248:	4a4a      	ldr	r2, [pc, #296]	@ (800b374 <__ieee754_pow+0x284>)
 800b24a:	4590      	cmp	r8, r2
 800b24c:	d109      	bne.n	800b262 <__ieee754_pow+0x172>
 800b24e:	2d00      	cmp	r5, #0
 800b250:	db07      	blt.n	800b262 <__ieee754_pow+0x172>
 800b252:	4650      	mov	r0, sl
 800b254:	4659      	mov	r1, fp
 800b256:	b011      	add	sp, #68	@ 0x44
 800b258:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b25c:	f7ff bd9e 	b.w	800ad9c <__ieee754_sqrt>
 800b260:	2400      	movs	r4, #0
 800b262:	4650      	mov	r0, sl
 800b264:	4659      	mov	r1, fp
 800b266:	9302      	str	r3, [sp, #8]
 800b268:	f000 fdfa 	bl	800be60 <fabs>
 800b26c:	9b02      	ldr	r3, [sp, #8]
 800b26e:	f1b9 0f00 	cmp.w	r9, #0
 800b272:	d127      	bne.n	800b2c4 <__ieee754_pow+0x1d4>
 800b274:	4a3d      	ldr	r2, [pc, #244]	@ (800b36c <__ieee754_pow+0x27c>)
 800b276:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800b27a:	4594      	cmp	ip, r2
 800b27c:	d000      	beq.n	800b280 <__ieee754_pow+0x190>
 800b27e:	bb0e      	cbnz	r6, 800b2c4 <__ieee754_pow+0x1d4>
 800b280:	f1b8 0f00 	cmp.w	r8, #0
 800b284:	da05      	bge.n	800b292 <__ieee754_pow+0x1a2>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	2000      	movs	r0, #0
 800b28c:	4937      	ldr	r1, [pc, #220]	@ (800b36c <__ieee754_pow+0x27c>)
 800b28e:	f7f5 fa4f 	bl	8000730 <__aeabi_ddiv>
 800b292:	2d00      	cmp	r5, #0
 800b294:	f6bf af4a 	bge.w	800b12c <__ieee754_pow+0x3c>
 800b298:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800b29c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800b2a0:	4326      	orrs	r6, r4
 800b2a2:	d108      	bne.n	800b2b6 <__ieee754_pow+0x1c6>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	f7f4 ff5e 	bl	800016c <__aeabi_dsub>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	e795      	b.n	800b1e2 <__ieee754_pow+0xf2>
 800b2b6:	2c01      	cmp	r4, #1
 800b2b8:	f47f af38 	bne.w	800b12c <__ieee754_pow+0x3c>
 800b2bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	e733      	b.n	800b12c <__ieee754_pow+0x3c>
 800b2c4:	0fea      	lsrs	r2, r5, #31
 800b2c6:	3a01      	subs	r2, #1
 800b2c8:	ea52 0c04 	orrs.w	ip, r2, r4
 800b2cc:	d102      	bne.n	800b2d4 <__ieee754_pow+0x1e4>
 800b2ce:	4652      	mov	r2, sl
 800b2d0:	465b      	mov	r3, fp
 800b2d2:	e7e9      	b.n	800b2a8 <__ieee754_pow+0x1b8>
 800b2d4:	f04f 0900 	mov.w	r9, #0
 800b2d8:	3c01      	subs	r4, #1
 800b2da:	4314      	orrs	r4, r2
 800b2dc:	bf14      	ite	ne
 800b2de:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800b36c <__ieee754_pow+0x27c>
 800b2e2:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800b378 <__ieee754_pow+0x288>
 800b2e6:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800b2ea:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800b2ee:	f240 8107 	bls.w	800b500 <__ieee754_pow+0x410>
 800b2f2:	4b22      	ldr	r3, [pc, #136]	@ (800b37c <__ieee754_pow+0x28c>)
 800b2f4:	429f      	cmp	r7, r3
 800b2f6:	4b1e      	ldr	r3, [pc, #120]	@ (800b370 <__ieee754_pow+0x280>)
 800b2f8:	d913      	bls.n	800b322 <__ieee754_pow+0x232>
 800b2fa:	429e      	cmp	r6, r3
 800b2fc:	d808      	bhi.n	800b310 <__ieee754_pow+0x220>
 800b2fe:	f1b8 0f00 	cmp.w	r8, #0
 800b302:	da08      	bge.n	800b316 <__ieee754_pow+0x226>
 800b304:	2000      	movs	r0, #0
 800b306:	b011      	add	sp, #68	@ 0x44
 800b308:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30c:	f000 be44 	b.w	800bf98 <__math_oflow>
 800b310:	f1b8 0f00 	cmp.w	r8, #0
 800b314:	dcf6      	bgt.n	800b304 <__ieee754_pow+0x214>
 800b316:	2000      	movs	r0, #0
 800b318:	b011      	add	sp, #68	@ 0x44
 800b31a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b31e:	f000 be36 	b.w	800bf8e <__math_uflow>
 800b322:	429e      	cmp	r6, r3
 800b324:	d20c      	bcs.n	800b340 <__ieee754_pow+0x250>
 800b326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b32a:	2200      	movs	r2, #0
 800b32c:	2300      	movs	r3, #0
 800b32e:	f7f5 fb47 	bl	80009c0 <__aeabi_dcmplt>
 800b332:	3800      	subs	r0, #0
 800b334:	bf18      	it	ne
 800b336:	2001      	movne	r0, #1
 800b338:	f1b8 0f00 	cmp.w	r8, #0
 800b33c:	daec      	bge.n	800b318 <__ieee754_pow+0x228>
 800b33e:	e7e2      	b.n	800b306 <__ieee754_pow+0x216>
 800b340:	4b0a      	ldr	r3, [pc, #40]	@ (800b36c <__ieee754_pow+0x27c>)
 800b342:	2200      	movs	r2, #0
 800b344:	429e      	cmp	r6, r3
 800b346:	d91b      	bls.n	800b380 <__ieee754_pow+0x290>
 800b348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b34c:	2300      	movs	r3, #0
 800b34e:	f7f5 fb37 	bl	80009c0 <__aeabi_dcmplt>
 800b352:	3800      	subs	r0, #0
 800b354:	bf18      	it	ne
 800b356:	2001      	movne	r0, #1
 800b358:	f1b8 0f00 	cmp.w	r8, #0
 800b35c:	dcd3      	bgt.n	800b306 <__ieee754_pow+0x216>
 800b35e:	e7db      	b.n	800b318 <__ieee754_pow+0x228>
 800b360:	fff00000 	.word	0xfff00000
 800b364:	7ff00000 	.word	0x7ff00000
 800b368:	433fffff 	.word	0x433fffff
 800b36c:	3ff00000 	.word	0x3ff00000
 800b370:	3fefffff 	.word	0x3fefffff
 800b374:	3fe00000 	.word	0x3fe00000
 800b378:	bff00000 	.word	0xbff00000
 800b37c:	43f00000 	.word	0x43f00000
 800b380:	4b5b      	ldr	r3, [pc, #364]	@ (800b4f0 <__ieee754_pow+0x400>)
 800b382:	f7f4 fef3 	bl	800016c <__aeabi_dsub>
 800b386:	a352      	add	r3, pc, #328	@ (adr r3, 800b4d0 <__ieee754_pow+0x3e0>)
 800b388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38c:	4604      	mov	r4, r0
 800b38e:	460d      	mov	r5, r1
 800b390:	f7f5 f8a4 	bl	80004dc <__aeabi_dmul>
 800b394:	a350      	add	r3, pc, #320	@ (adr r3, 800b4d8 <__ieee754_pow+0x3e8>)
 800b396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39a:	4606      	mov	r6, r0
 800b39c:	460f      	mov	r7, r1
 800b39e:	4620      	mov	r0, r4
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	f7f5 f89b 	bl	80004dc <__aeabi_dmul>
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	4682      	mov	sl, r0
 800b3aa:	468b      	mov	fp, r1
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	4b50      	ldr	r3, [pc, #320]	@ (800b4f4 <__ieee754_pow+0x404>)
 800b3b2:	f7f5 f893 	bl	80004dc <__aeabi_dmul>
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	a149      	add	r1, pc, #292	@ (adr r1, 800b4e0 <__ieee754_pow+0x3f0>)
 800b3bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3c0:	f7f4 fed4 	bl	800016c <__aeabi_dsub>
 800b3c4:	4622      	mov	r2, r4
 800b3c6:	462b      	mov	r3, r5
 800b3c8:	f7f5 f888 	bl	80004dc <__aeabi_dmul>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	4949      	ldr	r1, [pc, #292]	@ (800b4f8 <__ieee754_pow+0x408>)
 800b3d4:	f7f4 feca 	bl	800016c <__aeabi_dsub>
 800b3d8:	4622      	mov	r2, r4
 800b3da:	4680      	mov	r8, r0
 800b3dc:	4689      	mov	r9, r1
 800b3de:	462b      	mov	r3, r5
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	4629      	mov	r1, r5
 800b3e4:	f7f5 f87a 	bl	80004dc <__aeabi_dmul>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4640      	mov	r0, r8
 800b3ee:	4649      	mov	r1, r9
 800b3f0:	f7f5 f874 	bl	80004dc <__aeabi_dmul>
 800b3f4:	a33c      	add	r3, pc, #240	@ (adr r3, 800b4e8 <__ieee754_pow+0x3f8>)
 800b3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fa:	f7f5 f86f 	bl	80004dc <__aeabi_dmul>
 800b3fe:	4602      	mov	r2, r0
 800b400:	460b      	mov	r3, r1
 800b402:	4650      	mov	r0, sl
 800b404:	4659      	mov	r1, fp
 800b406:	f7f4 feb1 	bl	800016c <__aeabi_dsub>
 800b40a:	2400      	movs	r4, #0
 800b40c:	4602      	mov	r2, r0
 800b40e:	460b      	mov	r3, r1
 800b410:	4680      	mov	r8, r0
 800b412:	4689      	mov	r9, r1
 800b414:	4630      	mov	r0, r6
 800b416:	4639      	mov	r1, r7
 800b418:	f7f4 feaa 	bl	8000170 <__adddf3>
 800b41c:	4632      	mov	r2, r6
 800b41e:	463b      	mov	r3, r7
 800b420:	4620      	mov	r0, r4
 800b422:	460d      	mov	r5, r1
 800b424:	f7f4 fea2 	bl	800016c <__aeabi_dsub>
 800b428:	4602      	mov	r2, r0
 800b42a:	460b      	mov	r3, r1
 800b42c:	4640      	mov	r0, r8
 800b42e:	4649      	mov	r1, r9
 800b430:	f7f4 fe9c 	bl	800016c <__aeabi_dsub>
 800b434:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b438:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b43c:	2300      	movs	r3, #0
 800b43e:	9304      	str	r3, [sp, #16]
 800b440:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b444:	4606      	mov	r6, r0
 800b446:	460f      	mov	r7, r1
 800b448:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b44c:	4652      	mov	r2, sl
 800b44e:	465b      	mov	r3, fp
 800b450:	f7f4 fe8c 	bl	800016c <__aeabi_dsub>
 800b454:	4622      	mov	r2, r4
 800b456:	462b      	mov	r3, r5
 800b458:	f7f5 f840 	bl	80004dc <__aeabi_dmul>
 800b45c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b460:	4680      	mov	r8, r0
 800b462:	4689      	mov	r9, r1
 800b464:	4630      	mov	r0, r6
 800b466:	4639      	mov	r1, r7
 800b468:	f7f5 f838 	bl	80004dc <__aeabi_dmul>
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	4640      	mov	r0, r8
 800b472:	4649      	mov	r1, r9
 800b474:	f7f4 fe7c 	bl	8000170 <__adddf3>
 800b478:	4652      	mov	r2, sl
 800b47a:	465b      	mov	r3, fp
 800b47c:	4606      	mov	r6, r0
 800b47e:	460f      	mov	r7, r1
 800b480:	4620      	mov	r0, r4
 800b482:	4629      	mov	r1, r5
 800b484:	f7f5 f82a 	bl	80004dc <__aeabi_dmul>
 800b488:	460b      	mov	r3, r1
 800b48a:	4602      	mov	r2, r0
 800b48c:	4680      	mov	r8, r0
 800b48e:	4689      	mov	r9, r1
 800b490:	4630      	mov	r0, r6
 800b492:	4639      	mov	r1, r7
 800b494:	f7f4 fe6c 	bl	8000170 <__adddf3>
 800b498:	4b18      	ldr	r3, [pc, #96]	@ (800b4fc <__ieee754_pow+0x40c>)
 800b49a:	4604      	mov	r4, r0
 800b49c:	4299      	cmp	r1, r3
 800b49e:	460d      	mov	r5, r1
 800b4a0:	468a      	mov	sl, r1
 800b4a2:	468b      	mov	fp, r1
 800b4a4:	f340 82e0 	ble.w	800ba68 <__ieee754_pow+0x978>
 800b4a8:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b4ac:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b4b0:	4303      	orrs	r3, r0
 800b4b2:	f000 81df 	beq.w	800b874 <__ieee754_pow+0x784>
 800b4b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f7f5 fa7f 	bl	80009c0 <__aeabi_dcmplt>
 800b4c2:	3800      	subs	r0, #0
 800b4c4:	bf18      	it	ne
 800b4c6:	2001      	movne	r0, #1
 800b4c8:	e71d      	b.n	800b306 <__ieee754_pow+0x216>
 800b4ca:	bf00      	nop
 800b4cc:	f3af 8000 	nop.w
 800b4d0:	60000000 	.word	0x60000000
 800b4d4:	3ff71547 	.word	0x3ff71547
 800b4d8:	f85ddf44 	.word	0xf85ddf44
 800b4dc:	3e54ae0b 	.word	0x3e54ae0b
 800b4e0:	55555555 	.word	0x55555555
 800b4e4:	3fd55555 	.word	0x3fd55555
 800b4e8:	652b82fe 	.word	0x652b82fe
 800b4ec:	3ff71547 	.word	0x3ff71547
 800b4f0:	3ff00000 	.word	0x3ff00000
 800b4f4:	3fd00000 	.word	0x3fd00000
 800b4f8:	3fe00000 	.word	0x3fe00000
 800b4fc:	408fffff 	.word	0x408fffff
 800b500:	4ad3      	ldr	r2, [pc, #844]	@ (800b850 <__ieee754_pow+0x760>)
 800b502:	402a      	ands	r2, r5
 800b504:	2a00      	cmp	r2, #0
 800b506:	f040 817a 	bne.w	800b7fe <__ieee754_pow+0x70e>
 800b50a:	4bd2      	ldr	r3, [pc, #840]	@ (800b854 <__ieee754_pow+0x764>)
 800b50c:	2200      	movs	r2, #0
 800b50e:	f7f4 ffe5 	bl	80004dc <__aeabi_dmul>
 800b512:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800b516:	460b      	mov	r3, r1
 800b518:	151a      	asrs	r2, r3, #20
 800b51a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b51e:	4422      	add	r2, r4
 800b520:	920a      	str	r2, [sp, #40]	@ 0x28
 800b522:	4acd      	ldr	r2, [pc, #820]	@ (800b858 <__ieee754_pow+0x768>)
 800b524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b528:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800b52c:	4293      	cmp	r3, r2
 800b52e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b532:	dd08      	ble.n	800b546 <__ieee754_pow+0x456>
 800b534:	4ac9      	ldr	r2, [pc, #804]	@ (800b85c <__ieee754_pow+0x76c>)
 800b536:	4293      	cmp	r3, r2
 800b538:	f340 8163 	ble.w	800b802 <__ieee754_pow+0x712>
 800b53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b53e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b542:	3301      	adds	r3, #1
 800b544:	930a      	str	r3, [sp, #40]	@ 0x28
 800b546:	2600      	movs	r6, #0
 800b548:	00f3      	lsls	r3, r6, #3
 800b54a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b54c:	4bc4      	ldr	r3, [pc, #784]	@ (800b860 <__ieee754_pow+0x770>)
 800b54e:	4629      	mov	r1, r5
 800b550:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b554:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b558:	461a      	mov	r2, r3
 800b55a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b55e:	4623      	mov	r3, r4
 800b560:	4682      	mov	sl, r0
 800b562:	f7f4 fe03 	bl	800016c <__aeabi_dsub>
 800b566:	4652      	mov	r2, sl
 800b568:	462b      	mov	r3, r5
 800b56a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b56e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b572:	f7f4 fdfd 	bl	8000170 <__adddf3>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	2000      	movs	r0, #0
 800b57c:	49b9      	ldr	r1, [pc, #740]	@ (800b864 <__ieee754_pow+0x774>)
 800b57e:	f7f5 f8d7 	bl	8000730 <__aeabi_ddiv>
 800b582:	4602      	mov	r2, r0
 800b584:	460b      	mov	r3, r1
 800b586:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b58a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b58e:	f7f4 ffa5 	bl	80004dc <__aeabi_dmul>
 800b592:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b596:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b59a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b59e:	2300      	movs	r3, #0
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	46ab      	mov	fp, r5
 800b5a4:	106d      	asrs	r5, r5, #1
 800b5a6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b5aa:	9304      	str	r3, [sp, #16]
 800b5ac:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b5b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b5b4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b5b8:	4640      	mov	r0, r8
 800b5ba:	4649      	mov	r1, r9
 800b5bc:	4614      	mov	r4, r2
 800b5be:	461d      	mov	r5, r3
 800b5c0:	f7f4 ff8c 	bl	80004dc <__aeabi_dmul>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5cc:	f7f4 fdce 	bl	800016c <__aeabi_dsub>
 800b5d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	460f      	mov	r7, r1
 800b5d8:	4620      	mov	r0, r4
 800b5da:	4629      	mov	r1, r5
 800b5dc:	f7f4 fdc6 	bl	800016c <__aeabi_dsub>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4650      	mov	r0, sl
 800b5e6:	4659      	mov	r1, fp
 800b5e8:	f7f4 fdc0 	bl	800016c <__aeabi_dsub>
 800b5ec:	4642      	mov	r2, r8
 800b5ee:	464b      	mov	r3, r9
 800b5f0:	f7f4 ff74 	bl	80004dc <__aeabi_dmul>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	f7f4 fdb6 	bl	800016c <__aeabi_dsub>
 800b600:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b604:	f7f4 ff6a 	bl	80004dc <__aeabi_dmul>
 800b608:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b60c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b610:	4610      	mov	r0, r2
 800b612:	4619      	mov	r1, r3
 800b614:	f7f4 ff62 	bl	80004dc <__aeabi_dmul>
 800b618:	a37b      	add	r3, pc, #492	@ (adr r3, 800b808 <__ieee754_pow+0x718>)
 800b61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61e:	4604      	mov	r4, r0
 800b620:	460d      	mov	r5, r1
 800b622:	f7f4 ff5b 	bl	80004dc <__aeabi_dmul>
 800b626:	a37a      	add	r3, pc, #488	@ (adr r3, 800b810 <__ieee754_pow+0x720>)
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	f7f4 fda0 	bl	8000170 <__adddf3>
 800b630:	4622      	mov	r2, r4
 800b632:	462b      	mov	r3, r5
 800b634:	f7f4 ff52 	bl	80004dc <__aeabi_dmul>
 800b638:	a377      	add	r3, pc, #476	@ (adr r3, 800b818 <__ieee754_pow+0x728>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	f7f4 fd97 	bl	8000170 <__adddf3>
 800b642:	4622      	mov	r2, r4
 800b644:	462b      	mov	r3, r5
 800b646:	f7f4 ff49 	bl	80004dc <__aeabi_dmul>
 800b64a:	a375      	add	r3, pc, #468	@ (adr r3, 800b820 <__ieee754_pow+0x730>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f7f4 fd8e 	bl	8000170 <__adddf3>
 800b654:	4622      	mov	r2, r4
 800b656:	462b      	mov	r3, r5
 800b658:	f7f4 ff40 	bl	80004dc <__aeabi_dmul>
 800b65c:	a372      	add	r3, pc, #456	@ (adr r3, 800b828 <__ieee754_pow+0x738>)
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	f7f4 fd85 	bl	8000170 <__adddf3>
 800b666:	4622      	mov	r2, r4
 800b668:	462b      	mov	r3, r5
 800b66a:	f7f4 ff37 	bl	80004dc <__aeabi_dmul>
 800b66e:	a370      	add	r3, pc, #448	@ (adr r3, 800b830 <__ieee754_pow+0x740>)
 800b670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b674:	f7f4 fd7c 	bl	8000170 <__adddf3>
 800b678:	4622      	mov	r2, r4
 800b67a:	4606      	mov	r6, r0
 800b67c:	460f      	mov	r7, r1
 800b67e:	462b      	mov	r3, r5
 800b680:	4620      	mov	r0, r4
 800b682:	4629      	mov	r1, r5
 800b684:	f7f4 ff2a 	bl	80004dc <__aeabi_dmul>
 800b688:	4602      	mov	r2, r0
 800b68a:	460b      	mov	r3, r1
 800b68c:	4630      	mov	r0, r6
 800b68e:	4639      	mov	r1, r7
 800b690:	f7f4 ff24 	bl	80004dc <__aeabi_dmul>
 800b694:	4604      	mov	r4, r0
 800b696:	460d      	mov	r5, r1
 800b698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b69c:	4642      	mov	r2, r8
 800b69e:	464b      	mov	r3, r9
 800b6a0:	f7f4 fd66 	bl	8000170 <__adddf3>
 800b6a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b6a8:	f7f4 ff18 	bl	80004dc <__aeabi_dmul>
 800b6ac:	4622      	mov	r2, r4
 800b6ae:	462b      	mov	r3, r5
 800b6b0:	f7f4 fd5e 	bl	8000170 <__adddf3>
 800b6b4:	4642      	mov	r2, r8
 800b6b6:	4682      	mov	sl, r0
 800b6b8:	468b      	mov	fp, r1
 800b6ba:	464b      	mov	r3, r9
 800b6bc:	4640      	mov	r0, r8
 800b6be:	4649      	mov	r1, r9
 800b6c0:	f7f4 ff0c 	bl	80004dc <__aeabi_dmul>
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	4b68      	ldr	r3, [pc, #416]	@ (800b868 <__ieee754_pow+0x778>)
 800b6c8:	4606      	mov	r6, r0
 800b6ca:	460f      	mov	r7, r1
 800b6cc:	f7f4 fd50 	bl	8000170 <__adddf3>
 800b6d0:	4652      	mov	r2, sl
 800b6d2:	465b      	mov	r3, fp
 800b6d4:	f7f4 fd4c 	bl	8000170 <__adddf3>
 800b6d8:	2400      	movs	r4, #0
 800b6da:	460d      	mov	r5, r1
 800b6dc:	4622      	mov	r2, r4
 800b6de:	460b      	mov	r3, r1
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	f7f4 fefa 	bl	80004dc <__aeabi_dmul>
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	4680      	mov	r8, r0
 800b6ec:	4689      	mov	r9, r1
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	4b5d      	ldr	r3, [pc, #372]	@ (800b868 <__ieee754_pow+0x778>)
 800b6f4:	f7f4 fd3a 	bl	800016c <__aeabi_dsub>
 800b6f8:	4632      	mov	r2, r6
 800b6fa:	463b      	mov	r3, r7
 800b6fc:	f7f4 fd36 	bl	800016c <__aeabi_dsub>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4650      	mov	r0, sl
 800b706:	4659      	mov	r1, fp
 800b708:	f7f4 fd30 	bl	800016c <__aeabi_dsub>
 800b70c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b710:	f7f4 fee4 	bl	80004dc <__aeabi_dmul>
 800b714:	4622      	mov	r2, r4
 800b716:	4606      	mov	r6, r0
 800b718:	460f      	mov	r7, r1
 800b71a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b71e:	462b      	mov	r3, r5
 800b720:	f7f4 fedc 	bl	80004dc <__aeabi_dmul>
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	4630      	mov	r0, r6
 800b72a:	4639      	mov	r1, r7
 800b72c:	f7f4 fd20 	bl	8000170 <__adddf3>
 800b730:	2400      	movs	r4, #0
 800b732:	4606      	mov	r6, r0
 800b734:	460f      	mov	r7, r1
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	4640      	mov	r0, r8
 800b73c:	4649      	mov	r1, r9
 800b73e:	f7f4 fd17 	bl	8000170 <__adddf3>
 800b742:	a33d      	add	r3, pc, #244	@ (adr r3, 800b838 <__ieee754_pow+0x748>)
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	4620      	mov	r0, r4
 800b74a:	460d      	mov	r5, r1
 800b74c:	f7f4 fec6 	bl	80004dc <__aeabi_dmul>
 800b750:	4642      	mov	r2, r8
 800b752:	464b      	mov	r3, r9
 800b754:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b758:	4620      	mov	r0, r4
 800b75a:	4629      	mov	r1, r5
 800b75c:	f7f4 fd06 	bl	800016c <__aeabi_dsub>
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	4630      	mov	r0, r6
 800b766:	4639      	mov	r1, r7
 800b768:	f7f4 fd00 	bl	800016c <__aeabi_dsub>
 800b76c:	a334      	add	r3, pc, #208	@ (adr r3, 800b840 <__ieee754_pow+0x750>)
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	f7f4 feb3 	bl	80004dc <__aeabi_dmul>
 800b776:	a334      	add	r3, pc, #208	@ (adr r3, 800b848 <__ieee754_pow+0x758>)
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	4606      	mov	r6, r0
 800b77e:	460f      	mov	r7, r1
 800b780:	4620      	mov	r0, r4
 800b782:	4629      	mov	r1, r5
 800b784:	f7f4 feaa 	bl	80004dc <__aeabi_dmul>
 800b788:	4602      	mov	r2, r0
 800b78a:	460b      	mov	r3, r1
 800b78c:	4630      	mov	r0, r6
 800b78e:	4639      	mov	r1, r7
 800b790:	f7f4 fcee 	bl	8000170 <__adddf3>
 800b794:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b796:	4b35      	ldr	r3, [pc, #212]	@ (800b86c <__ieee754_pow+0x77c>)
 800b798:	2400      	movs	r4, #0
 800b79a:	4413      	add	r3, r2
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	f7f4 fce6 	bl	8000170 <__adddf3>
 800b7a4:	4682      	mov	sl, r0
 800b7a6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b7a8:	468b      	mov	fp, r1
 800b7aa:	f7f4 fe2d 	bl	8000408 <__aeabi_i2d>
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	460f      	mov	r7, r1
 800b7b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b7b4:	4b2e      	ldr	r3, [pc, #184]	@ (800b870 <__ieee754_pow+0x780>)
 800b7b6:	4413      	add	r3, r2
 800b7b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7bc:	4652      	mov	r2, sl
 800b7be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7c2:	465b      	mov	r3, fp
 800b7c4:	f7f4 fcd4 	bl	8000170 <__adddf3>
 800b7c8:	4642      	mov	r2, r8
 800b7ca:	464b      	mov	r3, r9
 800b7cc:	f7f4 fcd0 	bl	8000170 <__adddf3>
 800b7d0:	4632      	mov	r2, r6
 800b7d2:	463b      	mov	r3, r7
 800b7d4:	f7f4 fccc 	bl	8000170 <__adddf3>
 800b7d8:	4632      	mov	r2, r6
 800b7da:	463b      	mov	r3, r7
 800b7dc:	4620      	mov	r0, r4
 800b7de:	460d      	mov	r5, r1
 800b7e0:	f7f4 fcc4 	bl	800016c <__aeabi_dsub>
 800b7e4:	4642      	mov	r2, r8
 800b7e6:	464b      	mov	r3, r9
 800b7e8:	f7f4 fcc0 	bl	800016c <__aeabi_dsub>
 800b7ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7f0:	f7f4 fcbc 	bl	800016c <__aeabi_dsub>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	4650      	mov	r0, sl
 800b7fa:	4659      	mov	r1, fp
 800b7fc:	e618      	b.n	800b430 <__ieee754_pow+0x340>
 800b7fe:	2400      	movs	r4, #0
 800b800:	e68a      	b.n	800b518 <__ieee754_pow+0x428>
 800b802:	2601      	movs	r6, #1
 800b804:	e6a0      	b.n	800b548 <__ieee754_pow+0x458>
 800b806:	bf00      	nop
 800b808:	4a454eef 	.word	0x4a454eef
 800b80c:	3fca7e28 	.word	0x3fca7e28
 800b810:	93c9db65 	.word	0x93c9db65
 800b814:	3fcd864a 	.word	0x3fcd864a
 800b818:	a91d4101 	.word	0xa91d4101
 800b81c:	3fd17460 	.word	0x3fd17460
 800b820:	518f264d 	.word	0x518f264d
 800b824:	3fd55555 	.word	0x3fd55555
 800b828:	db6fabff 	.word	0xdb6fabff
 800b82c:	3fdb6db6 	.word	0x3fdb6db6
 800b830:	33333303 	.word	0x33333303
 800b834:	3fe33333 	.word	0x3fe33333
 800b838:	e0000000 	.word	0xe0000000
 800b83c:	3feec709 	.word	0x3feec709
 800b840:	dc3a03fd 	.word	0xdc3a03fd
 800b844:	3feec709 	.word	0x3feec709
 800b848:	145b01f5 	.word	0x145b01f5
 800b84c:	be3e2fe0 	.word	0xbe3e2fe0
 800b850:	7ff00000 	.word	0x7ff00000
 800b854:	43400000 	.word	0x43400000
 800b858:	0003988e 	.word	0x0003988e
 800b85c:	000bb679 	.word	0x000bb679
 800b860:	0800c738 	.word	0x0800c738
 800b864:	3ff00000 	.word	0x3ff00000
 800b868:	40080000 	.word	0x40080000
 800b86c:	0800c718 	.word	0x0800c718
 800b870:	0800c728 	.word	0x0800c728
 800b874:	a39a      	add	r3, pc, #616	@ (adr r3, 800bae0 <__ieee754_pow+0x9f0>)
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	4630      	mov	r0, r6
 800b87c:	4639      	mov	r1, r7
 800b87e:	f7f4 fc77 	bl	8000170 <__adddf3>
 800b882:	4642      	mov	r2, r8
 800b884:	e9cd 0100 	strd	r0, r1, [sp]
 800b888:	464b      	mov	r3, r9
 800b88a:	4620      	mov	r0, r4
 800b88c:	4629      	mov	r1, r5
 800b88e:	f7f4 fc6d 	bl	800016c <__aeabi_dsub>
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b89a:	f7f5 f8af 	bl	80009fc <__aeabi_dcmpgt>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	f47f ae09 	bne.w	800b4b6 <__ieee754_pow+0x3c6>
 800b8a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b8a8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b8ac:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b8b0:	fa43 fa0a 	asr.w	sl, r3, sl
 800b8b4:	44da      	add	sl, fp
 800b8b6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b8ba:	489b      	ldr	r0, [pc, #620]	@ (800bb28 <__ieee754_pow+0xa38>)
 800b8bc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b8c0:	4108      	asrs	r0, r1
 800b8c2:	ea00 030a 	and.w	r3, r0, sl
 800b8c6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b8ca:	f1c1 0114 	rsb	r1, r1, #20
 800b8ce:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b8d2:	4640      	mov	r0, r8
 800b8d4:	fa4a fa01 	asr.w	sl, sl, r1
 800b8d8:	f1bb 0f00 	cmp.w	fp, #0
 800b8dc:	4649      	mov	r1, r9
 800b8de:	f04f 0200 	mov.w	r2, #0
 800b8e2:	bfb8      	it	lt
 800b8e4:	f1ca 0a00 	rsblt	sl, sl, #0
 800b8e8:	f7f4 fc40 	bl	800016c <__aeabi_dsub>
 800b8ec:	4680      	mov	r8, r0
 800b8ee:	4689      	mov	r9, r1
 800b8f0:	2400      	movs	r4, #0
 800b8f2:	4632      	mov	r2, r6
 800b8f4:	463b      	mov	r3, r7
 800b8f6:	4640      	mov	r0, r8
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	f7f4 fc39 	bl	8000170 <__adddf3>
 800b8fe:	a37a      	add	r3, pc, #488	@ (adr r3, 800bae8 <__ieee754_pow+0x9f8>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	4620      	mov	r0, r4
 800b906:	460d      	mov	r5, r1
 800b908:	f7f4 fde8 	bl	80004dc <__aeabi_dmul>
 800b90c:	4642      	mov	r2, r8
 800b90e:	464b      	mov	r3, r9
 800b910:	e9cd 0100 	strd	r0, r1, [sp]
 800b914:	4620      	mov	r0, r4
 800b916:	4629      	mov	r1, r5
 800b918:	f7f4 fc28 	bl	800016c <__aeabi_dsub>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4630      	mov	r0, r6
 800b922:	4639      	mov	r1, r7
 800b924:	f7f4 fc22 	bl	800016c <__aeabi_dsub>
 800b928:	a371      	add	r3, pc, #452	@ (adr r3, 800baf0 <__ieee754_pow+0xa00>)
 800b92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92e:	f7f4 fdd5 	bl	80004dc <__aeabi_dmul>
 800b932:	a371      	add	r3, pc, #452	@ (adr r3, 800baf8 <__ieee754_pow+0xa08>)
 800b934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b938:	4680      	mov	r8, r0
 800b93a:	4689      	mov	r9, r1
 800b93c:	4620      	mov	r0, r4
 800b93e:	4629      	mov	r1, r5
 800b940:	f7f4 fdcc 	bl	80004dc <__aeabi_dmul>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	4640      	mov	r0, r8
 800b94a:	4649      	mov	r1, r9
 800b94c:	f7f4 fc10 	bl	8000170 <__adddf3>
 800b950:	4604      	mov	r4, r0
 800b952:	460d      	mov	r5, r1
 800b954:	4602      	mov	r2, r0
 800b956:	460b      	mov	r3, r1
 800b958:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b95c:	f7f4 fc08 	bl	8000170 <__adddf3>
 800b960:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b964:	4680      	mov	r8, r0
 800b966:	4689      	mov	r9, r1
 800b968:	f7f4 fc00 	bl	800016c <__aeabi_dsub>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	4620      	mov	r0, r4
 800b972:	4629      	mov	r1, r5
 800b974:	f7f4 fbfa 	bl	800016c <__aeabi_dsub>
 800b978:	4642      	mov	r2, r8
 800b97a:	4606      	mov	r6, r0
 800b97c:	460f      	mov	r7, r1
 800b97e:	464b      	mov	r3, r9
 800b980:	4640      	mov	r0, r8
 800b982:	4649      	mov	r1, r9
 800b984:	f7f4 fdaa 	bl	80004dc <__aeabi_dmul>
 800b988:	a35d      	add	r3, pc, #372	@ (adr r3, 800bb00 <__ieee754_pow+0xa10>)
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	4604      	mov	r4, r0
 800b990:	460d      	mov	r5, r1
 800b992:	f7f4 fda3 	bl	80004dc <__aeabi_dmul>
 800b996:	a35c      	add	r3, pc, #368	@ (adr r3, 800bb08 <__ieee754_pow+0xa18>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	f7f4 fbe6 	bl	800016c <__aeabi_dsub>
 800b9a0:	4622      	mov	r2, r4
 800b9a2:	462b      	mov	r3, r5
 800b9a4:	f7f4 fd9a 	bl	80004dc <__aeabi_dmul>
 800b9a8:	a359      	add	r3, pc, #356	@ (adr r3, 800bb10 <__ieee754_pow+0xa20>)
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	f7f4 fbdf 	bl	8000170 <__adddf3>
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	462b      	mov	r3, r5
 800b9b6:	f7f4 fd91 	bl	80004dc <__aeabi_dmul>
 800b9ba:	a357      	add	r3, pc, #348	@ (adr r3, 800bb18 <__ieee754_pow+0xa28>)
 800b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c0:	f7f4 fbd4 	bl	800016c <__aeabi_dsub>
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	462b      	mov	r3, r5
 800b9c8:	f7f4 fd88 	bl	80004dc <__aeabi_dmul>
 800b9cc:	a354      	add	r3, pc, #336	@ (adr r3, 800bb20 <__ieee754_pow+0xa30>)
 800b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d2:	f7f4 fbcd 	bl	8000170 <__adddf3>
 800b9d6:	4622      	mov	r2, r4
 800b9d8:	462b      	mov	r3, r5
 800b9da:	f7f4 fd7f 	bl	80004dc <__aeabi_dmul>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	4649      	mov	r1, r9
 800b9e6:	f7f4 fbc1 	bl	800016c <__aeabi_dsub>
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	460d      	mov	r5, r1
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	4649      	mov	r1, r9
 800b9f6:	f7f4 fd71 	bl	80004dc <__aeabi_dmul>
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	e9cd 0100 	strd	r0, r1, [sp]
 800ba00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ba04:	4620      	mov	r0, r4
 800ba06:	4629      	mov	r1, r5
 800ba08:	f7f4 fbb0 	bl	800016c <__aeabi_dsub>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba14:	f7f4 fe8c 	bl	8000730 <__aeabi_ddiv>
 800ba18:	4632      	mov	r2, r6
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	460d      	mov	r5, r1
 800ba1e:	463b      	mov	r3, r7
 800ba20:	4640      	mov	r0, r8
 800ba22:	4649      	mov	r1, r9
 800ba24:	f7f4 fd5a 	bl	80004dc <__aeabi_dmul>
 800ba28:	4632      	mov	r2, r6
 800ba2a:	463b      	mov	r3, r7
 800ba2c:	f7f4 fba0 	bl	8000170 <__adddf3>
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	4620      	mov	r0, r4
 800ba36:	4629      	mov	r1, r5
 800ba38:	f7f4 fb98 	bl	800016c <__aeabi_dsub>
 800ba3c:	4642      	mov	r2, r8
 800ba3e:	464b      	mov	r3, r9
 800ba40:	f7f4 fb94 	bl	800016c <__aeabi_dsub>
 800ba44:	4602      	mov	r2, r0
 800ba46:	460b      	mov	r3, r1
 800ba48:	2000      	movs	r0, #0
 800ba4a:	4938      	ldr	r1, [pc, #224]	@ (800bb2c <__ieee754_pow+0xa3c>)
 800ba4c:	f7f4 fb8e 	bl	800016c <__aeabi_dsub>
 800ba50:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ba54:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800ba58:	da2e      	bge.n	800bab8 <__ieee754_pow+0x9c8>
 800ba5a:	4652      	mov	r2, sl
 800ba5c:	f000 fa04 	bl	800be68 <scalbn>
 800ba60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba64:	f7ff bbed 	b.w	800b242 <__ieee754_pow+0x152>
 800ba68:	4c31      	ldr	r4, [pc, #196]	@ (800bb30 <__ieee754_pow+0xa40>)
 800ba6a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ba6e:	42a3      	cmp	r3, r4
 800ba70:	d91a      	bls.n	800baa8 <__ieee754_pow+0x9b8>
 800ba72:	4b30      	ldr	r3, [pc, #192]	@ (800bb34 <__ieee754_pow+0xa44>)
 800ba74:	440b      	add	r3, r1
 800ba76:	4303      	orrs	r3, r0
 800ba78:	d009      	beq.n	800ba8e <__ieee754_pow+0x99e>
 800ba7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	2300      	movs	r3, #0
 800ba82:	f7f4 ff9d 	bl	80009c0 <__aeabi_dcmplt>
 800ba86:	3800      	subs	r0, #0
 800ba88:	bf18      	it	ne
 800ba8a:	2001      	movne	r0, #1
 800ba8c:	e444      	b.n	800b318 <__ieee754_pow+0x228>
 800ba8e:	4642      	mov	r2, r8
 800ba90:	464b      	mov	r3, r9
 800ba92:	f7f4 fb6b 	bl	800016c <__aeabi_dsub>
 800ba96:	4632      	mov	r2, r6
 800ba98:	463b      	mov	r3, r7
 800ba9a:	f7f4 ffa5 	bl	80009e8 <__aeabi_dcmpge>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d1eb      	bne.n	800ba7a <__ieee754_pow+0x98a>
 800baa2:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800bb38 <__ieee754_pow+0xa48>
 800baa6:	e6fd      	b.n	800b8a4 <__ieee754_pow+0x7b4>
 800baa8:	469a      	mov	sl, r3
 800baaa:	4b24      	ldr	r3, [pc, #144]	@ (800bb3c <__ieee754_pow+0xa4c>)
 800baac:	459a      	cmp	sl, r3
 800baae:	f63f aef9 	bhi.w	800b8a4 <__ieee754_pow+0x7b4>
 800bab2:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bab6:	e71b      	b.n	800b8f0 <__ieee754_pow+0x800>
 800bab8:	4621      	mov	r1, r4
 800baba:	e7d1      	b.n	800ba60 <__ieee754_pow+0x970>
 800babc:	2000      	movs	r0, #0
 800babe:	491b      	ldr	r1, [pc, #108]	@ (800bb2c <__ieee754_pow+0xa3c>)
 800bac0:	f7ff bb34 	b.w	800b12c <__ieee754_pow+0x3c>
 800bac4:	2000      	movs	r0, #0
 800bac6:	2100      	movs	r1, #0
 800bac8:	f7ff bb30 	b.w	800b12c <__ieee754_pow+0x3c>
 800bacc:	4650      	mov	r0, sl
 800bace:	4659      	mov	r1, fp
 800bad0:	f7ff bb2c 	b.w	800b12c <__ieee754_pow+0x3c>
 800bad4:	460c      	mov	r4, r1
 800bad6:	f7ff bb79 	b.w	800b1cc <__ieee754_pow+0xdc>
 800bada:	2400      	movs	r4, #0
 800badc:	f7ff bb64 	b.w	800b1a8 <__ieee754_pow+0xb8>
 800bae0:	652b82fe 	.word	0x652b82fe
 800bae4:	3c971547 	.word	0x3c971547
 800bae8:	00000000 	.word	0x00000000
 800baec:	3fe62e43 	.word	0x3fe62e43
 800baf0:	fefa39ef 	.word	0xfefa39ef
 800baf4:	3fe62e42 	.word	0x3fe62e42
 800baf8:	0ca86c39 	.word	0x0ca86c39
 800bafc:	be205c61 	.word	0xbe205c61
 800bb00:	72bea4d0 	.word	0x72bea4d0
 800bb04:	3e663769 	.word	0x3e663769
 800bb08:	c5d26bf1 	.word	0xc5d26bf1
 800bb0c:	3ebbbd41 	.word	0x3ebbbd41
 800bb10:	af25de2c 	.word	0xaf25de2c
 800bb14:	3f11566a 	.word	0x3f11566a
 800bb18:	16bebd93 	.word	0x16bebd93
 800bb1c:	3f66c16c 	.word	0x3f66c16c
 800bb20:	5555553e 	.word	0x5555553e
 800bb24:	3fc55555 	.word	0x3fc55555
 800bb28:	fff00000 	.word	0xfff00000
 800bb2c:	3ff00000 	.word	0x3ff00000
 800bb30:	4090cbff 	.word	0x4090cbff
 800bb34:	3f6f3400 	.word	0x3f6f3400
 800bb38:	4090cc00 	.word	0x4090cc00
 800bb3c:	3fe00000 	.word	0x3fe00000

0800bb40 <atan>:
 800bb40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb44:	4bbc      	ldr	r3, [pc, #752]	@ (800be38 <atan+0x2f8>)
 800bb46:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800bb4a:	429e      	cmp	r6, r3
 800bb4c:	4604      	mov	r4, r0
 800bb4e:	460d      	mov	r5, r1
 800bb50:	468b      	mov	fp, r1
 800bb52:	d918      	bls.n	800bb86 <atan+0x46>
 800bb54:	4bb9      	ldr	r3, [pc, #740]	@ (800be3c <atan+0x2fc>)
 800bb56:	429e      	cmp	r6, r3
 800bb58:	d801      	bhi.n	800bb5e <atan+0x1e>
 800bb5a:	d109      	bne.n	800bb70 <atan+0x30>
 800bb5c:	b140      	cbz	r0, 800bb70 <atan+0x30>
 800bb5e:	4622      	mov	r2, r4
 800bb60:	462b      	mov	r3, r5
 800bb62:	4620      	mov	r0, r4
 800bb64:	4629      	mov	r1, r5
 800bb66:	f7f4 fb03 	bl	8000170 <__adddf3>
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	460d      	mov	r5, r1
 800bb6e:	e006      	b.n	800bb7e <atan+0x3e>
 800bb70:	f1bb 0f00 	cmp.w	fp, #0
 800bb74:	f340 8123 	ble.w	800bdbe <atan+0x27e>
 800bb78:	a593      	add	r5, pc, #588	@ (adr r5, 800bdc8 <atan+0x288>)
 800bb7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb7e:	4620      	mov	r0, r4
 800bb80:	4629      	mov	r1, r5
 800bb82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb86:	4bae      	ldr	r3, [pc, #696]	@ (800be40 <atan+0x300>)
 800bb88:	429e      	cmp	r6, r3
 800bb8a:	d811      	bhi.n	800bbb0 <atan+0x70>
 800bb8c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800bb90:	429e      	cmp	r6, r3
 800bb92:	d80a      	bhi.n	800bbaa <atan+0x6a>
 800bb94:	a38e      	add	r3, pc, #568	@ (adr r3, 800bdd0 <atan+0x290>)
 800bb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9a:	f7f4 fae9 	bl	8000170 <__adddf3>
 800bb9e:	2200      	movs	r2, #0
 800bba0:	4ba8      	ldr	r3, [pc, #672]	@ (800be44 <atan+0x304>)
 800bba2:	f7f4 ff2b 	bl	80009fc <__aeabi_dcmpgt>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	d1e9      	bne.n	800bb7e <atan+0x3e>
 800bbaa:	f04f 3aff 	mov.w	sl, #4294967295
 800bbae:	e027      	b.n	800bc00 <atan+0xc0>
 800bbb0:	f000 f956 	bl	800be60 <fabs>
 800bbb4:	4ba4      	ldr	r3, [pc, #656]	@ (800be48 <atan+0x308>)
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	429e      	cmp	r6, r3
 800bbba:	460d      	mov	r5, r1
 800bbbc:	f200 80b8 	bhi.w	800bd30 <atan+0x1f0>
 800bbc0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800bbc4:	429e      	cmp	r6, r3
 800bbc6:	f200 809c 	bhi.w	800bd02 <atan+0x1c2>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	460b      	mov	r3, r1
 800bbce:	f7f4 facf 	bl	8000170 <__adddf3>
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	4b9b      	ldr	r3, [pc, #620]	@ (800be44 <atan+0x304>)
 800bbd6:	f7f4 fac9 	bl	800016c <__aeabi_dsub>
 800bbda:	2200      	movs	r2, #0
 800bbdc:	4606      	mov	r6, r0
 800bbde:	460f      	mov	r7, r1
 800bbe0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	f7f4 fac2 	bl	8000170 <__adddf3>
 800bbec:	4602      	mov	r2, r0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	4639      	mov	r1, r7
 800bbf4:	f7f4 fd9c 	bl	8000730 <__aeabi_ddiv>
 800bbf8:	f04f 0a00 	mov.w	sl, #0
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	460d      	mov	r5, r1
 800bc00:	4622      	mov	r2, r4
 800bc02:	462b      	mov	r3, r5
 800bc04:	4620      	mov	r0, r4
 800bc06:	4629      	mov	r1, r5
 800bc08:	f7f4 fc68 	bl	80004dc <__aeabi_dmul>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	460b      	mov	r3, r1
 800bc10:	4680      	mov	r8, r0
 800bc12:	4689      	mov	r9, r1
 800bc14:	f7f4 fc62 	bl	80004dc <__aeabi_dmul>
 800bc18:	a36f      	add	r3, pc, #444	@ (adr r3, 800bdd8 <atan+0x298>)
 800bc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1e:	4606      	mov	r6, r0
 800bc20:	460f      	mov	r7, r1
 800bc22:	f7f4 fc5b 	bl	80004dc <__aeabi_dmul>
 800bc26:	a36e      	add	r3, pc, #440	@ (adr r3, 800bde0 <atan+0x2a0>)
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	f7f4 faa0 	bl	8000170 <__adddf3>
 800bc30:	4632      	mov	r2, r6
 800bc32:	463b      	mov	r3, r7
 800bc34:	f7f4 fc52 	bl	80004dc <__aeabi_dmul>
 800bc38:	a36b      	add	r3, pc, #428	@ (adr r3, 800bde8 <atan+0x2a8>)
 800bc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3e:	f7f4 fa97 	bl	8000170 <__adddf3>
 800bc42:	4632      	mov	r2, r6
 800bc44:	463b      	mov	r3, r7
 800bc46:	f7f4 fc49 	bl	80004dc <__aeabi_dmul>
 800bc4a:	a369      	add	r3, pc, #420	@ (adr r3, 800bdf0 <atan+0x2b0>)
 800bc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc50:	f7f4 fa8e 	bl	8000170 <__adddf3>
 800bc54:	4632      	mov	r2, r6
 800bc56:	463b      	mov	r3, r7
 800bc58:	f7f4 fc40 	bl	80004dc <__aeabi_dmul>
 800bc5c:	a366      	add	r3, pc, #408	@ (adr r3, 800bdf8 <atan+0x2b8>)
 800bc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc62:	f7f4 fa85 	bl	8000170 <__adddf3>
 800bc66:	4632      	mov	r2, r6
 800bc68:	463b      	mov	r3, r7
 800bc6a:	f7f4 fc37 	bl	80004dc <__aeabi_dmul>
 800bc6e:	a364      	add	r3, pc, #400	@ (adr r3, 800be00 <atan+0x2c0>)
 800bc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc74:	f7f4 fa7c 	bl	8000170 <__adddf3>
 800bc78:	4642      	mov	r2, r8
 800bc7a:	464b      	mov	r3, r9
 800bc7c:	f7f4 fc2e 	bl	80004dc <__aeabi_dmul>
 800bc80:	a361      	add	r3, pc, #388	@ (adr r3, 800be08 <atan+0x2c8>)
 800bc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc86:	4680      	mov	r8, r0
 800bc88:	4689      	mov	r9, r1
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	f7f4 fc25 	bl	80004dc <__aeabi_dmul>
 800bc92:	a35f      	add	r3, pc, #380	@ (adr r3, 800be10 <atan+0x2d0>)
 800bc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc98:	f7f4 fa68 	bl	800016c <__aeabi_dsub>
 800bc9c:	4632      	mov	r2, r6
 800bc9e:	463b      	mov	r3, r7
 800bca0:	f7f4 fc1c 	bl	80004dc <__aeabi_dmul>
 800bca4:	a35c      	add	r3, pc, #368	@ (adr r3, 800be18 <atan+0x2d8>)
 800bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcaa:	f7f4 fa5f 	bl	800016c <__aeabi_dsub>
 800bcae:	4632      	mov	r2, r6
 800bcb0:	463b      	mov	r3, r7
 800bcb2:	f7f4 fc13 	bl	80004dc <__aeabi_dmul>
 800bcb6:	a35a      	add	r3, pc, #360	@ (adr r3, 800be20 <atan+0x2e0>)
 800bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbc:	f7f4 fa56 	bl	800016c <__aeabi_dsub>
 800bcc0:	4632      	mov	r2, r6
 800bcc2:	463b      	mov	r3, r7
 800bcc4:	f7f4 fc0a 	bl	80004dc <__aeabi_dmul>
 800bcc8:	a357      	add	r3, pc, #348	@ (adr r3, 800be28 <atan+0x2e8>)
 800bcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcce:	f7f4 fa4d 	bl	800016c <__aeabi_dsub>
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	463b      	mov	r3, r7
 800bcd6:	f7f4 fc01 	bl	80004dc <__aeabi_dmul>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4640      	mov	r0, r8
 800bce0:	4649      	mov	r1, r9
 800bce2:	f7f4 fa45 	bl	8000170 <__adddf3>
 800bce6:	4622      	mov	r2, r4
 800bce8:	462b      	mov	r3, r5
 800bcea:	f7f4 fbf7 	bl	80004dc <__aeabi_dmul>
 800bcee:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	d144      	bne.n	800bd82 <atan+0x242>
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	f7f4 fa36 	bl	800016c <__aeabi_dsub>
 800bd00:	e733      	b.n	800bb6a <atan+0x2a>
 800bd02:	2200      	movs	r2, #0
 800bd04:	4b4f      	ldr	r3, [pc, #316]	@ (800be44 <atan+0x304>)
 800bd06:	f7f4 fa31 	bl	800016c <__aeabi_dsub>
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	4606      	mov	r6, r0
 800bd0e:	460f      	mov	r7, r1
 800bd10:	4620      	mov	r0, r4
 800bd12:	4629      	mov	r1, r5
 800bd14:	4b4b      	ldr	r3, [pc, #300]	@ (800be44 <atan+0x304>)
 800bd16:	f7f4 fa2b 	bl	8000170 <__adddf3>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	4630      	mov	r0, r6
 800bd20:	4639      	mov	r1, r7
 800bd22:	f7f4 fd05 	bl	8000730 <__aeabi_ddiv>
 800bd26:	f04f 0a01 	mov.w	sl, #1
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	460d      	mov	r5, r1
 800bd2e:	e767      	b.n	800bc00 <atan+0xc0>
 800bd30:	4b46      	ldr	r3, [pc, #280]	@ (800be4c <atan+0x30c>)
 800bd32:	429e      	cmp	r6, r3
 800bd34:	d21a      	bcs.n	800bd6c <atan+0x22c>
 800bd36:	2200      	movs	r2, #0
 800bd38:	4b45      	ldr	r3, [pc, #276]	@ (800be50 <atan+0x310>)
 800bd3a:	f7f4 fa17 	bl	800016c <__aeabi_dsub>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	4606      	mov	r6, r0
 800bd42:	460f      	mov	r7, r1
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	4b41      	ldr	r3, [pc, #260]	@ (800be50 <atan+0x310>)
 800bd4a:	f7f4 fbc7 	bl	80004dc <__aeabi_dmul>
 800bd4e:	2200      	movs	r2, #0
 800bd50:	4b3c      	ldr	r3, [pc, #240]	@ (800be44 <atan+0x304>)
 800bd52:	f7f4 fa0d 	bl	8000170 <__adddf3>
 800bd56:	4602      	mov	r2, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	f7f4 fce7 	bl	8000730 <__aeabi_ddiv>
 800bd62:	f04f 0a02 	mov.w	sl, #2
 800bd66:	4604      	mov	r4, r0
 800bd68:	460d      	mov	r5, r1
 800bd6a:	e749      	b.n	800bc00 <atan+0xc0>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	460b      	mov	r3, r1
 800bd70:	2000      	movs	r0, #0
 800bd72:	4938      	ldr	r1, [pc, #224]	@ (800be54 <atan+0x314>)
 800bd74:	f7f4 fcdc 	bl	8000730 <__aeabi_ddiv>
 800bd78:	f04f 0a03 	mov.w	sl, #3
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	460d      	mov	r5, r1
 800bd80:	e73e      	b.n	800bc00 <atan+0xc0>
 800bd82:	4b35      	ldr	r3, [pc, #212]	@ (800be58 <atan+0x318>)
 800bd84:	4e35      	ldr	r6, [pc, #212]	@ (800be5c <atan+0x31c>)
 800bd86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	f7f4 f9ed 	bl	800016c <__aeabi_dsub>
 800bd92:	4622      	mov	r2, r4
 800bd94:	462b      	mov	r3, r5
 800bd96:	f7f4 f9e9 	bl	800016c <__aeabi_dsub>
 800bd9a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bd9e:	4602      	mov	r2, r0
 800bda0:	460b      	mov	r3, r1
 800bda2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bda6:	f7f4 f9e1 	bl	800016c <__aeabi_dsub>
 800bdaa:	f1bb 0f00 	cmp.w	fp, #0
 800bdae:	4604      	mov	r4, r0
 800bdb0:	460d      	mov	r5, r1
 800bdb2:	f6bf aee4 	bge.w	800bb7e <atan+0x3e>
 800bdb6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bdba:	461d      	mov	r5, r3
 800bdbc:	e6df      	b.n	800bb7e <atan+0x3e>
 800bdbe:	a51c      	add	r5, pc, #112	@ (adr r5, 800be30 <atan+0x2f0>)
 800bdc0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bdc4:	e6db      	b.n	800bb7e <atan+0x3e>
 800bdc6:	bf00      	nop
 800bdc8:	54442d18 	.word	0x54442d18
 800bdcc:	3ff921fb 	.word	0x3ff921fb
 800bdd0:	8800759c 	.word	0x8800759c
 800bdd4:	7e37e43c 	.word	0x7e37e43c
 800bdd8:	e322da11 	.word	0xe322da11
 800bddc:	3f90ad3a 	.word	0x3f90ad3a
 800bde0:	24760deb 	.word	0x24760deb
 800bde4:	3fa97b4b 	.word	0x3fa97b4b
 800bde8:	a0d03d51 	.word	0xa0d03d51
 800bdec:	3fb10d66 	.word	0x3fb10d66
 800bdf0:	c54c206e 	.word	0xc54c206e
 800bdf4:	3fb745cd 	.word	0x3fb745cd
 800bdf8:	920083ff 	.word	0x920083ff
 800bdfc:	3fc24924 	.word	0x3fc24924
 800be00:	5555550d 	.word	0x5555550d
 800be04:	3fd55555 	.word	0x3fd55555
 800be08:	2c6a6c2f 	.word	0x2c6a6c2f
 800be0c:	bfa2b444 	.word	0xbfa2b444
 800be10:	52defd9a 	.word	0x52defd9a
 800be14:	3fadde2d 	.word	0x3fadde2d
 800be18:	af749a6d 	.word	0xaf749a6d
 800be1c:	3fb3b0f2 	.word	0x3fb3b0f2
 800be20:	fe231671 	.word	0xfe231671
 800be24:	3fbc71c6 	.word	0x3fbc71c6
 800be28:	9998ebc4 	.word	0x9998ebc4
 800be2c:	3fc99999 	.word	0x3fc99999
 800be30:	54442d18 	.word	0x54442d18
 800be34:	bff921fb 	.word	0xbff921fb
 800be38:	440fffff 	.word	0x440fffff
 800be3c:	7ff00000 	.word	0x7ff00000
 800be40:	3fdbffff 	.word	0x3fdbffff
 800be44:	3ff00000 	.word	0x3ff00000
 800be48:	3ff2ffff 	.word	0x3ff2ffff
 800be4c:	40038000 	.word	0x40038000
 800be50:	3ff80000 	.word	0x3ff80000
 800be54:	bff00000 	.word	0xbff00000
 800be58:	0800c748 	.word	0x0800c748
 800be5c:	0800c768 	.word	0x0800c768

0800be60 <fabs>:
 800be60:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800be64:	4619      	mov	r1, r3
 800be66:	4770      	bx	lr

0800be68 <scalbn>:
 800be68:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800be6c:	4616      	mov	r6, r2
 800be6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800be72:	4683      	mov	fp, r0
 800be74:	468c      	mov	ip, r1
 800be76:	460b      	mov	r3, r1
 800be78:	b982      	cbnz	r2, 800be9c <scalbn+0x34>
 800be7a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800be7e:	4303      	orrs	r3, r0
 800be80:	d039      	beq.n	800bef6 <scalbn+0x8e>
 800be82:	4b2f      	ldr	r3, [pc, #188]	@ (800bf40 <scalbn+0xd8>)
 800be84:	2200      	movs	r2, #0
 800be86:	f7f4 fb29 	bl	80004dc <__aeabi_dmul>
 800be8a:	4b2e      	ldr	r3, [pc, #184]	@ (800bf44 <scalbn+0xdc>)
 800be8c:	4683      	mov	fp, r0
 800be8e:	429e      	cmp	r6, r3
 800be90:	468c      	mov	ip, r1
 800be92:	da0d      	bge.n	800beb0 <scalbn+0x48>
 800be94:	a326      	add	r3, pc, #152	@ (adr r3, 800bf30 <scalbn+0xc8>)
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	e01b      	b.n	800bed4 <scalbn+0x6c>
 800be9c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800bea0:	42ba      	cmp	r2, r7
 800bea2:	d109      	bne.n	800beb8 <scalbn+0x50>
 800bea4:	4602      	mov	r2, r0
 800bea6:	f7f4 f963 	bl	8000170 <__adddf3>
 800beaa:	4683      	mov	fp, r0
 800beac:	468c      	mov	ip, r1
 800beae:	e022      	b.n	800bef6 <scalbn+0x8e>
 800beb0:	460b      	mov	r3, r1
 800beb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800beb6:	3a36      	subs	r2, #54	@ 0x36
 800beb8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bebc:	428e      	cmp	r6, r1
 800bebe:	dd0c      	ble.n	800beda <scalbn+0x72>
 800bec0:	a31d      	add	r3, pc, #116	@ (adr r3, 800bf38 <scalbn+0xd0>)
 800bec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec6:	461c      	mov	r4, r3
 800bec8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800becc:	f361 74df 	bfi	r4, r1, #31, #1
 800bed0:	4621      	mov	r1, r4
 800bed2:	481d      	ldr	r0, [pc, #116]	@ (800bf48 <scalbn+0xe0>)
 800bed4:	f7f4 fb02 	bl	80004dc <__aeabi_dmul>
 800bed8:	e7e7      	b.n	800beaa <scalbn+0x42>
 800beda:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bede:	4432      	add	r2, r6
 800bee0:	428a      	cmp	r2, r1
 800bee2:	dced      	bgt.n	800bec0 <scalbn+0x58>
 800bee4:	2a00      	cmp	r2, #0
 800bee6:	dd0a      	ble.n	800befe <scalbn+0x96>
 800bee8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800beec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bef0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bef4:	46ac      	mov	ip, r5
 800bef6:	4658      	mov	r0, fp
 800bef8:	4661      	mov	r1, ip
 800befa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800befe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bf02:	da09      	bge.n	800bf18 <scalbn+0xb0>
 800bf04:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800bf08:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800bf0c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800bf10:	480e      	ldr	r0, [pc, #56]	@ (800bf4c <scalbn+0xe4>)
 800bf12:	f041 011f 	orr.w	r1, r1, #31
 800bf16:	e7bd      	b.n	800be94 <scalbn+0x2c>
 800bf18:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bf1c:	3236      	adds	r2, #54	@ 0x36
 800bf1e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bf22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bf26:	4658      	mov	r0, fp
 800bf28:	4629      	mov	r1, r5
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	4b08      	ldr	r3, [pc, #32]	@ (800bf50 <scalbn+0xe8>)
 800bf2e:	e7d1      	b.n	800bed4 <scalbn+0x6c>
 800bf30:	c2f8f359 	.word	0xc2f8f359
 800bf34:	01a56e1f 	.word	0x01a56e1f
 800bf38:	8800759c 	.word	0x8800759c
 800bf3c:	7e37e43c 	.word	0x7e37e43c
 800bf40:	43500000 	.word	0x43500000
 800bf44:	ffff3cb0 	.word	0xffff3cb0
 800bf48:	8800759c 	.word	0x8800759c
 800bf4c:	c2f8f359 	.word	0xc2f8f359
 800bf50:	3c900000 	.word	0x3c900000

0800bf54 <with_errno>:
 800bf54:	b570      	push	{r4, r5, r6, lr}
 800bf56:	4604      	mov	r4, r0
 800bf58:	460d      	mov	r5, r1
 800bf5a:	4616      	mov	r6, r2
 800bf5c:	f7fc fe62 	bl	8008c24 <__errno>
 800bf60:	4629      	mov	r1, r5
 800bf62:	6006      	str	r6, [r0, #0]
 800bf64:	4620      	mov	r0, r4
 800bf66:	bd70      	pop	{r4, r5, r6, pc}

0800bf68 <xflow>:
 800bf68:	b513      	push	{r0, r1, r4, lr}
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	4610      	mov	r0, r2
 800bf70:	b10c      	cbz	r4, 800bf76 <xflow+0xe>
 800bf72:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bf76:	e9cd 2300 	strd	r2, r3, [sp]
 800bf7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf7e:	f7f4 faad 	bl	80004dc <__aeabi_dmul>
 800bf82:	2222      	movs	r2, #34	@ 0x22
 800bf84:	b002      	add	sp, #8
 800bf86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf8a:	f7ff bfe3 	b.w	800bf54 <with_errno>

0800bf8e <__math_uflow>:
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800bf94:	f7ff bfe8 	b.w	800bf68 <xflow>

0800bf98 <__math_oflow>:
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800bf9e:	f7ff bfe3 	b.w	800bf68 <xflow>
	...

0800bfa4 <_init>:
 800bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa6:	bf00      	nop
 800bfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfaa:	bc08      	pop	{r3}
 800bfac:	469e      	mov	lr, r3
 800bfae:	4770      	bx	lr

0800bfb0 <_fini>:
 800bfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb2:	bf00      	nop
 800bfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfb6:	bc08      	pop	{r3}
 800bfb8:	469e      	mov	lr, r3
 800bfba:	4770      	bx	lr
